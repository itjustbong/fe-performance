{
  "articles": [
    {
      "id": 20,
      "title": "React Tutorial",
      "subTitle": "",
      "image": "https://images.unsplash.com/photo-1542435503-956c469947f6",
      "content": "This tutorial doesn't assume any existing React knowledge.\n\n## Before We Start the Tutorial {#before-we-start-the-tutorial}\n\nWe will build a small game during this tutorial. **You might be tempted to skip it because you're not building games -- but give it a chance.** The techniques you'll learn in the tutorial are fundamental to building any React app, and mastering it will give you a deep understanding of React.\n\n>Tip\n>\n>This tutorial is designed for people who prefer to **learn by doing**. If you prefer learning concepts from the ground up, check out our [step-by-step guide](/docs/hello-world.html). You might find this tutorial and the guide complementary to each other.\n\nThe tutorial is divided into several sections:\n\n* [Setup for the Tutorial](#setup-for-the-tutorial) will give you **a starting point** to follow the tutorial.\n* [Overview](#overview) will teach you **the fundamentals** of React: components, props, and state.\n* [Completing the Game](#completing-the-game) will teach you **the most common techniques** in React development.\n* [Adding Time Travel](#adding-time-travel) will give you **a deeper insight** into the unique strengths of React.\n\nYou don't have to complete all of the sections at once to get the value out of this tutorial. Try to get as far as you can -- even if it's one or two sections.\n\n### What Are We Building? {#what-are-we-building}\n\nIn this tutorial, we'll show how to build an interactive tic-tac-toe game with React.\n\nYou can see what we'll be building here: **[Final Result](https://codepen.io/gaearon/pen/gWWZgR?editors=0010)**. If the code doesn't make sense to you, or if you are unfamiliar with the code's syntax, don't worry! The goal of this tutorial is to help you understand React and its syntax.\n\nWe recommend that you check out the tic-tac-toe game before continuing with the tutorial. One of the features that you'll notice is that there is a numbered list to the right of the game's board. This list gives you a history of all of the moves that have occurred in the game, and is updated as the game progresses.\n\nYou can close the tic-tac-toe game once you're familiar with it. We'll be starting from a simpler template in this tutorial. Our next step is to set you up so that you can start building the game.\n\n### Prerequisites {#prerequisites}\n\nWe'll assume that you have some familiarity with HTML and JavaScript, but you should be able to follow along even if you're coming from a different programming language. We'll also assume that you're familiar with programming concepts like functions, objects, arrays, and to a lesser extent, classes.\n\nIf you need to review JavaScript, we recommend reading [this guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript). Note that we're also using some features from ES6 -- a recent version of JavaScript. In this tutorial, we're using [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions), [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes), [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let), and [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) statements. You can use the [Babel REPL](babel://es5-syntax-example) to check what ES6 code compiles to.\n\n## Setup for the Tutorial {#setup-for-the-tutorial}\n\nThere are two ways to complete this tutorial: you can either write the code in your browser, or you can set up a local development environment on your computer.\n\n### Setup Option 1: Write Code in the Browser {#setup-option-1-write-code-in-the-browser}\n\nThis is the quickest way to get started!\n\nFirst, open this **[Starter Code](https://codepen.io/gaearon/pen/oWWQNa?editors=0010)** in a new tab. The new tab should display an empty tic-tac-toe game board and React code. We will be editing the React code in this tutorial.\n\nYou can now skip the second setup option, and go to the [Overview](#overview) section to get an overview of React.\n\n### Setup Option 2: Local Development Environment {#setup-option-2-local-development-environment}\n\nThis is completely optional and not required for this tutorial!\n\n<br>\n\n<details>\n\n<summary><b>Optional: Instructions for following along locally using your preferred text editor</b></summary>\n\nThis setup requires more work but allows you to complete the tutorial using an editor of your choice. Here are the steps to follow:\n\n1. Make sure you have a recent version of [Node.js](https://nodejs.org/en/) installed.\n2. Follow the [installation instructions for Create React App](/docs/create-a-new-react-app.html#create-react-app) to make a new project.\n\n```bash\nnpx create-react-app my-app\n```\n\n3. Delete all files in the `src/` folder of the new project \n\n> Note:\n>\n>**Don't delete the entire `src` folder, just the original source files inside it.** We'll replace the default source files with examples for this project in the next step.\n\n```bash\ncd my-app\ncd src\n\n# If you're using a Mac or Linux:\nrm -f *\n\n# Or, if you're on Windows:\ndel *\n\n# Then, switch back to the project folder\ncd ..\n```\n\n4. Add a file named `index.css` in the `src/` folder with [this CSS code](https://codepen.io/gaearon/pen/oWWQNa?editors=0100).\n\n5. Add a file named `index.js` in the `src/` folder with [this JS code](https://codepen.io/gaearon/pen/oWWQNa?editors=0010).\n\n6. Add these three lines to the top of `index.js` in the `src/` folder:\n\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n```\n\nNow if you run `npm start` in the project folder and open `http://localhost:3000` in the browser, you should see an empty tic-tac-toe field.\n\nWe recommend following [these instructions](https://babeljs.io/docs/editors/) to configure syntax highlighting for your editor.\n\n</details>\n\n### Help, I'm Stuck! {#help-im-stuck}\n\nIf you get stuck, check out the [community support resources](/community/support.html). In particular, [Reactiflux Chat](https://discord.gg/reactiflux) is a great way to get help quickly. If you don't receive an answer, or if you remain stuck, please file an issue, and we'll help you out.\n\n## Overview {#overview}\n\nNow that you're set up, let's get an overview of React!\n\n### What Is React? {#what-is-react}\n\nReact is a declarative, efficient, and flexible JavaScript library for building user interfaces. It lets you compose complex UIs from small and isolated pieces of code called \"components\".\n\nReact has a few different kinds of components, but we'll start with `React.Component` subclasses:\n\n```javascript\nclass ShoppingList extends React.Component {\n  render() {\n    return (\n      <div className=\"shopping-list\">\n        <h1>Shopping List for {this.props.name}</h1>\n        <ul>\n          <li>Instagram</li>\n          <li>WhatsApp</li>\n          <li>Oculus</li>\n        </ul>\n      </div>\n    );\n  }\n}\n\n// Example usage: <ShoppingList name=\"Mark\" />\n```\n\nWe'll get to the funny XML-like tags soon. We use components to tell React what we want to see on the screen. When our data changes, React will efficiently update and re-render our components.\n\nHere, ShoppingList is a **React component class**, or **React component type**. A component takes in parameters, called `props` (short for \"properties\"), and returns a hierarchy of views to display via the `render` method.\n\nThe `render` method returns a *description* of what you want to see on the screen. React takes the description and displays the result. In particular, `render` returns a **React element**, which is a lightweight description of what to render. Most React developers use a special syntax called \"JSX\" which makes these structures easier to write. The `<div />` syntax is transformed at build time to `React.createElement('div')`. The example above is equivalent to:\n\n```javascript\nreturn React.createElement('div', {className: 'shopping-list'},\n  React.createElement('h1', /* ... h1 children ... */),\n  React.createElement('ul', /* ... ul children ... */)\n);\n```\n\n[See full expanded version.](babel://tutorial-expanded-version)\n\nIf you're curious, `createElement()` is described in more detail in the [API reference](/docs/react-api.html#createelement), but we won't be using it in this tutorial. Instead, we will keep using JSX.\n\nJSX comes with the full power of JavaScript. You can put *any* JavaScript expressions within braces inside JSX. Each React element is a JavaScript object that you can store in a variable or pass around in your program.\n\nThe `ShoppingList` component above only renders built-in DOM components like `<div />` and `<li />`. But you can compose and render custom React components too. For example, we can now refer to the whole shopping list by writing `<ShoppingList />`. Each React component is encapsulated and can operate independently; this allows you to build complex UIs from simple components.\n\n## Inspecting the Starter Code {#inspecting-the-starter-code}\n\nIf you're going to work on the tutorial **in your browser,** open this code in a new tab: **[Starter Code](https://codepen.io/gaearon/pen/oWWQNa?editors=0010)**. If you're going to work on the tutorial **locally,** instead open `src/index.js` in your project folder (you have already touched this file during the [setup](#setup-option-2-local-development-environment)).\n\nThis Starter Code is the base of what we're building. We've provided the CSS styling so that you only need to focus on learning React and programming the tic-tac-toe game.\n\nBy inspecting the code, you'll notice that we have three React components:\n\n* Square\n* Board\n* Game\n\nThe Square component renders a single `<button>` and the Board renders 9 squares. The Game component renders a board with placeholder values which we'll modify later. There are currently no interactive components.\n\n### Passing Data Through Props {#passing-data-through-props}\n\nTo get our feet wet, let's try passing some data from our Board component to our Square component.\n\nWe strongly recommend typing code by hand as you're working through the tutorial and not using copy/paste. This will help you develop muscle memory and a stronger understanding.\n\nIn Board's `renderSquare` method, change the code to pass a prop called `value` to the Square:\n\n```js{3}\nclass Board extends React.Component {\n  renderSquare(i) {\n    return <Square value={i} />;\n  }\n}\n```\n\nChange Square's `render` method to show that value by replacing `{/* TODO */}` with `{this.props.value}`:\n\n```js{5}\nclass Square extends React.Component {\n  render() {\n    return (\n      <button className=\"square\">\n        {this.props.value}\n      </button>\n    );\n  }\n}\n```\n\nBefore:\n\n![React Devtools](../images/tutorial/tictac-empty.png)\n\nAfter: You should see a number in each square in the rendered output.\n\n![React Devtools](../images/tutorial/tictac-numbers.png)\n\n**[View the full code at this point](https://codepen.io/gaearon/pen/aWWQOG?editors=0010)**\n\nCongratulations! You've just \"passed a prop\" from a parent Board component to a child Square component. Passing props is how information flows in React apps, from parents to children.\n\n### Making an Interactive Component {#making-an-interactive-component}\n\nLet's fill the Square component with an \"X\" when we click it.\nFirst, change the button tag that is returned from the Square component's `render()` function to this:\n\n```javascript{4}\nclass Square extends React.Component {\n  render() {\n    return (\n      <button className=\"square\" onClick={function() { alert('click'); }}>\n        {this.props.value}\n      </button>\n    );\n  }\n}\n```\n\nIf you click on a Square now, you should see an alert in your browser.\n\n>Note\n>\n>To save typing and avoid the [confusing behavior of `this`](https://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/), we will use the [arrow function syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) for event handlers here and further below:\n>\n>```javascript{4}\n>class Square extends React.Component {\n>  render() {\n>    return (\n>      <button className=\"square\" onClick={() => alert('click')}>\n>        {this.props.value}\n>      </button>\n>    );\n>  }\n>}\n>```\n>\n>Notice how with `onClick={() => alert('click')}`, we're passing *a function* as the `onClick` prop. React will only call this function after a click. Forgetting `() =>` and writing `onClick={alert('click')}` is a common mistake, and would fire the alert every time the component re-renders.\n\nAs a next step, we want the Square component to \"remember\" that it got clicked, and fill it with an \"X\" mark. To \"remember\" things, components use **state**.\n\nReact components can have state by setting `this.state` in their constructors. `this.state` should be considered as private to a React component that it's defined in. Let's store the current value of the Square in `this.state`, and change it when the Square is clicked.\n\nFirst, we'll add a constructor to the class to initialize the state:\n\n```javascript{2-7}\nclass Square extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: null,\n    };\n  }\n\n  render() {\n    return (\n      <button className=\"square\" onClick={() => alert('click')}>\n        {this.props.value}\n      </button>\n    );\n  }\n}\n```\n\n>Note\n>\n>In [JavaScript classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes), you need to always call `super` when defining the constructor of a subclass. All React component classes that have a `constructor` should start it with a `super(props)` call.\n\nNow we'll change the Square's `render` method to display the current state's value when clicked:\n\n* Replace `this.props.value` with `this.state.value` inside the `<button>` tag.\n* Replace the `onClick={...}` event handler with `onClick={() => this.setState({value: 'X'})}`.\n* Put the `className` and `onClick` props on separate lines for better readability.\n\nAfter these changes, the `<button>` tag that is returned by the Square's `render` method looks like this:\n\n```javascript{12-13,15}\nclass Square extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: null,\n    };\n  }\n\n  render() {\n    return (\n      <button\n        className=\"square\"\n        onClick={() => this.setState({value: 'X'})}\n      >\n        {this.state.value}\n      </button>\n    );\n  }\n}\n```\n\nBy calling `this.setState` from an `onClick` handler in the Square's `render` method, we tell React to re-render that Square whenever its `<button>` is clicked. After the update, the Square's `this.state.value` will be `'X'`, so we'll see the `X` on the game board. If you click on any Square, an `X` should show up.\n\nWhen you call `setState` in a component, React automatically updates the child components inside of it too.\n\n**[View the full code at this point](https://codepen.io/gaearon/pen/VbbVLg?editors=0010)**\n\n### Developer Tools {#developer-tools}\n\nThe React Devtools extension for [Chrome](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en) and [Firefox](https://addons.mozilla.org/en-US/firefox/addon/react-devtools/) lets you inspect a React component tree with your browser's developer tools.\n\n<img src=\"../images/tutorial/devtools.png\" alt=\"React Devtools\" style=\"max-width: 100%\">\n\nThe React DevTools let you check the props and the state of your React components.\n\nAfter installing React DevTools, you can right-click on any element on the page, click \"Inspect\" to open the developer tools, and the React tabs (\"⚛️ Components\" and \"⚛️ Profiler\") will appear as the last tabs to the right. Use \"⚛️ Components\" to inspect the component tree.\n\n**However, note there are a few extra steps to get it working with CodePen:**\n\n1. Log in or register and confirm your email (required to prevent spam).\n2. Click the \"Fork\" button.\n3. Click \"Change View\" and then choose \"Debug mode\".\n4. In the new tab that opens, the devtools should now have a React tab.\n\n## Completing the Game {#completing-the-game}\n\nWe now have the basic building blocks for our tic-tac-toe game. To have a complete game, we now need to alternate placing \"X\"s and \"O\"s on the board, and we need a way to determine a winner.\n\n### Lifting State Up {#lifting-state-up}\n\nCurrently, each Square component maintains the game's state. To check for a winner, we'll maintain the value of each of the 9 squares in one location.\n\nWe may think that Board should just ask each Square for the Square's state. Although this approach is possible in React, we discourage it because the code becomes difficult to understand, susceptible to bugs, and hard to refactor. Instead, the best approach is to store the game's state in the parent Board component instead of in each Square. The Board component can tell each Square what to display by passing a prop, [just like we did when we passed a number to each Square](#passing-data-through-props).\n\n**To collect data from multiple children, or to have two child components communicate with each other, you need to declare the shared state in their parent component instead. The parent component can pass the state back down to the children by using props; this keeps the child components in sync with each other and with the parent component.**\n\nLifting state into a parent component is common when React components are refactored -- let's take this opportunity to try it out.\n\nAdd a constructor to the Board and set the Board's initial state to contain an array of 9 nulls corresponding to the 9 squares:\n\n```javascript{2-7}\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n    };\n  }\n\n  renderSquare(i) {\n    return <Square value={i} />;\n  }\n```\n\nWhen we fill the board in later, the `this.state.squares` array will look something like this:\n\n```javascript\n[\n  'O', null, 'X',\n  'X', 'X', 'O',\n  'O', null, null,\n]\n```\n\nThe Board's `renderSquare` method currently looks like this:\n\n```javascript\n  renderSquare(i) {\n    return <Square value={i} />;\n  }\n```\n\nIn the beginning, we [passed the `value` prop down](#passing-data-through-props) from the Board to show numbers from 0 to 8 in every Square. In a different previous step, we replaced the numbers with an \"X\" mark [determined by Square's own state](#making-an-interactive-component). This is why Square currently ignores the `value` prop passed to it by the Board.\n\nWe will now use the prop passing mechanism again. We will modify the Board to instruct each individual Square about its current value (`'X'`, `'O'`, or `null`). We have already defined the `squares` array in the Board's constructor, and we will modify the Board's `renderSquare` method to read from it:\n\n```javascript{2}\n  renderSquare(i) {\n    return <Square value={this.state.squares[i]} />;\n  }\n```\n\n**[View the full code at this point](https://codepen.io/gaearon/pen/gWWQPY?editors=0010)**\n\nEach Square will now receive a `value` prop that will either be `'X'`, `'O'`, or `null` for empty squares.\n\nNext, we need to change what happens when a Square is clicked. The Board component now maintains which squares are filled. We need to create a way for the Square to update the Board's state. Since state is considered to be private to a component that defines it, we cannot update the Board's state directly from Square.\n\nInstead, we'll pass down a function from the Board to the Square, and we'll have Square call that function when a square is clicked. We'll change the `renderSquare` method in Board to:\n\n```javascript{5}\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.state.squares[i]}\n        onClick={() => this.handleClick(i)}\n      />\n    );\n  }\n```\n\n>Note\n>\n>We split the returned element into multiple lines for readability, and added parentheses so that JavaScript doesn't insert a semicolon after `return` and break our code.\n\nNow we're passing down two props from Board to Square: `value` and `onClick`. The `onClick` prop is a function that Square can call when clicked. We'll make the following changes to Square:\n\n* Replace `this.state.value` with `this.props.value` in Square's `render` method\n* Replace `this.setState()` with `this.props.onClick()` in Square's `render` method\n* Delete the `constructor` from Square because Square no longer keeps track of the game's state\n\nAfter these changes, the Square component looks like this:\n\n```javascript{1,2,6,8}\nclass Square extends React.Component {\n  render() {\n    return (\n      <button\n        className=\"square\"\n        onClick={() => this.props.onClick()}\n      >\n        {this.props.value}\n      </button>\n    );\n  }\n}\n```\n\nWhen a Square is clicked, the `onClick` function provided by the Board is called. Here's a review of how this is achieved:\n\n1. The `onClick` prop on the built-in DOM `<button>` component tells React to set up a click event listener.\n2. When the button is clicked, React will call the `onClick` event handler that is defined in Square's `render()` method.\n3. This event handler calls `this.props.onClick()`. The Square's `onClick` prop was specified by the Board.\n4. Since the Board passed `onClick={() => this.handleClick(i)}` to Square, the Square calls `this.handleClick(i)` when clicked.\n5. We have not defined the `handleClick()` method yet, so our code crashes. If you click a square now, you should see a red error screen saying something like \"this.handleClick is not a function\".\n\n>Note\n>\n>The DOM `<button>` element's `onClick` attribute has a special meaning to React because it is a built-in component. For custom components like Square, the naming is up to you. We could give any name to the Square's `onClick` prop or Board's `handleClick` method, and the code would work the same. In React, it's conventional to use `on[Event]` names for props which represent events and `handle[Event]` for the methods which handle the events.\n\nWhen we try to click a Square, we should get an error because we haven't defined `handleClick` yet. We'll now add `handleClick` to the Board class:\n\n```javascript{9-13}\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n    };\n  }\n\n  handleClick(i) {\n    const squares = this.state.squares.slice();\n    squares[i] = 'X';\n    this.setState({squares: squares});\n  }\n\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.state.squares[i]}\n        onClick={() => this.handleClick(i)}\n      />\n    );\n  }\n\n  render() {\n    const status = 'Next player: X';\n\n    return (\n      <div>\n        <div className=\"status\">{status}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n```\n\n**[View the full code at this point](https://codepen.io/gaearon/pen/ybbQJX?editors=0010)**\n\nAfter these changes, we're again able to click on the Squares to fill them, the same as we had before. However, now the state is stored in the Board component instead of the individual Square components. When the Board's state changes, the Square components re-render automatically. Keeping the state of all squares in the Board component will allow it to determine the winner in the future.\n\nSince the Square components no longer maintain state, the Square components receive values from the Board component and inform the Board component when they're clicked. In React terms, the Square components are now **controlled components**. The Board has full control over them.\n\nNote how in `handleClick`, we call `.slice()` to create a copy of the `squares` array to modify instead of modifying the existing array. We will explain why we create a copy of the `squares` array in the next section.\n\n### Why Immutability Is Important {#why-immutability-is-important}\n\nIn the previous code example, we suggested that you use the `.slice()` method to create a copy of the `squares` array to modify instead of modifying the existing array. We'll now discuss immutability and why immutability is important to learn.\n\nThere are generally two approaches to changing data. The first approach is to *mutate* the data by directly changing the data's values. The second approach is to replace the data with a new copy which has the desired changes.\n\n#### Data Change with Mutation {#data-change-with-mutation}\n```javascript\nvar player = {score: 1, name: 'Jeff'};\nplayer.score = 2;\n// Now player is {score: 2, name: 'Jeff'}\n```\n\n#### Data Change without Mutation {#data-change-without-mutation}\n```javascript\nvar player = {score: 1, name: 'Jeff'};\n\nvar newPlayer = Object.assign({}, player, {score: 2});\n// Now player is unchanged, but newPlayer is {score: 2, name: 'Jeff'}\n\n// Or if you are using object spread syntax proposal, you can write:\n// var newPlayer = {...player, score: 2};\n```\n\nThe end result is the same but by not mutating (or changing the underlying data) directly, we gain several benefits described below.\n\n#### Complex Features Become Simple {#complex-features-become-simple}\n\nImmutability makes complex features much easier to implement. Later in this tutorial, we will implement a \"time travel\" feature that allows us to review the tic-tac-toe game's history and \"jump back\" to previous moves. This functionality isn't specific to games -- an ability to undo and redo certain actions is a common requirement in applications. Avoiding direct data mutation lets us keep previous versions of the game's history intact, and reuse them later.\n\n#### Detecting Changes {#detecting-changes}\n\nDetecting changes in mutable objects is difficult because they are modified directly. This detection requires the mutable object to be compared to previous copies of itself and the entire object tree to be traversed.\n\nDetecting changes in immutable objects is considerably easier. If the immutable object that is being referenced is different than the previous one, then the object has changed.\n\n#### Determining When to Re-Render in React {#determining-when-to-re-render-in-react}\n\nThe main benefit of immutability is that it helps you build _pure components_ in React. Immutable data can easily determine if changes have been made which helps to determine when a component requires re-rendering.\n\nYou can learn more about `shouldComponentUpdate()` and how you can build *pure components* by reading [Optimizing Performance](/docs/optimizing-performance.html#examples).\n\n### Function Components {#function-components}\n\nWe'll now change the Square to be a **function component**.\n\nIn React, **function components** are a simpler way to write components that only contain a `render` method and don't have their own state. Instead of defining a class which extends `React.Component`, we can write a function that takes `props` as input and returns what should be rendered. Function components are less tedious to write than classes, and many components can be expressed this way.\n\nReplace the Square class with this function:\n\n```javascript\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n```\n\nWe have changed `this.props` to `props` both times it appears.\n\n**[View the full code at this point](https://codepen.io/gaearon/pen/QvvJOv?editors=0010)**\n\n>Note\n>\n>When we modified the Square to be a function component, we also changed `onClick={() => this.props.onClick()}` to a shorter `onClick={props.onClick}` (note the lack of parentheses on *both* sides).\n\n### Taking Turns {#taking-turns}\n\nWe now need to fix an obvious defect in our tic-tac-toe game: the \"O\"s cannot be marked on the board.\n\nWe'll set the first move to be \"X\" by default. We can set this default by modifying the initial state in our Board constructor:\n\n```javascript{6}\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true,\n    };\n  }\n```\n\nEach time a player moves, `xIsNext` (a boolean) will be flipped to determine which player goes next and the game's state will be saved. We'll update the Board's `handleClick` function to flip the value of `xIsNext`:\n\n```javascript{3,6}\n  handleClick(i) {\n    const squares = this.state.squares.slice();\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n```\n\nWith this change, \"X\"s and \"O\"s can take turns. Try it!\n\nLet's also change the \"status\" text in Board's `render` so that it displays which player has the next turn:\n\n```javascript{2}\n  render() {\n    const status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n\n    return (\n      // the rest has not changed\n```\n\nAfter applying these changes, you should have this Board component:\n\n```javascript{6,11-16,29}\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true,\n    };\n  }\n\n  handleClick(i) {\n    const squares = this.state.squares.slice();\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.state.squares[i]}\n        onClick={() => this.handleClick(i)}\n      />\n    );\n  }\n\n  render() {\n    const status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n\n    return (\n      <div>\n        <div className=\"status\">{status}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n```\n\n**[View the full code at this point](https://codepen.io/gaearon/pen/KmmrBy?editors=0010)**\n\n### Declaring a Winner {#declaring-a-winner}\n\nNow that we show which player's turn is next, we should also show when the game is won and there are no more turns to make. Copy this helper function and paste it at the end of the file:\n\n```javascript\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n```\n\nGiven an array of 9 squares, this function will check for a winner and return `'X'`, `'O'`, or `null` as appropriate.\n\nWe will call `calculateWinner(squares)` in the Board's `render` function to check if a player has won. If a player has won, we can display text such as \"Winner: X\" or \"Winner: O\". We'll replace the `status` declaration in Board's `render` function with this code:\n\n```javascript{2-8}\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      // the rest has not changed\n```\n\nWe can now change the Board's `handleClick` function to return early by ignoring a click if someone has won the game or if a Square is already filled:\n\n```javascript{3-5}\n  handleClick(i) {\n    const squares = this.state.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n```\n\n**[View the full code at this point](https://codepen.io/gaearon/pen/LyyXgK?editors=0010)**\n\nCongratulations! You now have a working tic-tac-toe game. And you've just learned the basics of React too. So *you're* probably the real winner here.\n\n## Adding Time Travel {#adding-time-travel}\n\nAs a final exercise, let's make it possible to \"go back in time\" to the previous moves in the game.\n\n### Storing a History of Moves {#storing-a-history-of-moves}\n\nIf we mutated the `squares` array, implementing time travel would be very difficult.\n\nHowever, we used `slice()` to create a new copy of the `squares` array after every move, and [treated it as immutable](#why-immutability-is-important). This will allow us to store every past version of the `squares` array, and navigate between the turns that have already happened.\n\nWe'll store the past `squares` arrays in another array called `history`. The `history` array represents all board states, from the first to the last move, and has a shape like this:\n\n```javascript\nhistory = [\n  // Before first move\n  {\n    squares: [\n      null, null, null,\n      null, null, null,\n      null, null, null,\n    ]\n  },\n  // After first move\n  {\n    squares: [\n      null, null, null,\n      null, 'X', null,\n      null, null, null,\n    ]\n  },\n  // After second move\n  {\n    squares: [\n      null, null, null,\n      null, 'X', null,\n      null, null, 'O',\n    ]\n  },\n  // ...\n]\n```\n\nNow we need to decide which component should own the `history` state.\n\n### Lifting State Up, Again {#lifting-state-up-again}\n\nWe'll want the top-level Game component to display a list of past moves. It will need access to the `history` to do that, so we will place the `history` state in the top-level Game component.\n\nPlacing the `history` state into the Game component lets us remove the `squares` state from its child Board component. Just like we [\"lifted state up\"](#lifting-state-up) from the Square component into the Board component, we are now lifting it up from the Board into the top-level Game component. This gives the Game component full control over the Board's data, and lets it instruct the Board to render previous turns from the `history`.\n\nFirst, we'll set up the initial state for the Game component within its constructor:\n\n```javascript{2-10}\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      xIsNext: true,\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n        <div className=\"game-info\">\n          <div>{/* status */}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n```\n\nNext, we'll have the Board component receive `squares` and `onClick` props from the Game component. Since we now have a single click handler in Board for many Squares, we'll need to pass the location of each Square into the `onClick` handler to indicate which Square was clicked. Here are the required steps to transform the Board component:\n\n* Delete the `constructor` in Board.\n* Replace `this.state.squares[i]` with `this.props.squares[i]` in Board's `renderSquare`.\n* Replace `this.handleClick(i)` with `this.props.onClick(i)` in Board's `renderSquare`.\n\nThe Board component now looks like this:\n\n```javascript{17,18}\nclass Board extends React.Component {\n  handleClick(i) {\n    const squares = this.state.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div>\n        <div className=\"status\">{status}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n```\n\nWe'll update the Game component's `render` function to use the most recent history entry to determine and display the game's status:\n\n```javascript{2-11,16-19,22}\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares);\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    );\n  }\n```\n\nSince the Game component is now rendering the game's status, we can remove the corresponding code from the Board's `render` method. After refactoring, the Board's `render` function looks like this:\n\n```js{1-4}\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n```\n\nFinally, we need to move the `handleClick` method from the Board component to the Game component. We also need to modify `handleClick` because the Game component's state is structured differently. Within the Game's `handleClick` method, we concatenate new history entries onto `history`.\n\n```javascript{2-4,10-12}\n  handleClick(i) {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n      }]),\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n```\n\n>Note\n>\n>Unlike the array `push()` method you might be more familiar with, the `concat()` method doesn't mutate the original array, so we prefer it.\n\nAt this point, the Board component only needs the `renderSquare` and `render` methods. The game's state and the `handleClick` method should be in the Game component.\n\n**[View the full code at this point](https://codepen.io/gaearon/pen/EmmOqJ?editors=0010)**\n\n### Showing the Past Moves {#showing-the-past-moves}\n\nSince we are recording the tic-tac-toe game's history, we can now display it to the player as a list of past moves.\n\nWe learned earlier that React elements are first-class JavaScript objects; we can pass them around in our applications. To render multiple items in React, we can use an array of React elements.\n\nIn JavaScript, arrays have a [`map()` method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) that is commonly used for mapping data to other data, for example:\n\n```js\nconst numbers = [1, 2, 3];\nconst doubled = numbers.map(x => x * 2); // [2, 4, 6]\n```\n\nUsing the `map` method, we can map our history of moves to React elements representing buttons on the screen, and display a list of buttons to \"jump\" to past moves.\n\nLet's `map` over the `history` in the Game's `render` method:\n\n```javascript{6-15,34}\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n      return (\n        <li>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n```\n\n**[View the full code at this point](https://codepen.io/gaearon/pen/EmmGEa?editors=0010)**\n\nFor each move in the tic-tac-toes's game's history, we create a list item `<li>` which contains a button `<button>`. The button has a `onClick` handler which calls a method called `this.jumpTo()`. We haven't implemented the `jumpTo()` method yet. For now, we should see a list of the moves that have occurred in the game and a warning in the developer tools console that says:\n\n>  Warning:\n>  Each child in an array or iterator should have a unique \"key\" prop. Check the render method of \"Game\".\n\nLet's discuss what the above warning means.\n\n### Picking a Key {#picking-a-key}\n\nWhen we render a list, React stores some information about each rendered list item. When we update a list, React needs to determine what has changed. We could have added, removed, re-arranged, or updated the list's items.\n\nImagine transitioning from\n\n```html\n<li>Alexa: 7 tasks left</li>\n<li>Ben: 5 tasks left</li>\n```\n\nto\n\n```html\n<li>Ben: 9 tasks left</li>\n<li>Claudia: 8 tasks left</li>\n<li>Alexa: 5 tasks left</li>\n```\n\nIn addition to the updated counts, a human reading this would probably say that we swapped Alexa and Ben's ordering and inserted Claudia between Alexa and Ben. However, React is a computer program and does not know what we intended. Because React cannot know our intentions, we need to specify a *key* property for each list item to differentiate each list item from its siblings. One option would be to use the strings `alexa`, `ben`, `claudia`. If we were displaying data from a database, Alexa, Ben, and Claudia's database IDs could be used as keys.\n\n```html\n<li key={user.id}>{user.name}: {user.taskCount} tasks left</li>\n```\n\nWhen a list is re-rendered, React takes each list item's key and searches the previous list's items for a matching key. If the current list has a key that didn't exist before, React creates a component. If the current list is missing a key that existed in the previous list, React destroys the previous component. If two keys match, the corresponding component is moved. Keys tell React about the identity of each component which allows React to maintain state between re-renders. If a component's key changes, the component will be destroyed and re-created with a new state.\n\n`key` is a special and reserved property in React (along with `ref`, a more advanced feature). When an element is created, React extracts the `key` property and stores the key directly on the returned element. Even though `key` may look like it belongs in `props`, `key` cannot be referenced using `this.props.key`. React automatically uses `key` to decide which components to update. A component cannot inquire about its `key`.\n\n**It's strongly recommended that you assign proper keys whenever you build dynamic lists.** If you don't have an appropriate key, you may want to consider restructuring your data so that you do.\n\nIf no key is specified, React will present a warning and use the array index as a key by default. Using the array index as a key is problematic when trying to re-order a list's items or inserting/removing list items. Explicitly passing `key={i}` silences the warning but has the same problems as array indices and is not recommended in most cases.\n\nKeys do not need to be globally unique; they only need to be unique between components and their siblings.\n\n\n### Implementing Time Travel {#implementing-time-travel}\n\nIn the tic-tac-toe game's history, each past move has a unique ID associated with it: it's the sequential number of the move. The moves are never re-ordered, deleted, or inserted in the middle, so it's safe to use the move index as a key.\n\nIn the Game component's `render` method, we can add the key as `<li key={move}>` and React's warning about keys should disappear:\n\n```js{6}\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n```\n\n**[View the full code at this point](https://codepen.io/gaearon/pen/PmmXRE?editors=0010)**\n\nClicking any of the list item's buttons throws an error because the `jumpTo` method is undefined. Before we implement `jumpTo`, we'll add `stepNumber` to the Game component's state to indicate which step we're currently viewing.\n\nFirst, add `stepNumber: 0` to the initial state in Game's `constructor`:\n\n```js{8}\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n    };\n  }\n```\n\nNext, we'll define the `jumpTo` method in Game to update that `stepNumber`. We also set `xIsNext` to true if the number that we're changing `stepNumber` to is even:\n\n```javascript{5-10}\n  handleClick(i) {\n    // this method has not changed\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  render() {\n    // this method has not changed\n  }\n```\n\nWe will now make a few changes to the Game's `handleClick` method which fires when you click on a square.\n\nThe `stepNumber` state we've added reflects the move displayed to the user now. After we make a new move, we need to update `stepNumber` by adding `stepNumber: history.length` as part of the `this.setState` argument. This ensures we don't get stuck showing the same move after a new one has been made.\n\nWe will also replace reading `this.state.history` with `this.state.history.slice(0, this.state.stepNumber + 1)`. This ensures that if we \"go back in time\" and then make a new move from that point, we throw away all the \"future\" history that would now become incorrect.\n\n```javascript{2,13}\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n```\n\nFinally, we will modify the Game component's `render` method from always rendering the last move to rendering the currently selected move according to `stepNumber`:\n\n```javascript{3}\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    // the rest has not changed\n```\n\nIf we click on any step in the game's history, the tic-tac-toe board should immediately update to show what the board looked like after that step occurred.\n\n**[View the full code at this point](https://codepen.io/gaearon/pen/gWWZgR?editors=0010)**\n\n### Wrapping Up {#wrapping-up}\n\nCongratulations! You've created a tic-tac-toe game that:\n\n* Lets you play tic-tac-toe,\n* Indicates when a player has won the game,\n* Stores a game's history as a game progresses,\n* Allows players to review a game's history and see previous versions of a game's board.\n\nNice work! We hope you now feel like you have a decent grasp on how React works.\n\nCheck out the final result here: **[Final Result](https://codepen.io/gaearon/pen/gWWZgR?editors=0010)**.\n\nIf you have extra time or want to practice your new React skills, here are some ideas for improvements that you could make to the tic-tac-toe game which are listed in order of increasing difficulty:\n\n1. Display the location for each move in the format (col, row) in the move history list.\n2. Bold the currently selected item in the move list.\n3. Rewrite Board to use two loops to make the squares instead of hardcoding them.\n4. Add a toggle button that lets you sort the moves in either ascending or descending order.\n5. When someone wins, highlight the three squares that caused the win.\n6. When no one wins, display a message about the result being a draw.\n\nThroughout this tutorial, we touched on React concepts including elements, components, props, and state. For a more detailed explanation of each of these topics, check out [the rest of the documentation](/docs/hello-world.html). To learn more about defining components, check out the [`React.Component` API reference](/docs/react-component.html).",
      "createdTime": "2020-01-05T16:59:46.443Z",
      "source": "https://github.com/reactjs/reactjs.org/blob/master/content/tutorial/tutorial.md"
    },
    {
      "id": 19,
      "title": "Next.js",
      "subTitle": "",
      "image": "https://images.unsplash.com/photo-1537498425277-c283d32ef9db",
      "content": "## How to use\n\n### Setup\n\n#### Quick Start\n\n```bash\nnpx create-next-app\n```\n\n_([npx](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b) comes with npm 5.2+ and higher, see [instructions for older npm versions](https://gist.github.com/timer/833d9946fa8a05ba855729d05a38ac23))_\n\n#### Manual Setup\n\nInstall it in your project:\n\n```bash\nnpm install --save next react react-dom\n```\n\nand add a script to your package.json like this:\n\n```json\n{\n  \"scripts\": {\n    \"dev\": \"next\",\n    \"build\": \"next build\",\n    \"start\": \"next start\"\n  }\n}\n```\n\nAfter that, the file-system is the main API. Every `.js` file becomes a route that gets automatically processed and rendered.\n\nPopulate `./pages/index.js` inside your project:\n\n```jsx\nfunction Home() {\n  return <div>Welcome to Next.js!</div>\n}\n\nexport default Home\n```\n\nand then just run `npm run dev` and go to `http://localhost:3000`. To use another port, you can run `npm run dev -- -p <your port here>`.\n\nSo far, we get:\n\n- Automatic transpilation and bundling (with webpack and babel)\n- Hot code reloading\n- Server rendering and indexing of `./pages/`\n- Static file serving. `./public/` is mapped to `/` (given you [create a `./public/` directory](#static-file-serving-eg-images) inside your project)\n\n### Automatic code splitting\n\nEvery `import` you declare gets bundled and served with each page. That means pages never load unnecessary code!\n\n```jsx\nimport cowsay from 'cowsay-browser'\n\nfunction CowsayHi() {\n  return <pre>{cowsay.say({ text: 'hi there!' })}</pre>\n}\n\nexport default CowsayHi\n```\n\n### CSS\n\n#### Built-in CSS support\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"/examples/basic-css\">Basic css</a></li>\n  </ul>\n</details>\n\nWe bundle [styled-jsx](https://github.com/zeit/styled-jsx) to provide support for isolated scoped CSS. The aim is to support \"shadow CSS\" similar to Web Components, which unfortunately [do not support server-rendering and are JS-only](https://github.com/w3c/webcomponents/issues/71).\n\n```jsx\nfunction HelloWorld() {\n  return (\n    <div>\n      Hello world\n      <p>scoped!</p>\n      <style jsx>{`\n        p {\n          color: blue;\n        }\n        div {\n          background: red;\n        }\n        @media (max-width: 600px) {\n          div {\n            background: blue;\n          }\n        }\n      `}</style>\n      <style global jsx>{`\n        body {\n          background: black;\n        }\n      `}</style>\n    </div>\n  )\n}\n\nexport default HelloWorld\n```\n\nPlease see the [styled-jsx documentation](https://www.npmjs.com/package/styled-jsx) for more examples.\n\n#### CSS-in-JS\n\n<details>\n  <summary>\n    <b>Examples</b>\n  </summary>\n  <ul>\n    <li><a href=\"/examples/with-styled-components\">Styled components</a></li>\n    <li><a href=\"/examples/with-styletron\">Styletron</a></li>\n    <li><a href=\"/examples/with-glamor\">Glamor</a></li>\n    <li><a href=\"/examples/with-cxs\">Cxs</a></li>\n    <li><a href=\"/examples/with-aphrodite\">Aphrodite</a></li>\n    <li><a href=\"/examples/with-fela\">Fela</a></li>\n  </ul>\n</details>\n\nIt's possible to use any existing CSS-in-JS solution. The simplest one is inline styles:\n\n```jsx\nfunction HiThere() {\n  return <p style={{ color: 'red' }}>hi there</p>\n}\n\nexport default HiThere\n```\n\nTo use more sophisticated CSS-in-JS solutions, you typically have to implement style flushing for server-side rendering. We enable this by allowing you to define your own [custom `<Document>`](#custom-document) component that wraps each page.\n\n#### Importing CSS / Sass / Less / Stylus files\n\nTo support importing `.css`, `.scss`, `.less` or `.styl` files you can use these modules, which configure sensible defaults for server rendered applications.\n\n- [@zeit/next-css](https://github.com/zeit/next-plugins/tree/master/packages/next-css)\n- [@zeit/next-sass](https://github.com/zeit/next-plugins/tree/master/packages/next-sass)\n- [@zeit/next-less](https://github.com/zeit/next-plugins/tree/master/packages/next-less)\n- [@zeit/next-stylus](https://github.com/zeit/next-plugins/tree/master/packages/next-stylus)\n\n### Static file serving (e.g.: images)\n\nCreate a folder called `public` in your project root directory. From your code you can then reference those files starting from the baseURL `/`\n\n```jsx\nfunction MyImage() {\n  return <img src=\"/my-image.png\" alt=\"my image\" />\n}\n\nexport default MyImage\n```\n\n_Note: Don't name the `public` directory anything else. The name can't be changed and is the only directory that Next.js uses for serving static assets._\n\n### Dynamic Routing\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"/examples/dynamic-routing\">Dynamic routing</a></li>\n  </ul>\n</details>\n\nDefining routes by using predefined paths is not always enough for complex applications, in Next.js you can add brackets to a page (`[param]`) to create a dynamic route (a.k.a. url slugs, pretty urls, et al).\n\nConsider the following page `pages/post/[pid].js`:\n\n```jsx\nimport { useRouter } from 'next/router'\n\nconst Post = () => {\n  const router = useRouter()\n  const { pid } = router.query\n\n  return <p>Post: {pid}</p>\n}\n\nexport default Post\n```\n\nAny route like `/post/1`, `/post/abc`, etc will be matched by `pages/post/[pid].js`.\nThe matched path parameter will be sent as a query parameter to the page.\n\nFor example, the route `/post/abc` will have the following `query` object: `{ pid: 'abc' }`.\nSimilarly, the route `/post/abc?foo=bar` will have the `query` object: `{ foo: 'bar', pid: 'abc' }`.\n\n> Note: Multiple dynamic route segments work the same way.\n>\n> For example, `pages/post/[pid]/[comment].js` would match `/post/1/a-comment`.\n> Its `query` object would be: `{ pid: '1', comment: 'a-comment' }`.\n\nA `<Link>` for `/post/abc` looks like so:\n\n```jsx\n<Link href=\"/post/[pid]\" as=\"/post/abc\">\n  <a>First Post</a>\n</Link>\n```\n\n- `href`: the path inside `pages` directory.\n- `as`: the path that will be rendered in the browser URL bar.\n\nAs `href` is a filesystem path, it shouldn't change at runtime, instead, you will probably need to change `as`\ndynamically according to your needs. Here's an example to create a list of links:\n\n```jsx\nconst pids = ['id1', 'id2', 'id3']\n{\n  pids.map(pid => (\n    <Link href=\"/post/[pid]\" as={`/post/${pid}`}>\n      <a>Post {pid}</a>\n    </Link>\n  ))\n}\n```\n\n> You can [read more about `<Link>` here](#with-link).\n\nHowever, if a query and route param name are the same, route parameters will override the matching query params.\nFor example, `/post/abc?pid=bcd` will have the `query` object: `{ pid: 'abc' }`.\n\n> **Note**: Predefined routes take precedence over dynamic routes.\n> For example, if you have `pages/post/[pid].js` and `pages/post/create.js`, the route `/post/create` will be matched by `pages/post/create.js` instead of the dynamic route (`[pid]`).\n\n> **Note**: Pages that are statically optimized by [automatic static optimization](#automatic-static-optimization) will be hydrated without their route parameters provided (`query` will be empty, i.e. `{}`).\n> After hydration, Next.js will trigger an update to your application to provide the route parameters in the `query` object.\n> If your application cannot tolerate this behavior, you can opt-out of static optimization by capturing the query parameter in `getInitialProps`.\n\n> **Note**: If deploying to [ZEIT Now](https://zeit.co/now) dynamic routes will work out-of-the-box.\n> You do not need to configure custom routes in a `now.json` file.\n>\n> If you are new to ZEIT Now, you can learn how to deploy a Next.js app to it in the [_Deploying a Next.js App_ Learn section](https://nextjs.org/learn/basics/deploying-a-nextjs-app).\n\n### Populating `<head>`\n\n<details>\n<summary><b>Examples</b></summary>\n<ul>\n <li><a href=\"/examples/head-elements\">Head elements</a></li>\n <li><a href=\"/examples/layout-component\">Layout component</a></li>\n</ul>\n</details>\n\nWe expose a built-in component for appending elements to the `<head>` of the page.\n\n```jsx\nimport Head from 'next/head'\n\nfunction IndexPage() {\n  return (\n    <div>\n      <Head>\n        <title>My page title</title>\n        <meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width\" />\n      </Head>\n      <p>Hello world!</p>\n    </div>\n  )\n}\n\nexport default IndexPage\n```\n\nTo avoid duplicate tags in your `<head>` you can use the `key` property, which will make sure the tag is only rendered once:\n\n```jsx\nimport Head from 'next/head'\n\nfunction IndexPage() {\n  return (\n    <div>\n      <Head>\n        <title>My page title</title>\n        <meta\n          name=\"viewport\"\n          content=\"initial-scale=1.0, width=device-width\"\n          key=\"viewport\"\n        />\n      </Head>\n      <Head>\n        <meta\n          name=\"viewport\"\n          content=\"initial-scale=1.2, width=device-width\"\n          key=\"viewport\"\n        />\n      </Head>\n      <p>Hello world!</p>\n    </div>\n  )\n}\n\nexport default IndexPage\n```\n\nIn this case only the second `<meta name=\"viewport\" />` is rendered.\n\n_Note: The contents of `<head>` get cleared upon unmounting the component, so make sure each page completely defines what it needs in `<head>`, without making assumptions about what other pages added._\n\n_Note: `<title>` and `<meta>` elements need to be contained as **direct** children of the `<Head>` element, or wrapped into maximum one level of `<React.Fragment>`, otherwise the metatags won't be correctly picked up on clientside navigation._\n\n### Fetching data and component lifecycle\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"/examples/data-fetch\">Data fetch</a></li>\n  </ul>\n</details>\n\nWhen you need state, lifecycle hooks or **initial data population** you can export a function component that uses [Hooks](https://reactjs.org/docs/hooks-intro.html) or a [class component](https://reactjs.org/docs/react-component.html).\n\nUsing a function component:\n\n```jsx\nimport fetch from 'isomorphic-unfetch'\n\nfunction Page({ stars }) {\n  return <div>Next stars: {stars}</div>\n}\n\nPage.getInitialProps = async ({ req }) => {\n  const res = await fetch('https://api.github.com/repos/zeit/next.js')\n  const json = await res.json()\n  return { stars: json.stargazers_count }\n}\n\nexport default Page\n```\n\nUsing a class component:\n\n```jsx\nimport React from 'react'\n\nclass HelloUA extends React.Component {\n  static async getInitialProps({ req }) {\n    const userAgent = req ? req.headers['user-agent'] : navigator.userAgent\n    return { userAgent }\n  }\n\n  render() {\n    return <div>Hello World {this.props.userAgent}</div>\n  }\n}\n\nexport default HelloUA\n```\n\nNotice that to load data when the page loads, we use `getInitialProps` which is an [`async`](https://zeit.co/blog/async-and-await) static method. It can asynchronously fetch anything that resolves to a JavaScript plain `Object`, which populates `props`.\n\nData returned from `getInitialProps` is serialized when server rendering, similar to a `JSON.stringify`. Make sure the returned object from `getInitialProps` is a plain `Object` and not using `Date`, `Map` or `Set`.\n\nFor the initial page load, `getInitialProps` will execute on the server only. `getInitialProps` will only be executed on the client when navigating to a different route via the `Link` component or using the routing APIs.\n\n<br/>\n\n> - `getInitialProps` can **not** be used in children components. Only in `pages`.\n> - If you are using some server only modules inside `getInitialProps`, make sure to [import them properly](https://arunoda.me/blog/ssr-and-server-only-modules), otherwise, it'll slow down your app.\n\n<br/>\n\n`getInitialProps` receives a context object with the following properties:\n\n- `pathname` - path section of URL\n- `query` - query string section of URL parsed as an object\n- `asPath` - `String` of the actual path (including the query) shows in the browser\n- `req` - HTTP request object (server only)\n- `res` - HTTP response object (server only)\n- `err` - Error object if any error is encountered during the rendering\n\n### Routing\n\nNext.js does not ship a routes manifest with every possible route in the application, so the current page is not aware of any other pages on the client side. All subsequent routes get lazy-loaded, for scalability sake.\n\n#### With `<Link>`\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"/examples/hello-world\">Hello World</a></li>\n  </ul>\n</details>\n\nClient-side transitions between routes can be enabled via a `<Link>` component.\n\n> This component is not required for navigations to static pages that require a hard refresh, like when using [AMP](#amp-support).\n\n**Basic Example**\n\nConsider these two pages:\n\n```jsx\n// pages/index.js\nimport Link from 'next/link'\n\nfunction Home() {\n  return (\n    <>\n      <ul>\n        <li>Home</li>\n        <li>\n          <Link href=\"/about\">\n            <a>About Us</a>\n          </Link>\n        </li>\n      </ul>\n\n      <h1>This is our homepage.</h1>\n    </>\n  )\n}\n\nexport default Home\n```\n\n```jsx\n// pages/about.js\nimport Link from 'next/link'\n\nfunction About() {\n  return (\n    <>\n      <ul>\n        <li>\n          <Link href=\"/\">\n            <a>Home</a>\n          </Link>\n        </li>\n        <li>About Us</li>\n      </ul>\n\n      <h1>About</h1>\n      <p>We are a cool company.</p>\n    </>\n  )\n}\n\nexport default About\n```\n\nNote: if passing a functional component as a child of `<Link>` you will need to wrap it in [`React.forwardRef`](https://reactjs.org/docs/react-api.html#reactforwardref)\n\n**Example with `React.forwardRef`**\n\n```jsx\nimport React from 'react'\nimport Link from 'next/link'\n\n// `onClick`, `href`, and `ref` need to be passed to the DOM element\n// for proper handling\nconst MyButton = React.forwardRef(({ onClick, href }, ref) => (\n  <a href={href} onClick={onClick} ref={ref}>\n    Click Me\n  </a>\n))\n\nexport default () => (\n  <>\n    <Link href=\"/another\">\n      <MyButton />\n    </Link>\n  </>\n)\n```\n\n**Custom routes (using props from URL)**\n\nIf you find that your use case is not covered by [Dynamic Routing](#dynamic-routing) then you can create a custom server and manually add dynamic routes.\n\nExample:\n\n1. Consider you have the URL `/post/:slug`.\n\n2. You created `pages/post.js`:\n\n   ```jsx\n   import { useRouter } from 'next/router'\n\n   const Post = () => {\n     const router = useRouter()\n     const { slug } = router.query\n\n     return <p>My Blog Post: {slug}</p>\n   }\n\n   export default Post\n   ```\n\n3. You add the route to `express` (or any other server) on `server.js` file (this is only for SSR). This will route the url `/post/:slug` to `pages/post.js` and provide `slug` as part of the `query` object to the page.\n\n   ```jsx\n   server.get('/post/:slug', (req, res) => {\n     return app.render(req, res, '/post', { slug: req.params.slug })\n   })\n   ```\n\n4. For client side routing, use `next/link`:\n\n   ```jsx\n   <Link href=\"/post?slug=something\" as=\"/post/something\">\n   ```\n\n   - `href`: the path inside `pages` directory\n   - `as`: the path used by your server routes\n\nClient-side routing behaves exactly like the browser:\n\n1. The component is fetched.\n2. If it defines `getInitialProps`, data is fetched. If an error occurs, `_error.js` is rendered.\n3. After 1 and 2 complete, `pushState` is performed and the new component is rendered.\n\nTo inject the `pathname`, `query` or `asPath` in your component, you can use the [useRouter](#userouter) hook, or [withRouter](#using-a-higher-order-component) for class components.\n\n##### With URL object\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"/examples/with-url-object-routing\">With URL Object Routing</a></li>\n  </ul>\n</details>\n\nThe component `<Link>` can also receive a URL object and it will automatically format it to create the URL string.\n\n```jsx\n// pages/index.js\nimport Link from 'next/link'\n\nfunction Home() {\n  return (\n    <div>\n      Click{' '}\n      <Link href={{ pathname: '/about', query: { name: 'Zeit' } }}>\n        <a>here</a>\n      </Link>{' '}\n      to read more\n    </div>\n  )\n}\n\nexport default Home\n```\n\nThat will generate the URL string `/about?name=Zeit`, you can use every property as defined in the [Node.js URL module documentation](https://nodejs.org/api/url.html#url_url_strings_and_url_objects).\n\n##### Replace instead of push url\n\nThe default behaviour for the `<Link>` component is to `push` a new url into the stack. You can use the `replace` prop to prevent adding a new entry.\n\n```jsx\n// pages/index.js\nimport Link from 'next/link'\n\nfunction Home() {\n  return (\n    <div>\n      Click{' '}\n      <Link href=\"/about\" replace>\n        <a>here</a>\n      </Link>{' '}\n      to read more\n    </div>\n  )\n}\n\nexport default Home\n```\n\n##### Using a component that supports `onClick`\n\n`<Link>` supports any component that supports the `onClick` event. In case you don't provide an `<a>` tag, it will only add the `onClick` event handler and won't pass the `href` property.\n\n```jsx\n// pages/index.js\nimport Link from 'next/link'\n\nfunction Home() {\n  return (\n    <div>\n      Click{' '}\n      <Link href=\"/about\">\n        <img src=\"/static/image.png\" alt=\"image\" />\n      </Link>\n    </div>\n  )\n}\n\nexport default Home\n```\n\n##### Forcing the Link to expose `href` to its child\n\nIf child is an `<a>` tag and doesn't have a href attribute we specify it so that the repetition is not needed by the user. However, sometimes, you’ll want to pass an `<a>` tag inside of a wrapper and the `Link` won’t recognize it as a _hyperlink_, and, consequently, won’t transfer its `href` to the child. In cases like that, you should define a boolean `passHref` property to the `Link`, forcing it to expose its `href` property to the child.\n\n**Please note**: using a tag other than `a` and failing to pass `passHref` may result in links that appear to navigate correctly, but, when being crawled by search engines, will not be recognized as links (owing to the lack of `href` attribute). This may result in negative effects on your site’s SEO.\n\n```jsx\nimport Link from 'next/link'\nimport Unexpected_A from 'third-library'\n\nfunction NavLink({ href, name }) {\n  return (\n    <Link href={href} passHref>\n      <Unexpected_A>{name}</Unexpected_A>\n    </Link>\n  )\n}\n\nexport default NavLink\n```\n\n##### Disabling the scroll changes to top on page\n\nThe default behaviour of `<Link>` is to scroll to the top of the page. When there is a hash defined it will scroll to the specific id, just like a normal `<a>` tag. To prevent scrolling to the top / hash `scroll={false}` can be added to `<Link>`:\n\n```jsx\n<Link scroll={false} href=\"/?counter=10\"><a>Disables scrolling</a></Link>\n<Link href=\"/?counter=10\"><a>Changes with scrolling to top</a></Link>\n```\n\n#### Imperatively\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"/examples/using-router\">Basic routing</a></li>\n    <li><a href=\"/examples/with-loading\">With a page loading indicator</a></li>\n  </ul>\n</details>\n\nYou can also do client-side page transitions using `next/router`:\n\n```jsx\nimport Router from 'next/router'\n\nfunction ReadMore() {\n  return (\n    <div>\n      Click <span onClick={() => Router.push('/about')}>here</span> to read more\n    </div>\n  )\n}\n\nexport default ReadMore\n```\n\n#### Intercepting `popstate`\n\nIn some cases (for example, if using a [custom router](#custom-server-and-routing)), you may wish\nto listen to [`popstate`](https://developer.mozilla.org/en-US/docs/Web/Events/popstate) and react before the router acts on it.\nFor example, you could use this to manipulate the request, or force an SSR refresh.\n\n```jsx\nimport Router from 'next/router'\n\nRouter.beforePopState(({ url, as, options }) => {\n  // I only want to allow these two routes!\n  if (as !== '/' && as !== '/other') {\n    // Have SSR render bad routes as a 404.\n    window.location.href = as\n    return false\n  }\n\n  return true\n})\n```\n\nIf the function you pass into `beforePopState` returns `false`, `Router` will not handle `popstate`;\nyou'll be responsible for handling it, in that case.\nSee [Disabling File-System Routing](#disabling-file-system-routing).\n\nAbove `Router` object comes with the following API:\n\n- `route` - `String` of the current route\n- `pathname` - `String` of the current path excluding the query string\n- `query` - `Object` with the parsed query string. Defaults to `{}`.\n- `asPath` - `String` of the actual path (including the query) shows in the browser\n- `push(url, as=url)` - performs a `pushState` call with the given url\n- `replace(url, as=url)` - performs a `replaceState` call with the given url\n- `beforePopState(cb=function)` - intercept popstate before router processes the event\n\nThe second `as` parameter for `push` and `replace` is an optional _decoration_ of the URL. Useful if you configured custom routes on the server.\n\n##### With URL object\n\nYou can use a URL object the same way you use it in a `<Link>` component to `push` and `replace` a URL.\n\n```jsx\nimport Router from 'next/router'\n\nconst handler = () => {\n  Router.push({\n    pathname: '/about',\n    query: { name: 'Zeit' },\n  })\n}\n\nfunction ReadMore() {\n  return (\n    <div>\n      Click <span onClick={handler}>here</span> to read more\n    </div>\n  )\n}\n\nexport default ReadMore\n```\n\nThis uses the same exact parameters as [in the `<Link>` component](#with-url-object). The first parameter maps to `href` while the second parameter maps to `as` in the `<Link>` component as documented [here](#with-url-object).\n\n##### Router Events\n\nYou can also listen to different events happening inside the Router.\nHere's a list of supported events:\n\n- `routeChangeStart(url)` - Fires when a route starts to change\n- `routeChangeComplete(url)` - Fires when a route changed completely\n- `routeChangeError(err, url)` - Fires when there's an error when changing routes, or a route load is cancelled\n- `beforeHistoryChange(url)` - Fires just before changing the browser's history\n- `hashChangeStart(url)` - Fires when the hash will change but not the page\n- `hashChangeComplete(url)` - Fires when the hash has changed but not the page\n\n> Here `url` is the URL shown in the browser. If you call `Router.push(url, as)` (or similar), then the value of `url` will be `as`.\n\nHere's how to properly listen to the router event `routeChangeStart`:\n\n```js\nconst handleRouteChange = url => {\n  console.log('App is changing to: ', url)\n}\n\nRouter.events.on('routeChangeStart', handleRouteChange)\n```\n\nIf you no longer want to listen to that event, you can unsubscribe with the `off` method:\n\n```js\nRouter.events.off('routeChangeStart', handleRouteChange)\n```\n\nIf a route load is cancelled (for example by clicking two links rapidly in succession), `routeChangeError` will fire. The passed `err` will contain a `cancelled` property set to `true`.\n\n```js\nRouter.events.on('routeChangeError', (err, url) => {\n  if (err.cancelled) {\n    console.log(`Route to ${url} was cancelled!`)\n  }\n})\n```\n\n> **Note**: Using router events in `getInitialProps` is discouraged as it may result in unexpected behavior.<br/>\n> Router events should be registered when a component mounts (`useEffect` or `componentDidMount`/`componentWillUnmount`) or imperatively when an event happens.\n>\n> ```js\n> useEffect(() => {\n>   const handleRouteChange = url => {\n>     console.log('App is changing to: ', url)\n>   }\n>\n>   Router.events.on('routeChangeStart', handleRouteChange)\n>   return () => {\n>     Router.events.off('routeChangeStart', handleRouteChange)\n>   }\n> }, [])\n> ```\n\n##### Shallow Routing\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"/examples/with-shallow-routing\">Shallow Routing</a></li>\n  </ul>\n</details>\n\nShallow routing allows you to change the URL without running `getInitialProps`. You'll receive the updated `pathname` and the `query` via the `router` prop (injected by using [`useRouter`](#userouter) or [`withRouter`](#using-a-higher-order-component)), without losing state.\n\nYou can do this by invoking either `Router.push` or `Router.replace` with the `shallow: true` option. Here's an example:\n\n```js\n// Current URL is \"/\"\nconst href = '/?counter=10'\nconst as = href\nRouter.push(href, as, { shallow: true })\n```\n\nNow, the URL is updated to `/?counter=10`. You can see the updated URL with `this.props.router.query` inside the `Component` (make sure you are using [`withRouter`](#using-a-higher-order-component) around your `Component` to inject the `router` prop).\n\nYou can watch for URL changes via [`componentDidUpdate`](https://reactjs.org/docs/react-component.html#componentdidupdate) hook as shown below:\n\n```js\ncomponentDidUpdate(prevProps) {\n  const { pathname, query } = this.props.router\n  // verify props have changed to avoid an infinite loop\n  if (query.id !== prevProps.router.query.id) {\n    // fetch data based on the new query\n  }\n}\n```\n\n> NOTES:\n>\n> Shallow routing works **only** for same page URL changes. For an example, let's assume we have another page called `about`, and you run this:\n>\n> ```js\n> Router.push('/?counter=10', '/about?counter=10', { shallow: true })\n> ```\n>\n> Since that's a new page, it'll unload the current page, load the new one and call `getInitialProps` even though we asked to do shallow routing.\n\n#### useRouter\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"/examples/dynamic-routing\">Dynamic routing</a></li>\n  </ul>\n</details>\n\nIf you want to access the `router` object inside any functional component in your app, you can use the `useRouter` hook, here's how to use it:\n\n```jsx\nimport { useRouter } from 'next/router'\n\nexport default function ActiveLink({ children, href }) {\n  const router = useRouter()\n  const style = {\n    marginRight: 10,\n    color: router.pathname === href ? 'red' : 'black',\n  }\n\n  const handleClick = e => {\n    e.preventDefault()\n    router.push(href)\n  }\n\n  return (\n    <a href={href} onClick={handleClick} style={style}>\n      {children}\n    </a>\n  )\n}\n```\n\n> **Note**: `useRouter` is a React hook, meaning it cannot be used with classes.\n> You can either use [`withRouter`](#using-a-higher-order-component) (a higher order component) or wrap your class in a functional component.\n\nThe above `router` object comes with an API similar to [`next/router`](#imperatively).\n\n#### Using a Higher Order Component\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"/examples/using-with-router\">Using the `withRouter` utility</a></li>\n  </ul>\n</details>\n\nIf [useRouter](#userouter) is not the best fit for you, `withRouter` can also add the same `router` object to any component, here's how to use it:\n\n```jsx\nimport { withRouter } from 'next/router'\n\nfunction Page({ router }) {\n  return <p>{router.pathname}</p>\n}\n\nexport default withRouter(Page)\n```\n\n### Prefetching Pages\n\n⚠️ This is a production only feature ⚠️\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"/examples/with-prefetching\">Prefetching</a></li>\n  </ul>\n</details>\n\nNext.js has an API which allows you to prefetch pages.\n\nSince Next.js server-renders your pages, this allows all the future interaction paths of your app to be instant. Effectively Next.js gives you the great initial download performance of a _website_, with the ahead-of-time download capabilities of an _app_. [Read more](https://zeit.co/blog/next#anticipation-is-the-key-to-performance).\n\n> With prefetching Next.js only downloads JS code. When the page is getting rendered, you may need to wait for the data.\n\n> Automatic prefetching is disabled if your device is connected with 2G network or [Save-Data](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Save-Data) header is `on`.\n\n> `<link rel=\"preload\">` is used for prefetching. Sometimes browsers will show a warning if the resource is not used within 3 seconds, these warnings can be ignored as per https://github.com/zeit/next.js/issues/6517#issuecomment-469063892.\n\n#### With `<Link>`\n\n`<Link>` will automatically prefetch pages in the background as they appear in the view. If certain pages are rarely visited you can manually set `prefetch` to `false`, here's how:\n\n```jsx\n<Link href=\"/about\" prefetch={false}>\n  <a>About</a>\n</Link>\n```\n\n#### Imperatively\n\nMost prefetching needs are addressed by `<Link />`, but we also expose an imperative API for advanced usage:\n\n```jsx\nimport { useRouter } from 'next/router'\n\nexport default function MyLink() {\n  const router = useRouter()\n\n  return (\n    <>\n      <a onClick={() => setTimeout(() => router.push('/dynamic'), 100)}>\n        A route transition will happen after 100ms\n      </a>\n      {// and we can prefetch it!\n      router.prefetch('/dynamic')}\n    </>\n  )\n}\n```\n\n`router` methods should be only used inside the client side of your app though. In order to prevent any error regarding this subject use the imperative `prefetch` method in the `useEffect()` hook:\n\n```jsx\nimport { useRouter } from 'next/router'\n\nexport default function MyLink() {\n  const router = useRouter()\n\n  useEffect(() => {\n    router.prefetch('/dynamic')\n  })\n\n  return (\n    <a onClick={() => setTimeout(() => router.push('/dynamic'), 100)}>\n      A route transition will happen after 100ms\n    </a>\n  )\n}\n```\n\nYou can also add it to the `componentDidMount()` lifecycle method when using `React.Component`:\n\n```jsx\nimport React from 'react'\nimport { withRouter } from 'next/router'\n\nclass MyLink extends React.Component {\n  componentDidMount() {\n    const { router } = this.props\n    router.prefetch('/dynamic')\n  }\n\n  render() {\n    const { router } = this.props\n\n    return (\n      <a onClick={() => setTimeout(() => router.push('/dynamic'), 100)}>\n        A route transition will happen after 100ms\n      </a>\n    )\n  }\n}\n\nexport default withRouter(MyLink)\n```\n\n### API Routes\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"/examples/api-routes\">Basic API routes</a></li>\n    <li><a href=\"/examples/api-routes-micro\">API routes with micro</a></li>\n    <li><a href=\"/examples/api-routes-middleware\">API routes with middleware</a></li>\n    <li><a href=\"/examples/api-routes-graphql\">API routes with GraphQL server</a></li>\n    <li><a href=\"/examples/api-routes-rest\">API routes with REST</a></li>\n  </ul>\n</details>\n\nAPI routes provide a straightforward solution to build your **API** with Next.js.\nStart by creating the `api/` folder inside the `./pages/` folder.\n\nEvery file inside `./pages/api` is mapped to `/api/*`.\nFor example, `./pages/api/posts.js` is mapped to the route `/api/posts`.\n\nHere's an example API route file:\n\n```js\nexport default (req, res) => {\n  res.setHeader('Content-Type', 'application/json')\n  res.statusCode = 200\n  res.end(JSON.stringify({ name: 'Nextjs' }))\n}\n```\n\n- `req` refers to [NextApiRequest](https://github.com/zeit/next.js/blob/v9.0.0/packages/next-server/lib/utils.ts#L143-L158) which extends [http.IncomingMessage](https://nodejs.org/api/http.html#http_class_http_incomingmessage)\n\n- `res` refers to [NextApiResponse](https://github.com/zeit/next.js/blob/v9.0.0/packages/next-server/lib/utils.ts#L168-L178) which extends [http.ServerResponse](https://nodejs.org/api/http.html#http_class_http_serverresponse)\n\nFor [API routes](#api-routes) there are built-in types `NextApiRequest` and `NextApiResponse`, which extend the `Node.js` request and response objects.\n\n```ts\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport default (req: NextApiRequest, res: NextApiResponse) => {\n  res.status(200).json({ title: 'Next.js' })\n}\n```\n\nTo handle different HTTP methods for API calls you can access `req.method` in your resolver function:\n\n```js\nexport default (req, res) => {\n  if (req.method === 'POST') {\n    // Process your POST request\n  } else {\n    // Handle the rest of your HTTP methods\n  }\n}\n```\n\n> **Note**: API Routes [do not specify CORS headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS), so they'll be **same-origin only** by default.\n> You can customize this behavior by wrapping your export with CORS middleware.\n> We provide an [example of this below](#api-middlewares).\n\nAPI Routes do not increase your client-side bundle size. They are server-side only bundles.\n\n#### Dynamic routes support\n\nAPI pages support [dynamic routing](#dynamic-routing), so you can use all benefits mentioned already above.\n\nConsider the following page `./pages/api/post/[pid].js`, here is how you get parameters inside the resolver method:\n\n```js\nexport default (req, res) => {\n  const {\n    query: { pid },\n  } = req\n\n  res.end(`Post: ${pid}`)\n}\n```\n\n#### API Middlewares\n\nAPI routes provides built in middlewares which parse the incoming `req`.\nThose middlewares are:\n\n- `req.cookies` - an object containing the cookies sent by the request. Defaults to `{}`\n- `req.query` - an object containing the [query string](https://en.wikipedia.org/wiki/Query_string). Defaults to `{}`\n- `req.body` - an object containing the body parsed by `content-type`, or `null` if no body is sent\n\nBody parsing is enabled by default with a size limit of `1mb` for the parsed body.\nYou can opt-out of automatic body parsing if you need to consume it as a `Stream`:\n\n```js\n// ./pages/api/my-endpoint.js\nexport default (req, res) => {\n  // ...\n}\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n}\n```\n\nYou can adjust size of parsed body by adding `sizeLimit` key to `bodyParser`, supported values are by [bytes](https://github.com/visionmedia/bytes.js) library.\n\n```js\n// ./pages/api/my-endpoint.js\nexport default (req, res) => {\n  // ...\n}\n\nexport const config = {\n  api: {\n    bodyParser: {\n      sizeLimit: '1mb',\n    },\n  },\n}\n```\n\nAs an added bonus, you can also use any [Micro](https://github.com/zeit/micro) compatible [middleware](https://github.com/amio/awesome-micro)!\n\nFor example, [configuring CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) for your API endpoint can be done leveraging `micro-cors`.\n\nFirst, install `micro-cors`:\n\n```bash\nnpm i micro-cors\n# or\nyarn add micro-cors\n```\n\nThen, import `micro-cors` and [configure it](https://github.com/possibilities/micro-cors#readme). Finally, wrap your exported function in the middleware:\n\n```js\nimport Cors from 'micro-cors'\n\nconst cors = Cors({\n  allowMethods: ['GET', 'HEAD'],\n})\n\nfunction Endpoint(req, res) {\n  res.json({ message: 'Hello Everyone!' })\n}\n\nexport default cors(Endpoint)\n```\n\n#### Helper Functions\n\nWe're providing a set of Express.js-like methods to improve the developer experience and increase the speed of creating new API endpoints:\n\n```js\nexport default (req, res) => {\n  res.status(200).json({ name: 'Next.js' })\n}\n```\n\n- `res.status(code)` - a function to set the status code. `code` must be a valid [HTTP status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)\n- `res.json(json)` - Sends a `JSON` response. `json` must be a valid `JSON` object\n- `res.send(body)` - Sends the HTTP response. `body` can be a `string`, an `object` or a `Buffer`\n\n### Custom server and routing\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"/examples/custom-server\">Basic custom server</a></li>\n    <li><a href=\"/examples/custom-server-express\">Express integration</a></li>\n    <li><a href=\"/examples/custom-server-hapi\">Hapi integration</a></li>\n    <li><a href=\"/examples/custom-server-koa\">Koa integration</a></li>\n    <li><a href=\"/examples/ssr-caching\">SSR caching</a></li>\n  </ul>\n</details>\n\nTypically you start your next server with `next start`. It's possible, however, to start a server 100% programmatically in order to customize routes, use route patterns, etc.\n\nWhen using a custom server with a server file, for example called `server.js`, make sure you update the scripts key in `package.json` to:\n\n```json\n{\n  \"scripts\": {\n    \"dev\": \"node server.js\",\n    \"build\": \"next build\",\n    \"start\": \"NODE_ENV=production node server.js\"\n  }\n}\n```\n\nThis example makes `/a` resolve to `./pages/b`, and `/b` resolve to `./pages/a`:\n\n```js\n// This file doesn't go through babel or webpack transformation.\n// Make sure the syntax and sources this file requires are compatible with the current node version you are running\n// See https://github.com/zeit/next.js/issues/1245 for discussions on Universal Webpack or universal Babel\nconst { createServer } = require('http')\nconst { parse } = require('url')\nconst next = require('next')\n\nconst dev = process.env.NODE_ENV !== 'production'\nconst app = next({ dev })\nconst handle = app.getRequestHandler()\n\napp.prepare().then(() => {\n  createServer((req, res) => {\n    // Be sure to pass `true` as the second argument to `url.parse`.\n    // This tells it to parse the query portion of the URL.\n    const parsedUrl = parse(req.url, true)\n    const { pathname, query } = parsedUrl\n\n    if (pathname === '/a') {\n      app.render(req, res, '/b', query)\n    } else if (pathname === '/b') {\n      app.render(req, res, '/a', query)\n    } else {\n      handle(req, res, parsedUrl)\n    }\n  }).listen(3000, err => {\n    if (err) throw err\n    console.log('> Ready on http://localhost:3000')\n  })\n})\n```\n\nThe `next` API is as follows:\n\n- `next(opts: object)`\n\nSupported options:\n\n- `dev` (`bool`) whether to launch Next.js in dev mode - default `false`\n- `dir` (`string`) where the Next project is located - default `'.'`\n- `quiet` (`bool`) Hide error messages containing server information - default `false`\n- `conf` (`object`) the same object you would use in `next.config.js` - default `{}`\n\nThen, change your `start` script to `NODE_ENV=production node server.js`.\n\n#### Disabling file-system routing\n\nBy default, `Next` will serve each file in `/pages` under a pathname matching the filename (eg, `/pages/some-file.js` is served at `site.com/some-file`.\n\nIf your project uses custom routing, this behavior may result in the same content being served from multiple paths, which can present problems with SEO and UX.\n\nTo disable this behavior & prevent routing based on files in `/pages`, simply set the following option in your `next.config.js`:\n\n```js\n// next.config.js\nmodule.exports = {\n  useFileSystemPublicRoutes: false,\n}\n```\n\nNote that `useFileSystemPublicRoutes` simply disables filename routes from SSR; client-side routing may still access those paths. If using this option, you should guard against navigation to routes you do not want programmatically.\n\nYou may also wish to configure the client-side Router to disallow client-side redirects to filename routes; please refer to [Intercepting `popstate`](#intercepting-popstate).\n\n#### Dynamic assetPrefix\n\nSometimes we need to set the `assetPrefix` dynamically. This is useful when changing the `assetPrefix` based on incoming requests.\nFor that, we can use `app.setAssetPrefix`.\n\nHere's an example usage of it:\n\n```js\nconst next = require('next')\nconst http = require('http')\n\nconst dev = process.env.NODE_ENV !== 'production'\nconst app = next({ dev })\nconst handleNextRequests = app.getRequestHandler()\n\napp.prepare().then(() => {\n  const server = new http.Server((req, res) => {\n    // Add assetPrefix support based on the hostname\n    if (req.headers.host === 'my-app.com') {\n      app.setAssetPrefix('http://cdn.com/myapp')\n    } else {\n      app.setAssetPrefix('')\n    }\n\n    handleNextRequests(req, res)\n  })\n\n  server.listen(port, err => {\n    if (err) {\n      throw err\n    }\n\n    console.log(`> Ready on http://localhost:${port}`)\n  })\n})\n```\n\n#### Changing x-powered-by\n\nBy default Next.js will add `x-powered-by` to the request headers. There's an optional way to opt-out of this:\n\n```js\n// next.config.js\nmodule.exports = {\n  poweredByHeader: false,\n}\n```\n\n### Dynamic Import\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"/examples/with-dynamic-import\">With Dynamic Import</a></li>\n  </ul>\n</details>\n\nNext.js supports ES2020 [dynamic `import()`](https://github.com/tc39/proposal-dynamic-import) for JavaScript.\nWith that, you could import JavaScript modules (inc. React Components) dynamically and work with them.\n\nYou can think dynamic imports as another way to split your code into manageable chunks.\nSince Next.js supports dynamic imports with SSR, you could do amazing things with it.\n\nHere are a few ways to use dynamic imports.\n\n#### Basic Usage (Also does SSR)\n\n```jsx\nimport dynamic from 'next/dynamic'\n\nconst DynamicComponent = dynamic(() => import('../components/hello'))\n\nfunction Home() {\n  return (\n    <div>\n      <Header />\n      <DynamicComponent />\n      <p>HOME PAGE is here!</p>\n    </div>\n  )\n}\n\nexport default Home\n```\n\n#### With named exports\n\n```jsx\n// components/hello.js\nexport function Hello() {\n  return <p>Hello!</p>\n}\n```\n\n```jsx\nimport dynamic from 'next/dynamic'\n\nconst DynamicComponent = dynamic(() =>\n  import('../components/hello').then(mod => mod.Hello)\n)\n\nfunction Home() {\n  return (\n    <div>\n      <Header />\n      <DynamicComponent />\n      <p>HOME PAGE is here!</p>\n    </div>\n  )\n}\n\nexport default Home\n```\n\n#### With Custom Loading Component\n\n```jsx\nimport dynamic from 'next/dynamic'\n\nconst DynamicComponentWithCustomLoading = dynamic(\n  () => import('../components/hello2'),\n  { loading: () => <p>...</p> }\n)\n\nfunction Home() {\n  return (\n    <div>\n      <Header />\n      <DynamicComponentWithCustomLoading />\n      <p>HOME PAGE is here!</p>\n    </div>\n  )\n}\n\nexport default Home\n```\n\n#### With No SSR\n\n```jsx\nimport dynamic from 'next/dynamic'\n\nconst DynamicComponentWithNoSSR = dynamic(\n  () => import('../components/hello3'),\n  { ssr: false }\n)\n\nfunction Home() {\n  return (\n    <div>\n      <Header />\n      <DynamicComponentWithNoSSR />\n      <p>HOME PAGE is here!</p>\n    </div>\n  )\n}\n\nexport default Home\n```\n\n### Custom `<App>`\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"/examples/with-app-layout\">Using `_app.js` for layout</a></li>\n    <li><a href=\"/examples/with-componentdidcatch\">Using `_app.js` to override `componentDidCatch`</a></li>\n  </ul>\n</details>\n\nNext.js uses the `App` component to initialize pages. You can override it and control the page initialization. Which allows you to do amazing things like:\n\n- Persisting layout between page changes\n- Keeping state when navigating pages\n- Inject additional data into pages (for example by processing GraphQL queries)\n\nTo override, create the `./pages/_app.js` file and override the App class as shown below:\n\n```js\nfunction MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\nexport default MyApp\n```\n\n> **Note:** Adding a custom `getInitialProps` in App will affect [Automatic Static Optimization](#automatic-static-optimization)\n\n### Custom `<Document>`\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"/examples/with-styled-components\">Styled components custom document</a></li>\n  </ul>\n</details>\n\nA custom `<Document>` is commonly used to augment your application's `<html>` and `<body>` tags.\nThis is necessary because Next.js pages skip the definition of the surrounding document's markup.\n\nThis allows you to support Server-Side Rendering for CSS-in-JS libraries like\n[styled-components](/examples/with-styled-components) or [emotion](/examples/with-emotion).\nNote, [styled-jsx](https://github.com/zeit/styled-jsx) is included in Next.js by default.\n\nA custom `<Document>` can also include `getInitialProps` for expressing asynchronous server-rendering data requirements.\n\n> **Note**: `<Document>`'s `getInitialProps` function is not called during client-side transitions,\n> nor when a page is [automatically statically optimized](#automatic-static-optimization).\n\n> **Note**: Make sure to check if `ctx.req` / `ctx.res` are defined in `getInitialProps`.\n> These variables will be `undefined` when a page is being statically exported for `next export` or [automatic static optimization](#automatic-static-optimization).\n\nTo use a custom `<Document>`, you must create a file at `./pages/_document.js` and extend the `Document` class:\n\n```jsx\n// _document is only rendered on the server side and not on the client side\n// Event handlers like onClick can't be added to this file\n\n// ./pages/_document.js\nimport Document, { Html, Head, Main, NextScript } from 'next/document'\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    const initialProps = await Document.getInitialProps(ctx)\n    return { ...initialProps }\n  }\n\n  render() {\n    return (\n      <Html>\n        <Head />\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n\nexport default MyDocument\n```\n\nAll of `<Html>`, `<Head />`, `<Main />` and `<NextScript />` are required for page to be properly rendered.\n\n**Note: React-components outside of `<Main />` will not be initialised by the browser. Do _not_ add application logic here. If you need shared components in all your pages (like a menu or a toolbar), take a look at the [`<App>`](#custom-app) component instead.**\n\nThe `ctx` object is equivalent to the one received in all [`getInitialProps`](#fetching-data-and-component-lifecycle) hooks, with one addition:\n\n- `renderPage` (`Function`) a callback that executes the actual React rendering logic (synchronously). It's useful to decorate this function in order to support server-rendering wrappers like Aphrodite's [`renderStatic`](https://github.com/Khan/aphrodite#server-side-rendering).\n\n#### Customizing `renderPage`\n\n\uD83D\uDEA7 It should be noted that the only reason you should be customizing `renderPage` is for usage with css-in-js libraries\nthat need to wrap the application to properly work with server-rendering. \uD83D\uDEA7\n\n- It takes as argument an options object for further customization:\n\n```js\nimport Document from 'next/document'\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    const originalRenderPage = ctx.renderPage\n\n    ctx.renderPage = () =>\n      originalRenderPage({\n        // useful for wrapping the whole react tree\n        enhanceApp: App => App,\n        // useful for wrapping in a per-page basis\n        enhanceComponent: Component => Component,\n      })\n\n    // Run the parent `getInitialProps` using `ctx` that now includes our custom `renderPage`\n    const initialProps = await Document.getInitialProps(ctx)\n\n    return initialProps\n  }\n}\n\nexport default MyDocument\n```\n\n### Custom error handling\n\n404 or 500 errors are handled both client and server side by a default component `error.js`. If you wish to override it, define a `_error.js` in the pages folder:\n\n⚠️ The `pages/_error.js` component is only used in production. In development you get an error with call stack to know where the error originated from. ⚠️\n\n```jsx\nimport React from 'react'\n\nfunction Error({ statusCode }) {\n  return (\n    <p>\n      {statusCode\n        ? `An error ${statusCode} occurred on server`\n        : 'An error occurred on client'}\n    </p>\n  )\n}\n\nError.getInitialProps = ({ res, err }) => {\n  const statusCode = res ? res.statusCode : err ? err.statusCode : 404\n  return { statusCode }\n}\n\nexport default Error\n```\n\n### Reusing the built-in error page\n\nIf you want to render the built-in error page you can by using `next/error`:\n\n```jsx\nimport React from 'react'\nimport Error from 'next/error'\nimport fetch from 'isomorphic-unfetch'\n\nconst Page = ({ errorCode, stars }) => {\n  if (errorCode) {\n    return <Error statusCode={errorCode} />\n  }\n\n  return <div>Next stars: {stars}</div>\n}\n\nPage.getInitialProps = async () => {\n  const res = await fetch('https://api.github.com/repos/zeit/next.js')\n  const errorCode = res.statusCode > 200 ? res.statusCode : false\n  const json = await res.json()\n\n  return { errorCode, stars: json.stargazers_count }\n}\n\nexport default Page\n```\n\n> If you have created a custom error page you have to import your own `_error` component from `./_error` instead of `next/error`.\n\nThe Error component also takes `title` as a property if you want to pass in a text message along with a `statusCode`.\n\n### Custom configuration\n\nFor custom advanced behavior of Next.js, you can create a `next.config.js` in the root of your project directory (next to `pages/` and `package.json`).\n\nNote: `next.config.js` is a regular Node.js module, not a JSON file. It gets used by the Next server and build phases, and not included in the browser build.\n\n```js\n// next.config.js\nmodule.exports = {\n  /* config options here */\n}\n```\n\nOr use a function:\n\n```js\nmodule.exports = (phase, { defaultConfig }) => {\n  return {\n    /* config options here */\n  }\n}\n```\n\n`phase` is the current context in which the configuration is loaded. You can see all phases here: [constants](/packages/next/next-server/lib/constants.ts)\nPhases can be imported from `next/constants`:\n\n```js\nconst { PHASE_DEVELOPMENT_SERVER } = require('next/constants')\nmodule.exports = (phase, { defaultConfig }) => {\n  if (phase === PHASE_DEVELOPMENT_SERVER) {\n    return {\n      /* development only config options here */\n    }\n  }\n\n  return {\n    /* config options for all phases except development here */\n  }\n}\n```\n\n#### Setting a custom build directory\n\nYou can specify a name to use for a custom build directory. For example, the following config will create a `build` folder instead of a `.next` folder. If no configuration is specified then next will create a `.next` folder.\n\n```js\n// next.config.js\nmodule.exports = {\n  distDir: 'build',\n}\n```\n\n#### Disabling etag generation\n\nYou can disable etag generation for HTML pages depending on your cache strategy. If no configuration is specified then Next will generate etags for every page.\n\n```js\n// next.config.js\nmodule.exports = {\n  generateEtags: false,\n}\n```\n\n#### Configuring the onDemandEntries\n\nNext exposes some options that give you some control over how the server will dispose or keep in memories pages built:\n\n```js\nmodule.exports = {\n  onDemandEntries: {\n    // period (in ms) where the server will keep pages in the buffer\n    maxInactiveAge: 25 * 1000,\n    // number of pages that should be kept simultaneously without being disposed\n    pagesBufferLength: 2,\n  },\n}\n```\n\nThis is development-only feature. If you want to cache SSR pages in production, please see [SSR-caching](https://github.com/zeit/next.js/tree/canary/examples/ssr-caching) example.\n\n#### Configuring extensions looked for when resolving pages in `pages`\n\nAimed at modules like [`@next/mdx`](https://github.com/zeit/next.js/tree/canary/packages/next-mdx), that add support for pages ending with `.mdx`. `pageExtensions` allows you to configure the extensions looked for in the `pages` directory when resolving pages.\n\n```js\n// next.config.js\nmodule.exports = {\n  pageExtensions: ['mdx', 'jsx', 'js'],\n}\n```\n\n#### Configuring the build ID\n\nNext.js uses a constant generated at build time to identify which version of your application is being served. This can cause problems in multi-server deployments when `next build` is ran on every server. In order to keep a static build id between builds you can provide the `generateBuildId` function:\n\n```js\n// next.config.js\nmodule.exports = {\n  generateBuildId: async () => {\n    // For example get the latest git commit hash here\n    return 'my-build-id'\n  },\n}\n```\n\nTo fall back to the default of generating a unique id return `null` from the function:\n\n```js\nmodule.exports = {\n  generateBuildId: async () => {\n    // When process.env.YOUR_BUILD_ID is undefined we fall back to the default\n    if (process.env.YOUR_BUILD_ID) {\n      return process.env.YOUR_BUILD_ID\n    }\n\n    return null\n  },\n}\n```\n\n#### Configuring next process script\n\nYou can pass any node arguments to `next` CLI command.\n\n```bash\nNODE_OPTIONS=\"--throw-deprecation\" next\nNODE_OPTIONS=\"-r esm\" next\nNODE_OPTIONS=\"--inspect\" next\n```\n\n### Customizing webpack config\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"/examples/with-webpack-bundle-analyzer\">Custom webpack bundle analyzer</a></li>\n  </ul>\n</details>\n\nSome commonly asked for features are available as modules:\n\n- [@zeit/next-css](https://github.com/zeit/next-plugins/tree/master/packages/next-css)\n- [@zeit/next-sass](https://github.com/zeit/next-plugins/tree/master/packages/next-sass)\n- [@zeit/next-less](https://github.com/zeit/next-plugins/tree/master/packages/next-less)\n- [@zeit/next-preact](https://github.com/zeit/next-plugins/tree/master/packages/next-preact)\n- [@next/mdx](https://github.com/zeit/next.js/tree/canary/packages/next-mdx)\n\n> **Warning:** The `webpack` function is executed twice, once for the server and once for the client. This allows you to distinguish between client and server configuration using the `isServer` property.\n\nMultiple configurations can be combined together with function composition. For example:\n\n```js\nconst withMDX = require('@next/mdx')\nconst withSass = require('@zeit/next-sass')\n\nmodule.exports = withMDX(\n  withSass({\n    webpack(config, options) {\n      // Further custom configuration here\n      return config\n    },\n  })\n)\n```\n\nIn order to extend our usage of `webpack`, you can define a function that extends its config via `next.config.js`.\n\n```js\n// next.config.js is not transformed by Babel. So you can only use javascript features supported by your version of Node.js.\n\nmodule.exports = {\n  webpack: (config, { buildId, dev, isServer, defaultLoaders, webpack }) => {\n    // Note: we provide webpack above so you should not `require` it\n    // Perform customizations to webpack config\n    // Important: return the modified config\n\n    // Example using webpack option\n    config.plugins.push(new webpack.IgnorePlugin(/\\/__tests__\\//))\n    return config\n  },\n  webpackDevMiddleware: config => {\n    // Perform customizations to webpack dev middleware config\n    // Important: return the modified config\n    return config\n  },\n}\n```\n\nThe second argument to `webpack` is an object containing properties useful when customizing its configuration:\n\n- `buildId` - `String` the build id used as a unique identifier between builds\n- `dev` - `Boolean` shows if the compilation is done in development mode\n- `isServer` - `Boolean` shows if the resulting configuration will be used for server side (`true`), or client side compilation (`false`)\n- `defaultLoaders` - `Object` Holds loader objects Next.js uses internally, so that you can use them in custom configuration\n  - `babel` - `Object` the `babel-loader` configuration for Next.js\n\nExample usage of `defaultLoaders.babel`:\n\n```js\n// Example next.config.js for adding a loader that depends on babel-loader\n// This source was taken from the @next/mdx plugin source:\n// https://github.com/zeit/next.js/tree/canary/packages/next-mdx\nmodule.exports = {\n  webpack: (config, options) => {\n    config.module.rules.push({\n      test: /\\.mdx/,\n      use: [\n        options.defaultLoaders.babel,\n        {\n          loader: '@mdx-js/loader',\n          options: pluginOptions.options,\n        },\n      ],\n    })\n\n    return config\n  },\n}\n```\n\n### Customizing babel config\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"/examples/with-custom-babel-config\">Custom babel configuration</a></li>\n  </ul>\n</details>\n\nIn order to extend our usage of `babel`, you can simply define a `.babelrc` file at the root of your app. This file is optional.\n\nIf found, we're going to consider it the _source of truth_, therefore it needs to define what next needs as well, which is the `next/babel` preset.\n\nThis is designed so that you are not surprised by modifications we could make to the babel configurations.\n\nHere's an example `.babelrc` file:\n\n```json\n{\n  \"presets\": [\"next/babel\"],\n  \"plugins\": []\n}\n```\n\nThe `next/babel` preset includes everything needed to transpile React applications. This includes:\n\n- preset-env\n- preset-react\n- preset-typescript\n- plugin-proposal-class-properties\n- plugin-proposal-object-rest-spread\n- plugin-transform-runtime\n- styled-jsx\n\nThese presets / plugins **should not** be added to your custom `.babelrc`. Instead, you can configure them on the `next/babel` preset:\n\n```json\n{\n  \"presets\": [\n    [\n      \"next/babel\",\n      {\n        \"preset-env\": {},\n        \"transform-runtime\": {},\n        \"styled-jsx\": {},\n        \"class-properties\": {}\n      }\n    ]\n  ],\n  \"plugins\": []\n}\n```\n\nThe `modules` option on `\"preset-env\"` should be kept to `false` otherwise webpack code splitting is disabled.\n\n### Exposing configuration to the server / client side\n\nThere is a common need in applications to provide configuration values.\n\nNext.js supports 2 ways of providing configuration:\n\n- Build-time configuration\n- Runtime configuration\n\n#### Build-time configuration\n\nThe way build-time configuration works is by inlining the provided values into the Javascript bundle.\n\nYou can add the `env` key in `next.config.js`:\n\n```js\n// next.config.js\nmodule.exports = {\n  env: {\n    customKey: 'value',\n  },\n}\n```\n\nThis will allow you to use `process.env.customKey` in your code. For example:\n\n```jsx\n// pages/index.js\nfunction Index() {\n  return <h1>The value of customKey is: {process.env.customKey}</h1>\n}\n\nexport default Index\n```\n\n> **Warning:** Note that it is not possible to destructure process.env variables due to the webpack `DefinePlugin` replacing process.env.XXXX inline at build time.\n\n```js\n// Will not work\nconst { CUSTOM_KEY, CUSTOM_SECRET } = process.env\nAuthMethod({ key: CUSTOM_KEY, secret: CUSTOM_SECRET })\n\n// Will work as replaced inline\nAuthMethod({ key: process.env.CUSTOM_KEY, secret: process.env.CUSTOM_SECRET })\n```\n\n#### Runtime configuration\n\n> **Warning:** Note that these options are not available when using `target: 'serverless'`\n\n> **Warning:** Generally you want to use build-time configuration to provide your configuration.\n> The reason for this is that runtime configuration adds rendering / initialization overhead and is **incompatible with [automatic static optimization](#automatic-static-optimization)**.\n\nThe `next/config` module gives your app access to the `publicRuntimeConfig` and `serverRuntimeConfig` stored in your `next.config.js`.\n\nPlace any server-only runtime config under a `serverRuntimeConfig` property.\n\nAnything accessible to both client and server-side code should be under `publicRuntimeConfig`.\n\n> **Note**: A page that relies on `publicRuntimeConfig` **must** use `getInitialProps` to opt-out of [automatic static optimization](#automatic-static-optimization).\n> You can also de-optimize your entire application by creating a [Custom `<App>`](#custom-app) with `getInitialProps`.\n\n```js\n// next.config.js\nmodule.exports = {\n  serverRuntimeConfig: {\n    // Will only be available on the server side\n    mySecret: 'secret',\n    secondSecret: process.env.SECOND_SECRET, // Pass through env variables\n  },\n  publicRuntimeConfig: {\n    // Will be available on both server and client\n    staticFolder: '/static',\n  },\n}\n```\n\n```js\n// pages/index.js\nimport getConfig from 'next/config'\n// Only holds serverRuntimeConfig and publicRuntimeConfig from next.config.js nothing else.\nconst { serverRuntimeConfig, publicRuntimeConfig } = getConfig()\n\nconsole.log(serverRuntimeConfig.mySecret) // Will only be available on the server side\nconsole.log(publicRuntimeConfig.staticFolder) // Will be available on both server and client\n\nfunction MyImage() {\n  return (\n    <div>\n      <img src={`${publicRuntimeConfig.staticFolder}/logo.png`} alt=\"logo\" />\n    </div>\n  )\n}\n\nexport default MyImage\n```\n\n### Starting the server on alternative hostname\n\nTo start the development server using a different default hostname you can use `--hostname hostname_here` or `-H hostname_here` option with next dev. This will start a TCP server listening for connections on the provided host.\n\n### CDN support with Asset Prefix\n\nTo set up a CDN, you can set up the `assetPrefix` setting and configure your CDN's origin to resolve to the domain that Next.js is hosted on.\n\n```js\nconst isProd = process.env.NODE_ENV === 'production'\nmodule.exports = {\n  // You may only need to add assetPrefix in the production.\n  assetPrefix: isProd ? 'https://cdn.mydomain.com' : '',\n}\n```\n\nNote: Next.js will automatically use that prefix in the scripts it loads, but this has no effect whatsoever on `/static`. If you want to serve those assets over the CDN, you'll have to introduce the prefix yourself. One way of introducing a prefix that works inside your components and varies by environment is documented [in this example](https://github.com/zeit/next.js/tree/master/examples/with-universal-configuration-build-time).\n\nIf your CDN is on a separate domain and you would like assets to be requested using a [CORS aware request](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) you can set a config option for that.\n\n```js\n// next.config.js\nmodule.exports = {\n  crossOrigin: 'anonymous',\n}\n```\n\n## Automatic Static Optimization\n\nNext.js automatically determines that a page is static (can be prerendered) if it has no blocking data requirements.\nThis determination is made by the absence of `getInitialProps` in the page.\n\nIf `getInitialProps` is present, Next.js will not statically optimize the page.\nInstead, Next.js will use its default behavior and render the page on-demand, per-request (meaning Server-Side Rendering).\n\nIf `getInitialProps` is absent, Next.js will **statically optimize** your page automatically by prerendering it to static HTML. During prerendering, the router's `query` object will be empty since we do not have `query` information to provide during this phase. Any `query` values will be populated client side after hydration.\n\nThis feature allows Next.js to emit hybrid applications that contain **both server-rendered and statically generated pages**.\nThis ensures Next.js always emits applications that are **fast by default**.\n\n> **Note**: Statically generated pages are still reactive: Next.js will hydrate your application client-side to give it full interactivity.\n\nThis feature provides many benefits.\nFor example, optimized pages require no server-side computation and can be instantly streamed to the end-user from CDN locations.\n\nThe result is an _ultra fast_ loading experience for your users.\n\n`next build` will emit `.html` files for statically optimized pages.\nThe result will be a file named `.next/server/static/${BUILD_ID}/about.html` instead of `.next/server/static/${BUILD_ID}/about.js`.\nThis behavior is similar for `target: 'serverless'`.\n\nThe built-in Next.js server (`next start`) and programmatic API (`app.getRequestHandler()`) both support this build output transparently.\nThere is no configuration or special handling required.\n\n> **Note**: If you have a [custom `<App>`](#custom-app) with `getInitialProps` then this optimization will be disabled.\n\n> **Note**: If you have a [custom `<Document>`](#custom-document) with `getInitialProps` be sure you check if `ctx.req` is defined before assuming the page is server-side rendered.\n> `ctx.req` will be `undefined` for pages that are prerendered.\n\n## Automatic Static Optimization Indicator\n\nWhen a page qualifies for automatic static optimization we show an indicator to let you know.\nThis is helpful since the automatic static optimization can be very beneficial and knowing immediately in development if it qualifies can be useful.\nSee above for information on the benefits of this optimization.\n\nIn some cases this indicator might not be as useful like when working on electron applications. For these cases you can disable the indicator in your `next.config.js` by setting\n\n```js\nmodule.exports = {\n  devIndicators: {\n    autoPrerender: false,\n  },\n}\n```\n\n## Production deployment\n\nTo deploy, instead of running `next`, you want to build for production usage ahead of time. Therefore, building and starting are separate commands:\n\n```bash\nnext build\nnext start\n```\n\nTo deploy Next.js with [ZEIT Now](https://zeit.co/now) see the [ZEIT Guide for Deploying Next.js](https://zeit.co/guides/deploying-nextjs-with-now/) or the [Next.js Learn section about deploying on ZEIT Now](https://nextjs.org/learn/basics/deploying-a-nextjs-app/deploying-to-zeit-now).\n\nNext.js can be deployed to other hosting solutions too. Please have a look at the ['Deployment'](https://github.com/zeit/next.js/wiki/Deployment) section of the wiki.\n\nNote: `NODE_ENV` is properly configured by the `next` subcommands, if absent, to maximize performance. if you’re using Next.js [programmatically](#custom-server-and-routing), it’s your responsibility to set `NODE_ENV=production` manually!\n\nNote: we recommend putting `.next`, or your [custom dist folder](https://github.com/zeit/next.js#custom-configuration), in `.gitignore` or `.npmignore`. Otherwise, use `files` or `now.files` to opt-into a whitelist of files you want to deploy, excluding `.next` or your custom dist folder.\n\n### Compression\n\nNext.js provides [gzip](https://tools.ietf.org/html/rfc6713#section-3) compression to compress rendered content and static files. Compression only works with the `server` target. In general you will want to enable compression on a HTTP proxy like [nginx](https://www.nginx.com/), to offload load from the `Node.js` process.\n\nTo disable **compression** in Next.js, set `compress` to `false` in `next.config.js`:\n\n```js\n// next.config.js\nmodule.exports = {\n  compress: false,\n}\n```\n\n### Serverless deployment\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"https://github.com/zeit/now-examples/tree/master/nextjs\">now.sh</a></li>\n    <li><a href=\"https://github.com/TejasQ/anna-artemov.now.sh\">anna-artemov.now.sh</a></li>\n    <li>We encourage contributing more examples to this section</li>\n  </ul>\n</details>\n\nServerless deployment dramatically improves reliability and scalability by splitting your application into smaller parts (also called [**lambdas**](https://zeit.co/docs/v2/deployments/concepts/lambdas/)).\nIn the case of Next.js, each page in the `pages` directory becomes a serverless lambda.\n\nThere are [a number of benefits](https://zeit.co/blog/serverless-express-js-lambdas-with-now-2#benefits-of-serverless-express) to serverless.\nThe referenced link talks about some of them in the context of Express, but the principles apply universally:\nserverless allows for distributed points of failure, infinite scalability, and is incredibly affordable with a \"pay for what you use\" model.\n\nTo enable **serverless mode** in Next.js, add the `serverless` build `target` in `next.config.js`:\n\n```js\n// next.config.js\nmodule.exports = {\n  target: 'serverless',\n}\n```\n\nThe `serverless` target will output a single lambda or [HTML file](#automatic-static-optimization) per page.\nThis file is completely standalone and doesn't require any dependencies to run:\n\n- `pages/index.js` => `.next/serverless/pages/index.js`\n- `pages/about.js` => `.next/serverless/pages/about.js`\n- `pages/blog.js` => `.next/serverless/pages/blog.html`\n\nThe signature of the Next.js Serverless function is similar to the Node.js HTTP server callback:\n\n```ts\nexport function render(req: http.IncomingMessage, res: http.ServerResponse) => void\n```\n\n- [http.IncomingMessage](https://nodejs.org/api/http.html#http_class_http_incomingmessage)\n- [http.ServerResponse](https://nodejs.org/api/http.html#http_class_http_serverresponse)\n- `void` refers to the function not having a return value and is equivalent to JavaScript's `undefined`. Calling the function will finish the request.\n\nThe static HTML files are ready to be served as-is.\nYou can read more about this feature, including how to opt-out, in the [Automatic Static Optimization section](#automatic-static-optimization).\n\nUsing the serverless target, you can deploy Next.js to [ZEIT Now](https://zeit.co/now) with all of the benefits and added ease of control like for example; [custom routes](https://zeit.co/guides/custom-next-js-server-to-routes/) and caching headers. See the [ZEIT Guide for Deploying Next.js with Now](https://zeit.co/guides/deploying-nextjs-with-now/) for more information.\n\n#### One Level Lower\n\nNext.js provides low-level APIs for serverless deployments as hosting platforms have different function signatures. In general you will want to wrap the output of a Next.js serverless build with a compatibility layer.\n\nFor example if the platform supports the Node.js [`http.Server`](https://nodejs.org/api/http.html#http_class_http_server) class:\n\n```js\nconst http = require('http')\nconst page = require('./.next/serverless/pages/about.js')\nconst server = new http.Server((req, res) => page.render(req, res))\nserver.listen(3000, () => console.log('Listening on http://localhost:3000'))\n```\n\nFor specific platform examples see [the examples section above](#serverless-deployment).\n\n#### Summary\n\n- Low-level API for implementing serverless deployment\n- Every page in the `pages` directory becomes a serverless function (lambda)\n- Creates the smallest possible serverless function (50Kb base zip size)\n- Optimized for fast [cold start](https://zeit.co/blog/serverless-ssr#cold-start) of the function\n- The serverless function has 0 dependencies (they are included in the function bundle)\n- Uses the [http.IncomingMessage](https://nodejs.org/api/http.html#http_class_http_incomingmessage) and [http.ServerResponse](https://nodejs.org/api/http.html#http_class_http_serverresponse) from Node.js\n- opt-in using `target: 'serverless'` in `next.config.js`\n- Does not load `next.config.js` when executing the function, note that this means `publicRuntimeConfig` / `serverRuntimeConfig` are not supported\n\n## Browser support\n\nNext.js supports IE11 and all modern browsers out of the box using [`@babel/preset-env`](https://new.babeljs.io/docs/en/next/babel-preset-env.html). In order to support IE11 Next.js adds a global `Promise` polyfill. In cases where your own code or any external NPM dependencies you are using requires features not supported by your target browsers you will need to implement polyfills.\n\nThe [polyfills](https://github.com/zeit/next.js/tree/canary/examples/with-polyfills) example demonstrates the recommended approach to implement polyfills.\n\n## TypeScript\n\nNext.js provides an integrated TypeScript experience out of the box, similar to an IDE.\n\nTo get started, create a empty `tsconfig.json` file in the root of your project:\n\n```bash\ntouch tsconfig.json\n```\n\nNext.js will automatically configure this file with default values (providing [your own `tsconfig.json`](https://www.typescriptlang.org/docs/handbook/compiler-options.html) is also supported).\n\nThen, run `next dev` (normally `npm run dev`) and Next.js will guide you through installing the necessary packages to complete setup.\n\n```bash\nnpm run dev\n\n# You'll see instructions like these:\n#\n# Please install typescript, @types/react, and @types/node by running:\n#\n#         yarn add --dev typescript @types/react @types/node\n#\n# ...\n```\n\nYou're now ready to start converting files from `.js` to `.tsx` and leveraging the benefits TypeScript provides!\n\nTo learn more about TypeScript checkout its [documentation](https://www.typescriptlang.org/).\n\n> **Note**: Next.js will create a file named `next-env.d.ts` in the root of your project.\n> This file ensures Next.js' types are picked up by the TypeScript compiler.\n>\n> **You cannot remove this file, however, you can edit it (but don't need to).**\n\n> **Note**: Next.js does not enable TypeScript's `strict` mode by default.\n> When you feel comfortable with TypeScript, you may turn this option on in your `tsconfig.json`.\n\n> **Note**: By default, Next.js reports TypeScript errors during development for pages you are actively working on.\n> TypeScript errors for inactive pages **do not** block the development process.\n>\n> If you don't want to leverage this behavior and instead, e.g. prefer your editor's integration, you can set the following option in `next.config.js`:\n>\n> ```js\n> // next.config.js\n> module.exports = {\n>   typescript: {\n>     ignoreDevErrors: true,\n>   },\n> }\n> ```\n>\n> Next.js will still fail your **production build** (`next build`) when TypeScript errors are present in your project.\n>\n> If you'd like Next.js to dangerously produce production code even when your application is broken, you can set the following option in your `next.config.js`.\n> Be sure you are running type checks as part of your build or deploy process!\n>\n> ```js\n> // next.config.js\n> module.exports = {\n>   typescript: {\n>     // !! WARN !!\n>     // Dangerously allow production builds to successfully complete even if\n>     // your project has type errors.\n>     //\n>     // This option is rarely needed, and should be reserved for advanced\n>     // setups. You may be looking for `ignoreDevErrors` instead.\n>     // !! WARN !!\n>     ignoreBuildErrors: true,\n>   },\n> }\n> ```\n\n### Exported types\n\nNext.js provides `NextPage` type that can be used for pages in the `pages` directory. `NextPage` adds definitions for [`getInitialProps`](#fetching-data-and-component-lifecycle) so that it can be used without any extra typing needed.\n\n```tsx\nimport { NextPage } from 'next'\n\ninterface Props {\n  userAgent?: string\n}\n\nconst Page: NextPage<Props> = ({ userAgent }) => (\n  <main>Your user agent: {userAgent}</main>\n)\n\nPage.getInitialProps = async ({ req }) => {\n  const userAgent = req ? req.headers['user-agent'] : navigator.userAgent\n  return { userAgent }\n}\n\nexport default Page\n```\n\nFor `React.Component` you can use `NextPageContext`:\n\n```tsx\nimport React from 'react'\nimport { NextPageContext } from 'next'\n\ninterface Props {\n  userAgent?: string\n}\n\nexport default class Page extends React.Component<Props> {\n  static async getInitialProps({ req }: NextPageContext) {\n    const userAgent = req ? req.headers['user-agent'] : navigator.userAgent\n    return { userAgent }\n  }\n\n  render() {\n    const { userAgent } = this.props\n    return <main>Your user agent: {userAgent}</main>\n  }\n}\n```\n\n## AMP Support\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"https://github.com/zeit/next.js/tree/canary/examples/amp\">amp</a></li>\n  </ul>\n</details>\n\n### Enabling AMP Support\n\nTo enable AMP support for a page, add `export const config = { amp: true }` to your page.\n\n### AMP First Page\n\n```js\n// pages/about.js\nexport const config = { amp: true }\n\nexport default function AboutPage(props) {\n  return <h3>My AMP About Page!</h3>\n}\n```\n\n### Hybrid AMP Page\n\n```js\n// pages/hybrid-about.js\nimport { useAmp } from 'next/amp'\n\nexport const config = { amp: 'hybrid' }\n\nexport default function AboutPage(props) {\n  return (\n    <div>\n      <h3>My AMP Page</h3>\n      {useAmp() ? (\n        <amp-img\n          width=\"300\"\n          height=\"300\"\n          src=\"/my-img.jpg\"\n          alt=\"a cool image\"\n          layout=\"responsive\"\n        />\n      ) : (\n        <img width=\"300\" height=\"300\" src=\"/my-img.jpg\" alt=\"a cool image\" />\n      )}\n    </div>\n  )\n}\n```\n\n### AMP Page Modes\n\nAMP pages can specify two modes:\n\n- AMP-only (default)\n  - Pages have no Next.js or React client-side runtime\n  - Pages are automatically optimized with [AMP Optimizer](https://github.com/ampproject/amp-toolbox/tree/master/packages/optimizer), an optimizer that applies the same transformations as AMP caches (improves performance by up to 42%)\n  - Pages have a user-accessible (optimized) version of the page and a search-engine indexable (unoptimized) version of the page\n  - Opt-in via `export const config = { amp: true }`\n- Hybrid\n  - Pages are able to be rendered as traditional HTML (default) and AMP HTML (by adding `?amp=1` to the URL)\n  - The AMP version of the page only has valid optimizations applied with AMP Optimizer so that it is indexable by search-engines\n  - Opt-in via `export const config = { amp: 'hybrid' }`\n  - Able to differentiate between modes using `useAmp` from `next/amp`\n\nBoth of these page modes provide a consistently fast experience for users accessing pages through search engines.\n\n### AMP Behavior with `next export`\n\nWhen using `next export` to statically prerender pages Next.js will detect if the page supports AMP and change the exporting behavior based on that.\n\nHybrid AMP (`pages/about.js`) would output:\n\n- `out/about.html` - with client-side React runtime\n- `out/about.amp.html` - AMP page\n\nAMP-only (`pages/about.js`) would output:\n\n- `out/about.html` - Optimized AMP page\n\nDuring export Next.js automatically detects if a page is hybrid AMP and outputs the AMP version to `page.amp.html`. We also automatically insert the `<link rel=\"amphtml\" href=\"/page.amp\" />` and `<link rel=\"canonical\" href=\"/\" />` tags for you.\n\n> **Note**: When using `exportTrailingSlash: true` in `next.config.js`, output will be different. For Hybrid AMP pages, output will be `out/page/index.html` and `out/page.amp/index.html`, and for AMP-only pages, output will be `out/page/index.html`\n\n### Adding AMP Components\n\nThe AMP community provides [many components](https://amp.dev/documentation/components/) to make AMP pages more interactive. You can add these components to your page by using `next/head`:\n\n```js\n// pages/hello.js\nimport Head from 'next/head'\n\nexport const config = { amp: true }\n\nexport default function MyAmpPage() {\n  return (\n    <div>\n      <Head>\n        <script\n          async\n          key=\"amp-timeago\"\n          custom-element=\"amp-timeago\"\n          src=\"https://cdn.ampproject.org/v0/amp-timeago-0.1.js\"\n        />\n      </Head>\n\n      <p>Some time: {date.toJSON()}</p>\n      <amp-timeago\n        width=\"0\"\n        height=\"15\"\n        datetime={date.toJSON()}\n        layout=\"responsive\"\n      >\n        .\n      </amp-timeago>\n    </div>\n  )\n}\n```\n\n### AMP Validation\n\nAMP pages are automatically validated with [amphtml-validator](https://www.npmjs.com/package/amphtml-validator) during development. Errors and warnings will appear in the terminal where you started Next.js.\n\nPages are also validated during `next export` and any warnings / errors will be printed to the terminal.\nAny AMP errors will cause `next export` to exit with status code `1` because the export is not valid AMP.\n\n### TypeScript Support\n\nAMP currently doesn't have built-in types for TypeScript, but it's in their roadmap ([#13791](https://github.com/ampproject/amphtml/issues/13791)). As a workaround you can manually add the types to `amp.d.ts` like [here](https://stackoverflow.com/a/50601125).\n\n## Static HTML export\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"/examples/with-static-export\">Static export</a></li>\n  </ul>\n</details>\n\n`next export` is a way to run your Next.js app as a standalone static app without the need for a Node.js server.\nThe exported app supports almost every feature of Next.js, including dynamic urls, prefetching, preloading and dynamic imports.\n\nThe way `next export` works is by prerendering all pages possible to HTML. It does so based on a mapping of `pathname` key to page object. This mapping is called the `exportPathMap`.\n\nThe page object has 2 values:\n\n- `page` - `String` the page inside the `pages` directory to render\n- `query` - `Object` the `query` object passed to `getInitialProps` when prerendering. Defaults to `{}`\n\n### Usage\n\nSimply develop your app as you normally do with Next.js. Then run:\n\n```\nnext build\nnext export\n```\n\nBy default `next export` doesn't require any configuration. It will generate a default `exportPathMap` containing the routes to pages inside the `pages` directory. This default mapping is available as `defaultPathMap` in the example below.\n\nIf your application has dynamic routes you can add a dynamic `exportPathMap` in `next.config.js`.\nThis function is asynchronous and gets the default `exportPathMap` as a parameter.\n\n```js\n// next.config.js\nmodule.exports = {\n  exportPathMap: async function(\n    defaultPathMap,\n    { dev, dir, outDir, distDir, buildId }\n  ) {\n    return {\n      '/': { page: '/' },\n      '/about': { page: '/about' },\n      '/readme.md': { page: '/readme' },\n      '/p/hello-nextjs': { page: '/post', query: { title: 'hello-nextjs' } },\n      '/p/learn-nextjs': { page: '/post', query: { title: 'learn-nextjs' } },\n      '/p/deploy-nextjs': { page: '/post', query: { title: 'deploy-nextjs' } },\n    }\n  },\n}\n```\n\nThe pages will be exported as html files, i.e. `/about` will become `/about.html`.\n\nIt is possible to configure Next.js to export pages as `index.html` files and require trailing slashes, i.e. `/about` becomes `/about/index.html` and is routable via `/about/`.\nThis was the default behavior prior to Next.js 9.\nYou can use the following `next.config.js` to switch back to this behavior:\n\n```js\n// next.config.js\nmodule.exports = {\n  exportTrailingSlash: true,\n}\n```\n\n> **Note**: If the export path is a filename (e.g. `/readme.md`) and is different than `.html`, you may need to set the `Content-Type` header to `text/html` when serving this content.\n\nThe second argument is an `object` with:\n\n- `dev` - `true` when `exportPathMap` is being called in development. `false` when running `next export`. In development `exportPathMap` is used to define routes.\n- `dir` - Absolute path to the project directory\n- `outDir` - Absolute path to the `out/` directory (configurable with `-o` or `--outdir`). When `dev` is `true` the value of `outDir` will be `null`.\n- `distDir` - Absolute path to the `.next/` directory (configurable using the `distDir` config key)\n- `buildId` - The `buildId` the export is running for\n\nThen simply run these commands:\n\n```bash\nnext build\nnext export\n```\n\nFor that you may need to add a NPM script to `package.json` like this:\n\n```json\n{\n  \"scripts\": {\n    \"build\": \"next build\",\n    \"export\": \"npm run build && next export\"\n  }\n}\n```\n\nAnd run it at once with:\n\n```bash\nnpm run export\n```\n\nThen you have a static version of your app in the `out` directory.\n\n> You can also customize the output directory. For that run `next export -h` for the help.\n\nNow you can deploy the `out` directory to any static hosting service. Note that there is an additional step for deploying to GitHub Pages, [documented here](https://github.com/zeit/next.js/wiki/Deploying-a-Next.js-app-into-GitHub-Pages).\n\nFor an example, simply visit the `out` directory and run following command to deploy your app to [ZEIT Now](https://zeit.co/now).\n\n```bash\nnow\n```\n\n### Limitation\n\nWith `next export`, we build a HTML version of your app. At export time we will run `getInitialProps` of your pages.\n\nThe `req` and `res` fields of the `context` object passed to `getInitialProps` are empty objects during export as there is no server running.\n\n> **Note**: If your pages don't have `getInitialProps` you may not need `next export` at all, `next build` is already enough thanks to [automatic static optimization](#automatic-static-optimization).\n\n> You won't be able to render HTML dynamically when static exporting, as we pre-build the HTML files. If you want to do dynamic rendering use `next start` or the custom server API\n\n## Multi Zones\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"/examples/with-zones\">With Zones</a></li>\n  </ul>\n</details>\n\nA zone is a single deployment of a Next.js app. Just like that, you can have multiple zones and then you can merge them as a single app.\n\nFor an example, you can have two zones like this:\n\n- An app for serving `/blog/**`\n- Another app for serving all other pages\n\nWith multi zones support, you can merge both these apps into a single one allowing your customers to browse it using a single URL, but you can develop and deploy both apps independently.\n\n> This is exactly the same concept of microservices, but for frontend apps.\n\n### How to define a zone\n\nThere are no special zones related APIs. You only need to do following:\n\n- Make sure to keep only the pages you need in your app, meaning that an app can't have pages from another app, if app `A` has `/blog` then app `B` shouldn't have it too.\n- Make sure to add an [assetPrefix](https://github.com/zeit/next.js#cdn-support-with-asset-prefix) to avoid conflicts with static files.\n\n### How to merge them\n\nYou can merge zones using any HTTP proxy.\n\nYou can use [now dev](https://zeit.co/docs/v2/development/basics) as your local development server. It allows you to easily define routing routes for multiple apps like below:\n\n```json\n{\n  \"version\": 2,\n  \"builds\": [\n    { \"src\": \"docs/next.config.js\", \"use\": \"@now/next\" },\n    { \"src\": \"home/next.config.js\", \"use\": \"@now/next\" }\n  ],\n  \"routes\": [\n    { \"src\": \"/docs(.*)\", \"dest\": \"docs$1\", \"continue\": true },\n    { \"src\": \"(?!/?docs)(.*)\", \"dest\": \"home$1\", \"continue\": true }\n  ]\n}\n```\n\nFor the production deployment, you can use the same configuration and run `now` to do the deployment with [ZEIT Now](https://zeit.co/now). Otherwise you can also configure a proxy server to route using a set of routes like the ones above, e.g deploy the docs app to `https://docs.example.com` and the home app to `https://home.example.com` and then add a proxy server for both apps in `https://example.com`.\n\n## FAQ\n\n<details>\n  <summary>Is this production ready?</summary>\n  Next.js has been powering https://zeit.co since its inception.\n\nWe’re ecstatic about both the developer experience and end-user performance, so we decided to share it with the community.\n\n</details>\n\n<details>\n  <summary>How big is it?</summary>\n\nThe client side bundle size should be measured in a per-app basis.\nA small Next main bundle is around 65kb gzipped.\n\n</details>\n\n<details>\n  <summary>Is this like `create-react-app`?</summary>\n\nYes and No.\n\nYes in that both make your life easier.\n\nNo in that it enforces a _structure_ so that we can do more advanced things like:\n\n- Server side rendering\n- Automatic code splitting\n\nIn addition, Next.js provides two built-in features that are critical for every single website:\n\n- Routing with lazy component loading: `<Link>` (by importing `next/link`)\n- A way for components to alter `<head>`: `<Head>` (by importing `next/head`)\n\nIf you want to create re-usable React components that you can embed in your Next.js app or other React applications, using `create-react-app` is a great idea. You can later `import` it and keep your codebase clean!\n\n</details>\n\n<details>\n  <summary>How do I use CSS-in-JS solutions?</summary>\n\nNext.js bundles [styled-jsx](https://github.com/zeit/styled-jsx) supporting scoped css. However you can use any CSS-in-JS solution in your Next app by just including your favorite library [as mentioned before](#css-in-js) in the document.\n\n</details>\n\n<details>\n  <summary>What syntactic features are transpiled? How do I change them?</summary>\n\nWe track V8. Since V8 has wide support for ES6 and `async` and `await`, we transpile those. Since V8 doesn’t support class decorators, we don’t transpile those.\n\nSee the documentation about [customizing the babel config](#customizing-babel-config) and [next/preset](/packages/next/build/babel/preset.ts) for more information.\n\n</details>\n\n<details>\n  <summary>Why a new Router?</summary>\n\nNext.js is special in that:\n\n- Routes don’t need to be known ahead of time\n- Routes are always lazy-loadable\n- Top-level components can define `getInitialProps` that should _block_ the loading of the route (either when server-rendering or lazy-loading)\n\nAs a result, we were able to introduce a very simple approach to routing that consists of two pieces:\n\n- Every top level component receives a `url` object to inspect the url or perform modifications to the history\n- A `<Link />` component is used to wrap elements like anchors (`<a/>`) to perform client-side transitions\n\n</details>\n\n<details>\n<summary>How do I define a custom fancy route?</summary>\n\nNext.js provide [dynamic routing](#dynamic-routing) solution out of the box. This allows to use pretty links in url.\n\nYou can check an [example](https://github.com/zeit/next.js/tree/canary/examples/dynamic-routing) to see how it works.\n\n</details>\n\n<details>\n<summary>How do I fetch data?</summary>\n\nIt’s up to you. `getInitialProps` is an `async` function (or a regular function that returns a `Promise`). It can retrieve data from anywhere.\n\n</details>\n\n<details>\n  <summary>Can I use it with GraphQL?</summary>\n\nYes! Here's an example with [Apollo](/examples/with-apollo).\n\n</details>\n\n<details>\n<summary>Can I use it with Redux and thunk?</summary>\n\nYes! Here's an [example](/examples/with-redux-thunk).\n\n</details>\n\n<details>\n<summary>Can I use it with Redux?</summary>\n\nYes! Here's an [example](/examples/with-redux).\n\n</details>\n\n<details>\n<summary>Can I use Next with my favorite Javascript library or toolkit?</summary>\n\nSince our first release we've had **many** example contributions, you can check them out in the [examples](/examples) directory.\n\n</details>\n\n<details>\n<summary>What is this inspired by?</summary>\n\nMany of the goals we set out to accomplish were the ones listed in [The 7 principles of Rich Web Applications](http://rauchg.com/2014/7-principles-of-rich-web-applications/) by Guillermo Rauch.\n\nThe ease-of-use of PHP is a great inspiration. We feel Next.js is a suitable replacement for many scenarios where you otherwise would use PHP to output HTML.\n\nUnlike PHP, we benefit from the ES6 module system and every file exports a **component or function** that can be easily imported for lazy evaluation or testing.\n\nAs we were researching options for server-rendering React that didn’t involve a large number of steps, we came across [react-page](https://github.com/facebookarchive/react-page) (now deprecated), a similar approach to Next.js by the creator of React Jordan Walke.\n\n</details>\n\n## Contributing\n\nPlease see our [contributing.md](/contributing.md).\n\n## Authors\n\n- Arunoda Susiripala ([@arunoda](https://twitter.com/arunoda)) – [ZEIT](https://zeit.co)\n- Tim Neutkens ([@timneutkens](https://twitter.com/timneutkens)) – [ZEIT](https://zeit.co)\n- Naoyuki Kanezawa ([@nkzawa](https://twitter.com/nkzawa)) – [ZEIT](https://zeit.co)\n- Tony Kovanen ([@tonykovanen](https://twitter.com/tonykovanen)) – [ZEIT](https://zeit.co)\n- Guillermo Rauch ([@rauchg](https://twitter.com/rauchg)) – [ZEIT](https://zeit.co)\n- Dan Zajdband ([@impronunciable](https://twitter.com/impronunciable)) – Knight-Mozilla / Coral Project",
      "createdTime": "2020-01-04T20:00:46.443Z",
      "source": "https://github.com/zeit/next.js/blob/canary/packages/next/README.md"
    },
    {
      "id": 18,
      "title": "React Fiber Architecture",
      "subTitle": "",
      "image": "https://images.unsplash.com/photo-1517694712202-14dd9538aa97",
      "content": "# React Fiber Architecture\n\n## Introduction\n\nReact Fiber is an ongoing reimplementation of React's core algorithm. It is the culmination of over two years of research by the React team.\n\nThe goal of React Fiber is to increase its suitability for areas like animation, layout, and gestures. Its headline feature is **incremental rendering**: the ability to split rendering work into chunks and spread it out over multiple frames.\n\nOther key features include the ability to pause, abort, or reuse work as new updates come in; the ability to assign priority to different types of updates; and new concurrency primitives.\n\n### About this document\n\nFiber introduces several novel concepts that are difficult to grok solely by looking at code. This document began as a collection of idtes I took as I followed along with Fiber's implementation in the React project. As it grew, I realized it may be a helpful resource for others, too.\n\nI'll attempt to use the plainest language possible, and to avoid jargon by explicitly defining key terms. I'll also link heavily to external resources when possible.\n\nPlease note that I am not on the React team, and do not speak from any authority. **This is not an official document**. I have asked members of the React team to review it for accuracy.\n\nThis is also a work in progress. **Fiber is an ongoing project that will likely undergo significant refactors before it's completed.** Also ongoing are my attempts at documenting its design here. Improvements and suggestions are highly welcome.\n\nMy goal is that after reading this document, you will understand Fiber well enough to [follow along as it's implemented](https://github.com/facebook/react/commits/master/src/renderers/shared/fiber), and eventually even be able to contribute back to React.\n\n### Prerequisites\n\nI strongly suggest that you are familiar with the following resources before continuing:\n\n- [React Components, Elements, and Instances](https://facebook.github.io/react/blog/2015/12/18/react-components-elements-and-instances.html) - \"Component\" is often an overloaded term. A firm grasp of these terms is crucial.\n- [Reconciliation](https://facebook.github.io/react/docs/reconciliation.html) - A high-level description of React's reconciliation algorithm.\n- [React Basic Theoretical Concepts](https://github.com/reactjs/react-basic) - A description of the conceptual model of React without implementation burden. Some of this may not make sense on first reading. That's okay, it will make more sense with time.\n- [React Design Principles](https://facebook.github.io/react/contributing/design-principles.html) - Pay special attention to the section on scheduling. It does a great job of explaining the *why* of React Fiber.\n\n## Review\n\nPlease check out the prerequisites section if you haven't already.\n\nBefore we dive into the new stuff, let's review a few concepts.\n\n### What is reconciliation?\n\n<dl>\n  <dt>reconciliation</dt>\n  <dd>The algorithm React uses to diff one tree with another to determine which parts need to be changed.</dd>\n\n  <dt>update</dt>\n  <dd>A change in the data used to render a React app. Usually the result of `setState`. Eventually results in a re-render.</dd>\n</dl>\n\nThe central idea of React's API is to think of updates as if they cause the entire app to re-render. This allows the developer to reason declaratively, rather than worry about how to efficiently transition the app from any particular state to another (A to B, B to C, C to A, and so on).\n\nActually re-rendering the entire app on each change only works for the most trivial apps; in a real-world app, it's prohibitively costly in terms of performance. React has optimizations which create the appearance of whole app re-rendering while maintaining great performance. The bulk of these optimizations are part of a process called **reconciliation**.\n\nReconciliation is the algorithm behind what is popularly understood as the \"virtual DOM.\" A high-level description goes something like this: when you render a React application, a tree of nodes that describes the app is generated and saved in memory. This tree is then flushed to the rendering environment — for example, in the case of a browser application, it's translated to a set of DOM operations. When the app is updated (usually via `setState`), a new tree is generated. The new tree is diffed with the previous tree to compute which operations are needed to update the rendered app.\n\nAlthough Fiber is a ground-up rewrite of the reconciler, the high-level algorithm [described in the React docs](https://facebook.github.io/react/docs/reconciliation.html) will be largely the same. The key points are:\n\n- Different component types are assumed to generate substantially different trees. React will not attempt to diff them, but rather replace the old tree completely.\n- Diffing of lists is performed using keys. Keys should be \"stable, predictable, and unique.\"\n\n### Reconciliation versus rendering\n\nThe DOM is just one of the rendering environments React can render to, the other major targets being native iOS and Android views via React Native. (This is why \"virtual DOM\" is a bit of a misnomer.)\n\nThe reason it can support so many targets is because React is designed so that reconciliation and rendering are separate phases. The reconciler does the work of computing which parts of a tree have changed; the renderer then uses that information to actually update the rendered app.\n\nThis separation means that React DOM and React Native can use their own renderers while sharing the same reconciler, provided by React core.\n\nFiber reimplements the reconciler. It is not principally concerned with rendering, though renderers will need to change to support (and take advantage of) the new architecture.\n\n### Scheduling\n\n<dl>\n  <dt>scheduling</dt>\n  <dd>the process of determining when work should be performed.</dd>\n\n  <dt>work</dt>\n  <dd>any computations that must be performed. Work is usually the result of an update (e.g. <code>setState</code>).\n</dl>\n\nReact's [Design Principles](https://facebook.github.io/react/contributing/design-principles.html#scheduling) document is so good on this subject that I'll just quote it here:\n\n> In its current implementation React walks the tree recursively and calls render functions of the whole updated tree during a single tick. However in the future it might start delaying some updates to avoid dropping frames.\n>\n> This is a common theme in React design. Some popular libraries implement the \"push\" approach where computations are performed when the new data is available. React, however, sticks to the \"pull\" approach where computations can be delayed until necessary.\n>\n> React is not a generic data processing library. It is a library for building user interfaces. We think that it is uniquely positioned in an app to know which computations are relevant right now and which are not.\n>\n> If something is offscreen, we can delay any logic related to it. If data is arriving faster than the frame rate, we can coalesce and batch updates. We can prioritize work coming from user interactions (such as an animation caused by a button click) over less important background work (such as rendering new content just loaded from the network) to avoid dropping frames.\n\nThe key points are:\n\n- In a UI, it's not necessary for every update to be applied immediately; in fact, doing so can be wasteful, causing frames to drop and degrading the user experience.\n- Different types of updates have different priorities — an animation update needs to complete more quickly than, say, an update from a data store.\n- A push-based approach requires the app (you, the programmer) to decide how to schedule work. A pull-based approach allows the framework (React) to be smart and make those decisions for you.\n\nReact doesn't currently take advantage of scheduling in a significant way; an update results in the entire subtree being re-rendered immediately. Overhauling React's core algorithm to take advantage of scheduling is the driving idea behind Fiber.\n\n---\n\nNow we're ready to dive into Fiber's implementation. The next section is more technical than what we've discussed so far. Please make sure you're comfortable with the previous material before moving on.\n\n## What is a fiber?\n\nWe're about to discuss the heart of React Fiber's architecture. Fibers are a much lower-level abstraction than application developers typically think about. If you find yourself frustrated in your attempts to understand it, don't feel discouraged. Keep trying and it will eventually make sense. (When you do finally get it, please suggest how to improve this section.)\n\nHere we go!\n\n---\n\nWe've established that a primary goal of Fiber is to enable React to take advantage of scheduling. Specifically, we need to be able to\n\n- pause work and come back to it later.\n- assign priority to different types of work.\n- reuse previously completed work.\n- abort work if it's no longer needed.\n\nIn order to do any of this, we first need a way to break work down into units. In one sense, that's what a fiber is. A fiber represents a **unit of work**.\n\nTo go further, let's go back to the conception of [React components as functions of data](https://github.com/reactjs/react-basic#transformation), commonly expressed as\n\n```\nv = f(d)\n```\n\nIt follows that rendering a React app is akin to calling a function whose body contains calls to other functions, and so on. This analogy is useful when thinking about fibers.\n\nThe way computers typically track a program's execution is using the [call stack](https://en.wikipedia.org/wiki/Call_stack). When a function is executed, a new **stack frame** is added to the stack. That stack frame represents the work that is performed by that function.\n\nWhen dealing with UIs, the problem is that if too much work is executed all at once, it can cause animations to drop frames and look choppy. What's more, some of that work may be unnecessary if it's superseded by a more recent update. This is where the comparison between UI components and function breaks down, because components have more specific concerns than functions in general.\n\nNewer browsers (and React Native) implement APIs that help address this exact problem: `requestIdleCallback` schedules a low priority function to be called during an idle period, and `requestAnimationFrame` schedules a high priority function to be called on the next animation frame. The problem is that, in order to use those APIs, you need a way to break rendering work into incremental units. If you rely only on the call stack, it will keep doing work until the stack is empty.\n\nWouldn't it be great if we could customize the behavior of the call stack to optimize for rendering UIs? Wouldn't it be great if we could interrupt the call stack at will and manipulate stack frames manually?\n\nThat's the purpose of React Fiber. Fiber is reimplementation of the stack, specialized for React components. You can think of a single fiber as a **virtual stack frame**.\n\nThe advantage of reimplementing the stack is that you can [keep stack frames in memory](https://www.facebook.com/groups/2003630259862046/permalink/2054053404819731/) and execute them however (and *whenever*) you want. This is crucial for accomplishing the goals we have for scheduling.\n\nAside from scheduling, manually dealing with stack frames unlocks the potential for features such as concurrency and error boundaries. We will cover these topics in future sections.\n\nIn the next section, we'll look more at the structure of a fiber.\n\n### Structure of a fiber\n\n*Note: as we get more specific about implementation details, the likelihood that something may change increases. Please file a PR if you notice any mistakes or outdated information.*\n\nIn concrete terms, a fiber is a JavaScript object that contains information about a component, its input, and its output.\n\nA fiber corresponds to a stack frame, but it also corresponds to an instance of a component.\n\nHere are some of the important fields that belong to a fiber. (This list is not exhaustive.)\n\n#### `type` and `key`\n\nThe type and key of a fiber serve the same purpose as they do for React elements. (In fact, when a fiber is created from an element, these two fields are copied over directly.)\n\nThe type of a fiber describes the component that it corresponds to. For composite components, the type is the function or class component itself. For host components (`div`, `span`, etc.), the type is a string.\n\nConceptually, the type is the function (as in `v = f(d)`) whose execution is being tracked by the stack frame.\n\nAlong with the type, the key is used during reconciliation to determine whether the fiber can be reused.\n\n#### `child` and `sibling`\n\nThese fields point to other fibers, describing the recursive tree structure of a fiber.\n\nThe child fiber corresponds to the value returned by a component's `render` method. So in the following example\n\n```js\nfunction Parent() {\n  return <Child />\n}\n```\n\nThe child fiber of `Parent` corresponds to `Child`.\n\nThe sibling field accounts for the case where `render` returns multiple children (a new feature in Fiber!):\n\n```js\nfunction Parent() {\n  return [<Child1 />, <Child2 />]\n}\n```\n\nThe child fibers form a singly-linked list whose head is the first child. So in this example, the child of `Parent` is `Child1` and the sibling of `Child1` is `Child2`.\n\nGoing back to our function analogy, you can think of a child fiber as a [tail-called function](https://en.wikipedia.org/wiki/Tail_call).\n\n#### `return`\n\nThe return fiber is the fiber to which the program should return after processing the current one. It is conceptually the same as the return address of a stack frame. It can also be thought of as the parent fiber.\n\nIf a fiber has multiple child fibers, each child fiber's return fiber is the parent. So in our example in the previous section, the return fiber of `Child1` and `Child2` is `Parent`.\n\n#### `pendingProps` and `memoizedProps`\n\nConceptually, props are the arguments of a function. A fiber's `pendingProps` are set at the beginning of its execution, and `memoizedProps` are set at the end.\n\nWhen the incoming `pendingProps` are equal to `memoizedProps`, it signals that the fiber's previous output can be reused, preventing unnecessary work.\n\n#### `pendingWorkPriority`\n\nA number indicating the priority of the work represented by the fiber. The [ReactPriorityLevel](https://github.com/facebook/react/blob/master/src/renderers/shared/fiber/ReactPriorityLevel.js) module lists the different priority levels and what they represent.\n\nWith the exception of `NoWork`, which is 0, a larger number indicates a lower priority. For example, you could use the following function to check if a fiber's priority is at least as high as the given level:\n\n```js\nfunction matchesPriority(fiber, priority) {\n  return fiber.pendingWorkPriority !== 0 &&\n         fiber.pendingWorkPriority <= priority\n}\n```\n\n*This function is for illustration only; it's not actually part of the React Fiber codebase.*\n\nThe scheduler uses the priority field to search for the next unit of work to perform. This algorithm will be discussed in a future section.\n\n#### `alternate`\n\n<dl>\n  <dt>flush</dt>\n  <dd>To flush a fiber is to render its output onto the screen.</dd>\n\n  <dt>work-in-progress</dt>\n  <dd>A fiber that has not yet completed; conceptually, a stack frame which has not yet returned.</dd>\n</dl>\n\nAt any time, a component instance has at most two fibers that correspond to it: the current, flushed fiber, and the work-in-progress fiber.\n\nThe alternate of the current fiber is the work-in-progress, and the alternate of the work-in-progress is the current fiber.\n\nA fiber's alternate is created lazily using a function called `cloneFiber`. Rather than always creating a new object, `cloneFiber` will attempt to reuse the fiber's alternate if it exists, minimizing allocations.\n\nYou should think of the `alternate` field as an implementation detail, but it pops up often enough in the codebase that it's valuable to discuss it here.\n\n#### `output`\n\n<dl>\n  <dt>host component</dt>\n  <dd>The leaf nodes of a React application. They are specific to the rendering environment (e.g., in a browser app, they are `div`, `span`, etc.). In JSX, they are denoted using lowercase tag names.</dd>\n</dl>\n\nConceptually, the output of a fiber is the return value of a function.\n\nEvery fiber eventually has output, but output is created only at the leaf nodes by **host components**. The output is then transferred up the tree.\n\nThe output is what is eventually given to the renderer so that it can flush the changes to the rendering environment. It's the renderer's responsibility to define how the output is created and updated.\n\n## Future sections\n\nThat's all there is for now, but this document is nowhere near complete. Future sections will describe the algorithms used throughout the lifecycle of an update. Topics to cover include:\n\n- how the scheduler finds the next unit of work to perform.\n- how priority is tracked and propagated through the fiber tree.\n- how the scheduler knows when to pause and resume work.\n- how work is flushed and marked as complete.\n- how side-effects (such as lifecycle methods) work.\n- what a coroutine is and how it can be used to implement features like context and layout.\n\n## Related Videos\n- [What's Next for React (ReactNext 2016)](https://youtu.be/aV1271hd9ew)",
      "createdTime": "2020-01-03T17:50:46.443Z",
      "source": "https://github.com/acdlite/react-fiber-architecture/blob/master/README.md"
    },
    {
      "id": 17,
      "title": "jQuery",
      "subTitle": "",
      "image": "https://images.unsplash.com/photo-1547394765-185e1e68f34e",
      "content": "New Wave JavaScript\n==================================================\n\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fjquery%2Fjquery.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fjquery%2Fjquery?ref=badge_shield)\n\n[![Gitter](https://badges.gitter.im/jquery/jquery.svg)](https://gitter.im/jquery/jquery?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\nContribution Guides\n--------------------------------------\n\nIn the spirit of open source software development, jQuery always encourages community code contribution. To help you get started and before you jump into writing code, be sure to read these important contribution guidelines thoroughly:\n\n1. [Getting Involved](https://contribute.jquery.org/)\n2. [Core Style Guide](https://contribute.jquery.org/style-guide/js/)\n3. [Writing Code for jQuery Foundation Projects](https://contribute.jquery.org/code/)\n\n\nEnvironments in which to use jQuery\n--------------------------------------\n\n- [Browser support](https://jquery.com/browser-support/)\n- jQuery also supports Node, browser extensions, and other non-browser environments.\n\n\nWhat you need to build your own jQuery\n--------------------------------------\n\nTo build jQuery, you need to have the latest Node.js/npm and git 1.7 or later. Earlier versions might work, but are not supported.\n\nFor Windows, you have to download and install [git](https://git-scm.com/downloads) and [Node.js](https://nodejs.org/en/download/).\n\nmacOS users should install [Homebrew](https://brew.sh/). Once Homebrew is installed, run `brew install git` to install git,\nand `brew install node` to install Node.js.\n\nLinux/BSD users should use their appropriate package managers to install git and Node.js, or build from source\nif you swing that way. Easy-peasy.\n\n\nHow to build your own jQuery\n----------------------------\n\nFirst, [clone the jQuery git repo](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository).\n\nThen, enter the jquery directory and run the build script:\n```bash\ncd jquery && npm run build\n```\nThe built version of jQuery will be put in the `dist/` subdirectory, along with the minified copy and associated map file.\n\nIf you want to create custom build or help with jQuery development, it would be better to install [grunt command line interface](https://github.com/gruntjs/grunt-cli) as a global package:\n\n```\nnpm install -g grunt-cli\n```\nMake sure you have `grunt` installed by testing:\n```\ngrunt -V\n```\n\nNow by running the `grunt` command, in the jquery directory, you can build a full version of jQuery, just like with an `npm run build` command:\n```\ngrunt\n```\n\nThere are many other tasks available for jQuery Core:\n```\ngrunt -help\n```\n\n### Modules\n\nSpecial builds can be created that exclude subsets of jQuery functionality.\nThis allows for smaller custom builds when the builder is certain that those parts of jQuery are not being used.\nFor example, an app that only used JSONP for `$.ajax()` and did not need to calculate offsets or positions of elements could exclude the offset and ajax/xhr modules.\n\nAny module may be excluded except for `core`, and `selector`. To exclude a module, pass its path relative to the `src` folder (without the `.js` extension).\n\nSome example modules that can be excluded are:\n\n- **ajax**: All AJAX functionality: `$.ajax()`, `$.get()`, `$.post()`, `$.ajaxSetup()`, `.load()`, transports, and ajax event shorthands such as `.ajaxStart()`.\n- **ajax/xhr**: The XMLHTTPRequest AJAX transport only.\n- **ajax/script**: The `<script>` AJAX transport only; used to retrieve scripts.\n- **ajax/jsonp**: The JSONP AJAX transport only; depends on the ajax/script transport.\n- **css**: The `.css()` method. Also removes **all** modules depending on css (including **effects**, **dimensions**, and **offset**).\n- **css/showHide**:  Non-animated `.show()`, `.hide()` and `.toggle()`; can be excluded if you use classes or explicit `.css()` calls to set the `display` property. Also removes the **effects** module.\n- **deprecated**: Methods documented as deprecated but not yet removed.\n- **dimensions**: The `.width()` and `.height()` methods, including `inner-` and `outer-` variations.\n- **effects**: The `.animate()` method and its shorthands such as `.slideUp()` or `.hide(\"slow\")`.\n- **event**: The `.on()` and `.off()` methods and all event functionality. Also removes `event/alias`.\n- **event/alias**: All event attaching/triggering shorthands like `.click()` or `.mouseover()`.\n- **event/trigger**: The `.trigger()` and `.triggerHandler()` methods. Used by the **alias** module.\n- **offset**: The `.offset()`, `.position()`, `.offsetParent()`, `.scrollLeft()`, and `.scrollTop()` methods.\n- **wrap**: The `.wrap()`, `.wrapAll()`, `.wrapInner()`, and `.unwrap()` methods.\n- **core/ready**: Exclude the ready module if you place your scripts at the end of the body. Any ready callbacks bound with `jQuery()` will simply be called immediately. However, `jQuery(document).ready()` will not be a function and `.on(\"ready\", ...)` or similar will not be triggered.\n- **deferred**: Exclude jQuery.Deferred. This also removes jQuery.Callbacks. *Note* that modules that depend on jQuery.Deferred(AJAX, effects, core/ready) will not be removed and will still expect jQuery.Deferred to be there. Include your own jQuery.Deferred implementation or exclude those modules as well (`grunt custom:-deferred,-ajax,-effects,-core/ready`).\n- **exports/global**: Exclude the attachment of global jQuery variables ($ and jQuery) to the window.\n- **exports/amd**: Exclude the AMD definition.\n\nThe build process shows a message for each dependent module it excludes or includes.\n\n##### AMD name\n\nAs an option, you can set the module name for jQuery's AMD definition. By default, it is set to \"jquery\", which plays nicely with plugins and third-party libraries, but there may be cases where you'd like to change this. Simply set the `\"amd\"` option:\n\n```bash\ngrunt custom --amd=\"custom-name\"\n```\n\nOr, to define anonymously, set the name to an empty string.\n\n```bash\ngrunt custom --amd=\"\"\n```\n\n#### Custom Build Examples\n\nTo create a custom build, first check out the version:\n\n```bash\ngit pull; git checkout VERSION\n```\n\nWhere VERSION is the version you want to customize. Then, make sure all Node dependencies are installed:\n\n```bash\nnpm install\n```\n\nCreate the custom build using the `grunt custom` option, listing the modules to be excluded.\n\nExclude all **ajax** functionality:\n\n```bash\ngrunt custom:-ajax\n```\n\nExcluding **css** removes modules depending on CSS: **effects**, **offset**, **dimensions**.\n\n```bash\ngrunt custom:-css\n```\n\nExclude a bunch of modules:\n\n```bash\ngrunt custom:-ajax,-css,-deprecated,-dimensions,-effects,-event/alias,-offset,-wrap\n```\n\nFor questions or requests regarding custom builds, please start a thread on the [Developing jQuery Core](https://forum.jquery.com/developing-jquery-core) section of the forum. Due to the combinatorics and custom nature of these builds, they are not regularly tested in jQuery's unit test process.\n\nRunning the Unit Tests\n--------------------------------------\n\nMake sure you have the necessary dependencies:\n\n```bash\nnpm install\n```\n\nStart `grunt watch` or `npm start` to auto-build jQuery as you work:\n\n```bash\ngrunt watch\n```\n\n\nRun the unit tests with a local server that supports PHP. Ensure that you run the site from the root directory, not the \"test\" directory. No database is required. Pre-configured php local servers are available for Windows and Mac. Here are some options:\n\n- Windows: [WAMP download](http://www.wampserver.com/en/)\n- Mac: [MAMP download](https://www.mamp.info/en/downloads/)\n- Linux: [Setting up LAMP](https://www.linux.com/learn/tutorials/288158-easy-lamp-server-installation)\n- [Mongoose (most platforms)](https://code.google.com/p/mongoose/)\n\n\n\n\nBuilding to a different directory\n---------------------------------\n\nTo copy the built jQuery files from `/dist` to another directory:\n\n```bash\ngrunt && grunt dist:/path/to/special/location/\n```\nWith this example, the output files would be:\n\n```bash\n/path/to/special/location/jquery.js\n/path/to/special/location/jquery.min.js\n```\n\nTo add a permanent copy destination, create a file in `dist/` called \".destination.json\". Inside the file, paste and customize the following:\n\n```json\n\n{\n  \"/Absolute/path/to/other/destination\": true\n}\n```\n\nAdditionally, both methods can be combined.\n\n\n\nEssential Git\n-------------\n\nAs the source code is handled by the Git version control system, it's useful to know some features used.\n\n### Cleaning ###\n\nIf you want to purge your working directory back to the status of upstream, the following commands can be used (remember everything you've worked on is gone after these):\n\n```bash\ngit reset --hard upstream/master\ngit clean -fdx\n```\n\n### Rebasing ###\n\nFor feature/topic branches, you should always use the `--rebase` flag to `git pull`, or if you are usually handling many temporary \"to be in a github pull request\" branches, run the following to automate this:\n\n```bash\ngit config branch.autosetuprebase local\n```\n(see `man git-config` for more information)\n\n### Handling merge conflicts ###\n\nIf you're getting merge conflicts when merging, instead of editing the conflicted files manually, you can use the feature\n`git mergetool`. Even though the default tool `xxdiff` looks awful/old, it's rather useful.\n\nThe following are some commands that can be used there:\n\n* `Ctrl + Alt + M` - automerge as much as possible\n* `b` - jump to next merge conflict\n* `s` - change the order of the conflicted lines\n* `u` - undo a merge\n* `left mouse button` - mark a block to be the winner\n* `middle mouse button` - mark a line to be the winner\n* `Ctrl + S` - save\n* `Ctrl + Q` - quit\n\n[QUnit](https://api.qunitjs.com) Reference\n-----------------\n\n### Test methods ###\n\n```js\nexpect( numAssertions );\nstop();\nstart();\n```\n\n\n*Note*: QUnit's eventual addition of an argument to stop/start is ignored in this test suite so that start and stop can be passed as callbacks without worrying about their parameters.\n\n### Test assertions ###\n\n\n```js\nok( value, [message] );\nequal( actual, expected, [message] );\nnotEqual( actual, expected, [message] );\ndeepEqual( actual, expected, [message] );\nnotDeepEqual( actual, expected, [message] );\nstrictEqual( actual, expected, [message] );\nnotStrictEqual( actual, expected, [message] );\nthrows( block, [expected], [message] );\n```\n\n\nTest Suite Convenience Methods Reference (See [test/data/testinit.js](https://github.com/jquery/jquery/blob/master/test/data/testinit.js))\n------------------------------\n\n### Returns an array of elements with the given IDs ###\n\n```js\nq( ... );\n```\n\nExample:\n\n```js\nq(\"main\", \"foo\", \"bar\");\n\n=> [ div#main, span#foo, input#bar ]\n```\n\n### Asserts that a selection matches the given IDs ###\n\n```js\nt( testName, selector, [ \"array\", \"of\", \"ids\" ] );\n```\n\nExample:\n\n```js\nt(\"Check for something\", \"//[a]\", [\"foo\", \"bar\"]);\n```\n\n\n\n### Fires a native DOM event without going through jQuery ###\n\n```js\nfireNative( node, eventType )\n```\n\nExample:\n\n```js\nfireNative( jQuery(\"#elem\")[0], \"click\" );\n```\n\n### Add random number to url to stop caching ###\n\n```js\nurl( \"some/url\" );\n```\n\nExample:\n\n```js\nurl(\"index.html\");\n\n=> \"data/index.html?10538358428943\"\n\n\nurl(\"mock.php?foo=bar\");\n\n=> \"data/mock.php?foo=bar&10538358345554\"\n```\n\n\n### Run tests in an iframe ###\n\nSome tests may require a document other than the standard test fixture, and\nthese can be run in a separate iframe. The actual test code and assertions\nremain in jQuery's main test files; only the minimal test fixture markup\nand setup code should be placed in the iframe file.\n\n```js\ntestIframe( testName, fileName,\n  function testCallback(\n      assert, jQuery, window, document,\n\t  [ additional args ] ) {\n\t...\n  } );\n```\n\nThis loads a page, constructing a url with fileName `\"./data/\" + fileName`.\nThe iframed page determines when the callback occurs in the test by\nincluding the \"/test/data/iframeTest.js\" script and calling\n`startIframeTest( [ additional args ] )` when appropriate. Often this\nwill be after either document ready or `window.onload` fires.\n\nThe `testCallback` receives the QUnit `assert` object created by `testIframe`\nfor this test, followed by the global `jQuery`, `window`, and `document` from\nthe iframe. If the iframe code passes any arguments to `startIframeTest`,\nthey follow the `document` argument.\n\n\nQuestions?\n----------\n\nIf you have any questions, please feel free to ask on the\n[Developing jQuery Core forum](https://forum.jquery.com/developing-jquery-core) or in #jquery on irc.freenode.net.",
      "createdTime": "2020-01-02T22:11:11.443Z",
      "source": "https://github.com/jquery/jquery/blob/master/README.md"
    },
    {
      "id": 16,
      "title": "How to Contribute",
      "subTitle": "",
      "image": "https://images.unsplash.com/photo-1496181133206-80ce9b88a853",
      "content": "---\nid: how-to-contribute\ntitle: How to Contribute\nlayout: contributing\npermalink: docs/how-to-contribute.html\nnext: codebase-overview.html\nredirect_from:\n  - \"contributing/how-to-contribute.html\"\n  - \"tips/introduction.html\"\n---\n\nReact is one of Facebook's first open source projects that is both under very active development and is also being used to ship code to everybody on [facebook.com](https://www.facebook.com). We're still working out the kinks to make contributing to this project as easy and transparent as possible, but we're not quite there yet. Hopefully this document makes the process for contributing clear and answers some questions that you may have.\n\n### [Code of Conduct](https://github.com/facebook/react/blob/master/CODE_OF_CONDUCT.md) {#code-of-conduct}\n\nFacebook has adopted the [Contributor Covenant](https://www.contributor-covenant.org/) as its Code of Conduct, and we expect project participants to adhere to it. Please read [the full text](https://github.com/facebook/react/blob/master/CODE_OF_CONDUCT.md) so that you can understand what actions will and will not be tolerated.\n\n### Open Development {#open-development}\n\nAll work on React happens directly on [GitHub](https://github.com/facebook/react). Both core team members and external contributors send pull requests which go through the same review process.\n\n### Semantic Versioning {#semantic-versioning}\n\nReact follows [semantic versioning](https://semver.org/). We release patch versions for critical bugfixes, minor versions for new features or non-essential changes, and major versions for any breaking changes. When we make breaking changes, we also introduce deprecation warnings in a minor version so that our users learn about the upcoming changes and migrate their code in advance. Learn more about our commitment to stability and incremental migration in [our versioning policy](https://reactjs.org/docs/faq-versioning.html).\n\nEvery significant change is documented in the [changelog file](https://github.com/facebook/react/blob/master/CHANGELOG.md).\n\n### Branch Organization {#branch-organization}\n\nSubmit all changes directly to the [`master branch`](https://github.com/facebook/react/tree/master). We don't use separate branches for development or for upcoming releases. We do our best to keep `master` in good shape, with all tests passing.\n\nCode that lands in `master` must be compatible with the latest stable release. It may contain additional features, but no breaking changes. We should be able to release a new minor version from the tip of `master` at any time.\n\n### Feature Flags {#feature-flags}\n\nTo keep the `master` branch in a releasable state, breaking changes and experimental features must be gated behind a feature flag.\n\nFeature flags are defined in [`packages/shared/ReactFeatureFlags.js`](https://github.com/facebook/react/blob/master/packages/shared/ReactFeatureFlags.js). Some builds of React may enable different sets of feature flags; for example, the React Native build may be configured differently than React DOM. These flags are found in [`packages/shared/forks`](https://github.com/facebook/react/tree/master/packages/shared/forks). Feature flags are statically typed by Flow, so you can run `yarn flow` to confirm that you've updated all the necessary files.\n\nReact's build system will strip out disabled feature branches before publishing. A continuous integration job runs on every commit to check for changes in bundle size. You can use the change in size as a signal that a feature was gated correctly.\n\n### Bugs {#bugs}\n\n#### Where to Find Known Issues {#where-to-find-known-issues}\n\nWe are using [GitHub Issues](https://github.com/facebook/react/issues) for our public bugs. We keep a close eye on this and try to make it clear when we have an internal fix in progress. Before filing a new task, try to make sure your problem doesn't already exist.\n\n#### Reporting New Issues {#reporting-new-issues}\n\nThe best way to get your bug fixed is to provide a reduced test case. This [JSFiddle template](https://jsfiddle.net/Luktwrdm/) is a great starting point.\n\n#### Security Bugs {#security-bugs}\n\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe disclosure of security bugs. With that in mind, please do not file public issues; go through the process outlined on that page.\n\n### How to Get in Touch {#how-to-get-in-touch}\n\n* IRC: [#reactjs on freenode](https://webchat.freenode.net/?channels=reactjs)\n* [Discussion forums](https://reactjs.org/community/support.html#popular-discussion-forums)\n\nThere is also [an active community of React users on the Discord chat platform](https://www.reactiflux.com/) in case you need help with React.\n\n### Proposing a Change {#proposing-a-change}\n\nIf you intend to change the public API, or make any non-trivial changes to the implementation, we recommend [filing an issue](https://github.com/facebook/react/issues/new). This lets us reach an agreement on your proposal before you put significant effort into it.\n\nIf you're only fixing a bug, it's fine to submit a pull request right away but we still recommend to file an issue detailing what you're fixing. This is helpful in case we don't accept that specific fix but want to keep track of the issue.\n\n### Your First Pull Request {#your-first-pull-request}\n\nWorking on your first Pull Request? You can learn how from this free video series:\n\n**[How to Contribute to an Open Source Project on GitHub](https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github)**\n\nTo help you get your feet wet and get you familiar with our contribution process, we have a list of **[good first issues](https://github.com/facebook/react/issues?q=is:open+is:issue+label:\"good+first+issue\")** that contain bugs that have a relatively limited scope. This is a great place to get started.\n\nIf you decide to fix an issue, please be sure to check the comment thread in case somebody is already working on a fix. If nobody is working on it at the moment, please leave a comment stating that you intend to work on it so other people don't accidentally duplicate your effort.\n\nIf somebody claims an issue but doesn't follow up for more than two weeks, it's fine to take it over but you should still leave a comment.\n\n### Sending a Pull Request {#sending-a-pull-request}\n\nThe core team is monitoring for pull requests. We will review your pull request and either merge it, request changes to it, or close it with an explanation. For API changes we may need to fix our internal uses at Facebook.com, which could cause some delay. We'll do our best to provide updates and feedback throughout the process.\n\n**Before submitting a pull request,** please make sure the following is done:\n\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\n2. Run `yarn` in the repository root.\n3. If you've fixed a bug or added code that should be tested, add tests!\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\n10. If you haven't already, complete the CLA.\n\n### Contributor License Agreement (CLA) {#contributor-license-agreement-cla}\n\nIn order to accept your pull request, we need you to submit a CLA. You only need to do this once, so if you've done this for another Facebook open source project, you're good to go. If you are submitting a pull request for the first time, just let us know that you have completed the CLA and we can cross-check with your GitHub username.\n\n**[Complete your CLA here.](https://code.facebook.com/cla)**\n\n### Contribution Prerequisites {#contribution-prerequisites}\n\n* You have [Node](https://nodejs.org) installed at v8.0.0+ and [Yarn](https://yarnpkg.com/en/) at v1.2.0+.\n* You have `gcc` installed or are comfortable installing a compiler if needed. Some of our dependencies may require a compilation step. On OS X, the Xcode Command Line Tools will cover this. On Ubuntu, `apt-get install build-essential` will install the required packages. Similar commands should work on other Linux distros. Windows will require some additional steps, see the [`node-gyp` installation instructions](https://github.com/nodejs/node-gyp#installation) for details.\n* You are familiar with Git.\n\n### Development Workflow {#development-workflow}\n\nAfter cloning React, run `yarn` to fetch its dependencies.\nThen, you can run several commands:\n\n* `yarn lint` checks the code style.\n* `yarn linc` is like `yarn lint` but faster because it only checks files that differ in your branch.\n* `yarn test` runs the complete test suite.\n* `yarn test --watch` runs an interactive test watcher.\n* `yarn test <pattern>` runs tests with matching filenames.\n* `yarn test-prod` runs tests in the production environment. It supports all the same options as `yarn test`.\n* `yarn debug-test` is just like `yarn test` but with a debugger. Open `chrome://inspect` and press \"Inspect\".\n* `yarn flow` runs the [Flow](https://flowtype.org/) typechecks.\n* `yarn build` creates a `build` folder with all the packages.\n* `yarn build react/index,react-dom/index --type=UMD` creates UMD builds of just React and ReactDOM.\n\nWe recommend running `yarn test` (or its variations above) to make sure you don't introduce any regressions as you work on your change. However it can be handy to try your build of React in a real project.\n\nFirst, run `yarn build`. This will produce pre-built bundles in `build` folder, as well as prepare npm packages inside `build/packages`.\n\nThe easiest way to try your changes is to run `yarn build react/index,react-dom/index --type=UMD` and then open `fixtures/packaging/babel-standalone/dev.html`. This file already uses `react.development.js` from the `build` folder so it will pick up your changes.\n\nIf you want to try your changes in your existing React project, you may copy `build/dist/react.development.js`, `build/dist/react-dom.development.js`, or any other build products into your app and use them instead of the stable version. If your project uses React from npm, you may delete `react` and `react-dom` in its dependencies and use `yarn link` to point them to your local `build` folder:\n\n```sh\ncd ~/path_to_your_react_clone/build/node_modules/react\nyarn link\ncd ~/path_to_your_react_clone/build/node_modules/react-dom\nyarn link\ncd /path/to/your/project\nyarn link react react-dom\n```\n\nEvery time you run `yarn build` in the React folder, the updated versions will appear in your project's `node_modules`. You can then rebuild your project to try your changes.\n\nWe still require that your pull request contains unit tests for any new functionality. This way we can ensure that we don't break your code in the future.\n\n### Style Guide {#style-guide}\n\nWe use an automatic code formatter called [Prettier](https://prettier.io/).\nRun `yarn prettier` after making any changes to the code.\n\nThen, our linter will catch most issues that may exist in your code.\nYou can check the status of your code styling by simply running `yarn linc`.\n\nHowever, there are still some styles that the linter cannot pick up. If you are unsure about something, looking at [Airbnb's Style Guide](https://github.com/airbnb/javascript) will guide you in the right direction.\n\n### Introductory Video {#introductory-video}\n\nYou may be interested in watching [this short video](https://www.youtube.com/watch?v=wUpPsEcGsg8) (26 mins) which gives an introduction on how to contribute to React.\n\n#### Video highlights: {#video-highlights}\n- [4:12](https://youtu.be/wUpPsEcGsg8?t=4m12s) - Building and testing React locally\n- [6:07](https://youtu.be/wUpPsEcGsg8?t=6m7s) - Creating and sending pull requests\n- [8:25](https://youtu.be/wUpPsEcGsg8?t=8m25s) - Organizing code\n- [14:43](https://youtu.be/wUpPsEcGsg8?t=14m43s) - React npm registry\n- [19:15](https://youtu.be/wUpPsEcGsg8?t=19m15s) - Adding new React features\n\nFor a realistic overview of what it _feels_ like to contribute to React for the first time, check out [this entertaining ReactNYC talk](https://www.youtube.com/watch?v=GWCcZ6fnpn4).\n\n### Request for Comments (RFC) {#request-for-comments-rfc}\n\nMany changes, including bug fixes and documentation improvements can be implemented and reviewed via the normal GitHub pull request workflow.\n\nSome changes though are \"substantial\", and we ask that these be put through a bit of a design process and produce a consensus among the React core team.\n\nThe \"RFC\" (request for comments) process is intended to provide a consistent and controlled path for new features to enter the project. You can contribute by visiting the [rfcs repository](https://github.com/reactjs/rfcs).\n\n### License {#license}\n\nBy contributing to React, you agree that your contributions will be licensed under its MIT license.\n\n### What Next? {#what-next}\n\nRead the [next section](/docs/codebase-overview.html) to learn how the codebase is organized.",
      "createdTime": "2020-01-02T15:55:46.443Z",
      "source": "https://github.com/reactjs/reactjs.org/blob/master/content/docs/how-to-contribute.md"
    },
    {
      "id": 15,
      "title": "React How to",
      "subTitle": "",
      "image": "https://images.unsplash.com/photo-1525547719571-a2d4ac8945e2",
      "content": "# react-howto\n\nIf you’re new to React (or frontend in general) you may find the ecosystem confusing. There are a few reasons for this.\n\n* React has historically been targeted at early-adopters and experts\n* Facebook only open-sources what it actually uses, so it doesn’t focus on tooling for smaller-than-Facebook projects\n* There’s a lot of bad marketing masquerading as React guides\n\nThroughout this document, I’ll assume you’ve built a web page with HTML, CSS and JavaScript.\n\n## Why should you listen to me?\n\nThere’s a ton of conflicting advice about React out there; why listen to me?\n\nI was one of the original members of the Facebook team that built and open-sourced React. I’m no longer at Facebook and I’m now at a small startup, so I have a non-Facebook perspective as well.\n\n## How to tackle the React ecosystem\n\nAll software is built on a stack of technologies, and you need to understand enough of that stack to build your app. The reason why the React ecosystem of tooling seems overwhelming is because it’s always explained in the wrong order.\n\nYou should learn, in this order, **without skipping ahead or learning concurrently**:\n\n* [React itself](#learning-react-itself)\n* [`npm`](#learning-npm)\n* [JavaScript “bundlers”](#learning-javascript-bundlers)\n* [ES6](#learning-es6)\n* [Routing](#learning-routing)\n* [Flux](#learning-flux)\n\n**You don't need to learn all of these to be productive with React.** Only move to the next step if you have a problem that needs to be solved.\n\nAdditionally, there are a few topics that are often mentioned in the React community that are \"bleeding edge\". The topics below are interesting, but they're difficult to understand, are far less popular than the above topics and **aren't required for most apps**.\n* [Inline styles](#learning-inline-styles)\n* [Server rendering](#learning-server-rendering)\n* [Immutable.js](#learning-immutablejs)\n* [Relay, Falcor, etc](#learning-relay-falcor-etc)\n\n## Learning React itself\n\nIt’s a common misconception that you need to waste a lot of time setting up tooling to start to learn React. In the official documentation you’ll find a [copy-paste HTML template](https://facebook.github.io/react/docs/getting-started.html#quick-start-without-npm) that you can save in an `.html` file and get started right away. **No tooling is required for this step, and don’t start learning extra tooling until you’re comfortable with React basics.**\n\nI still think the easiest way to learn React is [the official tutorial](https://facebook.github.io/react/docs/tutorial.html).\n\n## Learning `npm`\n\n`npm` is the Node.js package manager and is the most popular way front-end engineers and designers share JavaScript code. It includes a module system called `CommonJS` and lets you install command-line tools written in JavaScript. Read [this post](http://0fps.net/2013/01/22/commonjs-why-and-how/) for background on why `CommonJS` is necessary for browsers, or the [CommonJS Spec Wiki](http://wiki.commonjs.org/wiki/Introduction) for more on the `CommonJS` API.\n\nMost reusable components, libraries and tools in the React ecosystem are available as `CommonJS` modules and are installed with `npm`.\n\n## Learning JavaScript bundlers\n\nFor a number of good technical reasons `CommonJS` modules (i.e. everything in `npm`) cannot be used natively in the browser. You need a JavaScript “bundler” to “bundle” these modules into `.js` files that you can include in your web page with a `<script>` tag.\n\nExamples of JavaScript bundlers include `webpack` and `browserify`. Both are good choices, but I prefer `webpack` since it has a lot of features that make development of large apps easier. Since its documentation can be confusing, I have a [plug-and-play template for getting started](https://github.com/petehunt/react-webpack-template) and I wrote a [how-to guide for webpack](https://github.com/petehunt/webpack-howto) for more complex use cases.\n\nReact also now offers [an officially supported CLI tool called Create React App](https://github.com/facebookincubator/create-react-app). It lets you create React projects powered by `webpack` without any configuration. It has its limitations, but it can serve as a great starting point, and its updates will add more features over time. It also offers an \"ejection\" feature that copies all configs and dependencies into your project so you have full control over them.\n\nOne thing to keep in mind: `CommonJS` uses the `require()` function to import modules, so a lot of people get confused and think that it has something to do with a project called `require.js`. For a number of technical reasons, I would suggest that you avoid `require.js`. It’s also not very popular in the React ecosystem.\n\n## Learning ES6\n\nOutside of JSX (which you learned in the React tutorial), you may see some funny syntax in React examples. This is called ES6, and it’s the latest version of JavaScript so you may not have learned it yet. Since it’s so new, it’s not supported in browsers yet, but your bundler can translate it for you with the proper configuration.\n\nIf you just want to get things done with React, **you can skip learning ES6**, or try to pick it up along the way.\n\nYou may see some talk about ES6 classes being the preferred way to create React components. This is untrue. Most people (including Facebook) are using `React.createClass()`.\n\n## Learning routing\n\n“Single-page applications” are all the rage these days. These are web pages that load once, and when the user clicks on a link or a button, JavaScript running on the page updates the address bar, but the web page is not refreshed. Management of the address bar is done by something called a **router**.\n\nThe most popular router in the React ecosystem is [react-router](https://github.com/rackt/react-router). If you’re building a single-page application, use it unless you have a good reason not to.\n\n**Don’t use a router if you aren’t building a single-page application**. Most projects start out as smaller components inside of a larger application anyway.\n\n## Learning Flux\n\nYou’ve probably heard of Flux. There’s a *ton* of misinformation about Flux out there.\n\nA lot of people sit down to build an app and want to define their data model, and they think they need to use Flux to do it. **This is the wrong way to adopt Flux. Flux should only be added once many components have already been built.**\n\nReact components are arranged in a hierarchy. Most of the time, your data model also follows a hierarchy. In these situations Flux doesn’t buy you much. Sometimes, however, your data model is not hierarchical. When your React components start to receive `props` that feel extraneous, or you have a small number of components starting to get very complex, then you might want to look into Flux.\n\n**You’ll know when you need Flux. If you aren’t sure if you need it, you don’t need it.**\n\nIf you have decided to use Flux, the most popular and well-documented Flux library is [Redux](http://redux.js.org/). There are *a lot* of alternatives out there, and you’ll be tempted to evaluate lots of them, but my advice is to just stick with the most popular one.\n\n## Learning inline styles\n\nPre-React, a lot of people reused CSS styles with complicated style sheets built by preprocessors like SASS. Since React makes writing reusable components easy, your stylesheets can be less complicated. Many in the community (including myself) are experimenting with getting rid of stylesheets altogether.\n\nThis is a fairly crazy idea for a number of reasons. It makes media queries more difficult, and it's possible that there are  performance limitations using this technique. **When starting out with React, just style things the way you normally would.**\n\nOnce you've got a feel for how React works, you can look at alternate techniques. One popular one is [BEM](https://en.bem.info/). I recommend phasing out your CSS preprocessor, since React gives you a more powerful way to reuse styles (by reusing components) and your JavaScript bundler can generate more efficient stylesheets for you (I gave [a talk about this at OSCON](https://www.youtube.com/watch?v=VkTCL6Nqm6Y)). With that said, React, like any other JavaScript library, will work just fine with a CSS preprocessor.\n\nAlternatively, you can also use [CSS Modules](http://glenmaddern.com/articles/css-modules), more specifically [react-css-modules](https://github.com/gajus/react-css-modules). With CSS Modules you'll still write CSS (or SASS/LESS/Stylus), but you can manage and compose your CSS files like you'd do with inline styles in React. And you don't need to worry about managing your class names using methodologies like BEM, as this will be handled for you under the hood by the module system.\n\n## Learning server rendering\n\nServer rendering is often called \"universal\" or \"isomorphic\" JS. It means that you can take your React components and render them to static HTML on the server. This improves initial startup performance because the user does not need to wait for JS to download in order to see the initial UI, and React can re-use the server-rendered HTML so it doesn't need to generate it client-side.\n\nYou need server rendering if you notice that your initial render is too slow or if you want to improve your search engine ranking. While it's true that Google now indexes client-rendered content, as of January 2016 every time it's been measured it's been shown to negatively affect ranking, potentially because of the performance penalty of client-side rendering.\n\nServer rendering still requires a lot of tooling to get right. Since it transparently supports React components written without server rendering in mind, you should build your app first and worry about server rendering later. You won't need to rewrite all of your components to support it.\n\n## Learning Immutable.js\n\n[Immutable.js](https://facebook.github.io/immutable-js/) provides a set of data structures that can help to solve certain performance issues when building React apps. It's a great library, and you'll probably use it a lot in your apps moving forward, but it's completely unnecessary until you have an appreciation of the performance implications. \n\n## Learning Relay, Falcor etc\n\nThese are technologies that help you reduce the number of AJAX requests. They’re still very cutting-edge, so if you don’t have a problem with too many AJAX requests, you don’t need Relay or Falcor.",
      "createdTime": "2020-01-02T10:09:46.443Z",
      "source": "https://github.com/petehunt/react-howto/blob/master/README.md"
    },
    {
      "id": 14,
      "title": "리엑트의 첫걸음",
      "subTitle": "",
      "image": "https://images.unsplash.com/photo-1454165804606-c3d57bc86b40",
      "content": "# react 첫걸음\n\n당신이 React(혹은 프론트엔드개발) 초심자라면 생태계가 혼란스럽다는 사실을 발견할 것입니다. 거기에는 몇 가지 이유가 있습니다.\n\n* React는 역사적으로 얼리어답터와 전문가 집단을 겨냥해서 만들어졌습니다.\n* Facebook은 실제로 사용하는 것만을 오픈 소스화 합니다, 그래서 페이스북보다 작은 프로젝트들을 위해 오픈 소스를 다듬어 가는 데 집중하지 않습니다.\n* React 개발 지침이라고 자처하지만 홍보를 위한 거짓부렁이 많습니다.\n\n예상하건데, 이 글을 읽다 보면 당신은 HTML, CSS 그리고 JavaScript로 페이지를 작성할 것입니다.\n\n## 제 얘기를 왜 들어야 할까요?\n\n여기저기 React에 대해서 모순되는 충고들이 차고 넘칩니다; 제 얘기를 왜 들어야 할까요?\n\n저는 Facebook에서 React를 오픈소스화한 팀의 원년멤버였습니다. 지금은 Facebook 에서 나와 작은 스타트업에 있습니다. 그래서 Facebook 이 아닌 사람들의 관점도 잘 알고 있습니다.\n\n## React 생태계와 씨름하는 방법\n\n모든 소프트웨어는 기술의 집합으로 이루어져 있습니다. 그리고 당신이 애플리케이션을 만들기 위해서는 그 기술 요소들을 충분히 이해할 필요가 있습니다. 잘못된 순서로 대부분 이 기술들을 기술되기 때문에 React 생태계의 tooling(자동화 및 툴 개발)이 부담스럽게만 여겨잡니다.\n\n다음과 같은 순서로 배우셔야 합니다. **순서를 뛰어넘거나 동시에 하시면 안됩니다**:\n\n* [React 자체를 배우기](#learning-react-itself)\n* [`npm`](#learning-npm)\n* [JavaScript “번들러”](#learning-javascript-bundlers)\n* [ES6](#learning-es6)\n* [Routing](#learning-routing)\n* [Flux](#learning-flux)\n\n**React를 잘하기 위해서 이 모든 걸 할 필요는 없습니다.** 단지 문제 해결을 위해서만 다음 단계로 이동하세요.\n\n좀더 추가하자면, 안정적이지는 않지만 React 커뮤니티에서 종종 언급되는 (소위 \"bleeding edge\") 토픽들이 몇 가지 있습니다. 아래 보이는 토픽들은 흥미롭기는 하지만, 이해하기 힘들고 앞에 언급된 토픽들에비해 대중적이지 않습니다. 그리고 **대부분의 앱에서는 필요하지 않습니다.**\n* [Inline styles](#learning-inline-styles)\n* [Server rendering](#learning-server-rendering)\n* [Immutable.js](#learning-immutablejs)\n* [Relay, Falcor, etc](#learning-relay-falcor-etc)\n\n## React 자체를 배우기\n\n일반적으로 잘못 알려진 이야기가 React를 배우기 시작하기 위한 세팅시간이 많이 걸린다는 것입니다. 공식문서에서 ([복사-붙여넣기 용 HTML template](https://facebook.github.io/react/docs/getting-started.html#quick-start-without-npm)) 을 이용해서 `.html` 파일로 저장해서 바로 시작할 수 있습니다. **이 단계에서는 어떤 툴 및 세팅이 필요없고 기본 React에 익숙해 질때까지는 다른 툴 및 세팅을 시작하지 마십시오**\n\n저는 아직도 React를 배우는 가장 쉬운 방법은 [공식문서](https://facebook.github.io/react/docs/tutorial.html) 라고 생각합니다.\n\n## `npm` 배우기\n\n`npm`은 Node.js용 패키지 관리자입니다. 프론트엔드 엔지니어와 디자이너들이 Javascript 코드를 공유하는 가장 보편적인 방법입니다. `CommonJS`라고 불리는 모듈 시스템을 포함하고 있으며 Javacript 로 작성된 CLI(command-line interface) 기반으로 모듈을 설치 할 수 있습니다. 브라우저를 위해 `CommonJS` 가 왜 필요한지에 대한 배경을 알기 위해서는 [이 글](http://0fps.net/2013/01/22/commonjs-why-and-how/) 을 읽어보시고, `CommonJS` API에 대한 이해를 위해서는 [CommonJS Spec Wiki](http://wiki.commonjs.org/wiki/Introduction) 를 읽어보십시오.\n\n대부분의 React 생태계의 재사용 가능한 컴포넌트, 라이브러리, 툴은 `CommonJS` 모듈을 통해 사용가능하고 `npm`으로 설치됩니다.\n\n## JavaScript 번들러 배우기\n\n몇가지 많은 기술적 이유들 때문에 `CommonJS` 모듈 (`npm` 에 있는 모든 모듈)들은 브라우저에서 그대로 사용할 수 없습니다. 이 모듈들을 웹페이지의 `<script>` 태그에 포함된 `.js` 파일들을 포함하기 위해서는 Javascript 번들러가 필요합니다.\n\nJavascript 번들러의 예를 들자면 `webpack` 과 `browserify`가 있습니다. 모두 좋은 선택입니다. 하지만 저는 큰 애플리케이션의 개발을 쉽게 도와주는 기능이 많은 `webpack` 을 선호합니다. 문서화가 좀 헷갈린다면 [개발 시작을 위한 플러그앤 플레이 템플릿](https://github.com/petehunt/react-webpack-template)이 있고, 조금 더 복잡한 경우에는 제가 작성한 [webpack 사용기](https://github.com/petehunt/webpack-howto)도 있습니다.\n\n명심할 점 : `CommonJS`는 `require()` 함수를 모듈 임포트에 사용합니다. 그래서 많은 사람들이 `require.js`로 불리는 프로젝트와 뭔가 해야하는 지 헷갈립니다. 여러가지 기술적 이유로 `require.js`를 쓰지 말것을 추천해 드립니다. React생태계에서도 일반적이지는 않습니다.\n\n## ES6 배우기\n\nReact 예제에서 JSX(React 튜토리얼을 배울때 보던)를 감싸고 있던 코드에서 아마 당신은 재미있는 문법들을 보았을 것입니다. ES6 라고 불리는 이것은 Javascript의 최신버전입니다. 그래서 아직 당신은 이것을 배운적이 없었을 겁니다. 브라우저에서 아직은 완전히 지원되지 않지만, 번들러는 적합한 설정과 함께 브라우저가 이해할 수 있게 변환시켜 줍니다.\n\n만약 당신이 작업을 그저 React를 통해 완수하려면  **ES6배우는 것은 건너뛰거나** 혹은 작업 중에 시도해 볼 수도 있습니다.\n\nReact 컴포넌트를 만들기 위해서 더 선호되는 방법이 ES6라는 이야기를 많이 들었을 수도 있습니다. 사실이 아닙니다. 대부분 사람은 (Facebook 엔지니어 포함) `React.createClass()` 로 클래스를 만듭니다.\n(역자 주. ES6에서는 function 처럼 class 키워드를 통해 생성합니다.)\n\n## routing 배우기\n\n싱글페이지 앱(SPA)은 요즘 일시적인 대 유행입니다. 이들은 한번 페이지를 로딩한 뒤, 사용자가 링크나 버튼을 클릭하면 페이지에서 돌고 있던 javascript 가 주소창을 바꿉니다. 그러나 웹페이지가 갱신되지 않습니다. 주소창의 주소를 관리하는 것은 이른바 **router** 가 관장합니다.\n\nReact 생태계의 가장 유명한 router는 [react-router](https://github.com/rackt/react-router) 입니다. 만약 싱글페이지 앱을 만든다면 쓰면 안 되는 좋은 이유가 없는 한 이용하시면 됩니다.\n\n**싱글페이지앱을 만들지 않는다면 router를 사용하지 마세요***. 대부분 프로젝트는 어쨌든 더 큰 애플리케이션의 안쪽에서 동작하는 작은 컴포넌트로 시작합니다.\n\n## Flux 배우기\n\nFlux를 아마도 들어보셨을 거라고 봅니다. Flux에 대해서는 엄청나게 많은 잘못 알려진 정보들 투성이입니다.\n\n많은 사람이 애플리케이션을 만들고 자신들의 데이터 모델을 정의하기를 원합니다. 그래서 그 일들을 위해 Flux를 사용하기 원합니다. **이것은 Flux를 적용하는 나쁜 방법입니다. Flux는 오직 많은 컴포넌트가 만들어지고 난 뒤 한 번만 더해져야 합니다.**\n\nReact 컴포넌트는 계층적으로 정돈됩니다. 대부분의 경우에, 당신의 데이터 모델은 계층구조를 따릅니다. 이런 상황에서는 Flux가 당신에게 쓸모없습니다. 하지만 때때로 당신의 데이터 모델이 계층적이지 않을 수 있습니다. React 컴포넌트가 본 기능에 충실하지 않은 `props`를 받아야 하는 상황들이 시작된다거나, 작은 컴포넌트들이 매우 복작하게 엉키기 시작한다면 Flux를 고려할 시간입니다.\n\n**당신이 Flux가 필요할때 알게 될 것입니다. 만약 당신이 확실한 필요성이 느껴지지 않는 상태면 사용할 필요 없습니다..**\n\nFlux를 사용하기로 했다면 가장 유명하고 잘 문서화 되어 있는 Flux 라이브러리는 [Redux](http://redux.js.org/)입니다. 대체할 만한 것들은 *많고* 일일이 평가해보고 싶은 생각이 드시겠지만, 제 충고는 일단 가장 유명한 것을 사용해 보는 것입니다.\n\n## 인라인 스타일 배우기\n\nReact가 생겨나기 전에, 많은 사람은 CSS 스타일들을 SASS같은 전처리기로 만들어진 복잡한 스타일 시트와 함께 재사용했습니다. React가 재사용 가능한 컴포넌트를 쉽게 만들 수 있게 한 이후로, 스타일 시트는 다소 복잡함이 줄어들 수 있게 되었습니다. 커뮤니티의 다수(나를 포함해서)들은 스타일시트를 완전히 제거하는 실험들을 하고 있습니다.\n\n이것은 여러 가지 이유를 고려하면 상당히 미친 아이디어 입니다. 이렇게 하면 미디어쿼리가 더 어려워지고 이런 기술을 사용하는 데에는 성능의 한계가 있을 수도 있습니다. **React를 시작할 때에는 style 관련된 것들은 하던데로 진행하십시오**\n\nReact가 어떻게 동작하는지 감이 오고 나면 대체 가능한 기술들을 찾아보게 될 것입니다. 그중 유명한 녀석이 [BEM](https://en.bem.info/)입니다. 단계적으로 CSS 전처리기를 폐지하기를 추천합니다. 왜냐하면, React는 당신에게 스타일들을 재사용할 수 있는 강력한 방법들을 (컴포넌트를 재사용하면서) 제공하기 때문이고 Javascript 번들러는 더 효과적인 방법으로 스타일 시트들을 만들어내기 때문입니다. ( [OSCON에서 제가 한 발표](https://www.youtube.com/watch?v=VkTCL6Nqm6Y) 를 공유합니다.) 보시면 아시겠지만 다른 Javascript 라이브러리와 마찬가지로 CSS 전처리기와 궁합이 좋습니다.\n\n대안으로 [CSS Modules](http://glenmaddern.com/articles/css-modules) 을 사용할 수도 있고, 조금 더 자세하게는 [react-css-modules](https://github.com/gajus/react-css-modules) 를 살펴볼 수도 있습니다. CSS 모듈들과 함께 여전히 CSS (or SASS/LESS/Stylus)를 작성할 수 있지만 React 안의 인라인 스타일로 CSS 파일을 구성할 수 있습니다.  BEM 같은 방법론을 사용한다면 class name을 관리하는 것을 걱정할 필요도 없습니다. 이것은 모듈 시스템안에서 다뤄지기 때문입니다.\n\n## 서버 렌더링 배우기\n\n서버 렌더링은 종종 \"유니버설\" 혹은 \"동형\" 자바스크립트로 불립니다. 이것이 의미하는 바는 React 컴포넌트를 사용해 static HTML을 서버에서 그릴 수 있다는 이야기 입니다. 이렇게 하면 첫화면 UI를 보기위해 JS 파일을 다운받는 시간이 절약되고 React는 서버에서 렌더링한 HTML을 재사용해 클라이언트에서 페이지를 만들 필요가 없기 때문에 페이지 초기 진입 과정의 성능을 개선시켜줍니다.\n\n만약 초기 렌더링 속도가 너무 느리다거나 서치엔진의 순위를 개선하고 싶다면 서버 렌더링이 필요합니다. 구글이 클라이언트 렌더링 콘텐츠에 대해 index를 만드는 것은 사실이지만, 2016년 1월까지는 클라이언트 렌더링의 성능에 대한 패널티 때문에 잠재적으로 검색 순위에 부정적인 영향을 미치는 것으로 측정되었습니다.\n\n서버 렌더링은 제대로 하기 위해서는 아직은 많은 세팅을 필요로 합니다. 서버 렌더링을 염두에 두지 않고 React 컴포넌트는 작성되었기 때문에(투명하게 지원하지만), 일단 애플리케이션을 만들고 서버 렌더링은 이후에 생각해야 합니다. 서버 렌더링을 지원하기 위해 모든 컴포넌트를 새로 짤 필요는 없을 것입니다.\n\n## Immutable.js 배우기\n\n[Immutable.js](https://facebook.github.io/immutable-js/) 는 React 앱을 만들때 발생하는 특정한 성능 이슈를 해결하는 데 도움을 주는 데이터 구조체들의 집합을 제공합니다. 이 훌륭한 라이브러리를 앞으로 많이 사용하게 될것입니다. 하지만 당신이 성능에 미치는 영향의 진가를 알아볼 때까지는 완전히 불필요할 것입니다.\n\n## Relay, Falcor 등등\n\n이 기술들은 AJAX 요청들을 줄여주는 도움을 줄 것입니다. 아직 그것들은 최신 기술에 속하므로 너무 많은 AJAX 요청 때문에 문제가 되는 일이 아니라면 Relay나 Falcor 등은 필요 없습니다.",
      "createdTime": "2020-01-01T11:19:16.443Z",
      "source": "https://github.com/petehunt/react-howto/blob/master/README-ko.md"
    },
    {
      "id": 13,
      "title": "axios",
      "subTitle": "",
      "image": "https://images.unsplash.com/photo-1498050108023-c5249f4df085",
      "content": "# axios\n\nPromise based HTTP client for the browser and node.js\n\n## Features\n\n- Make [XMLHttpRequests](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) from the browser\n- Make [http](http://nodejs.org/api/http.html) requests from node.js\n- Supports the [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) API\n- Intercept request and response\n- Transform request and response data\n- Cancel requests\n- Automatic transforms for JSON data\n- Client side support for protecting against [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)\n\n## Browser Support\n\n![Chrome](https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png) | ![Firefox](https://raw.github.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png) | ![Safari](https://raw.github.com/alrra/browser-logos/master/src/safari/safari_48x48.png) | ![Opera](https://raw.github.com/alrra/browser-logos/master/src/opera/opera_48x48.png) | ![Edge](https://raw.github.com/alrra/browser-logos/master/src/edge/edge_48x48.png) | ![IE](https://raw.github.com/alrra/browser-logos/master/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png) |\n--- | --- | --- | --- | --- | --- |\nLatest ✔ | Latest ✔ | Latest ✔ | Latest ✔ | Latest ✔ | 11 ✔ |\n\n[![Browser Matrix](https://saucelabs.com/open_sauce/build_matrix/axios.svg)](https://saucelabs.com/u/axios)\n\n## Installing\n\nUsing npm:\n\n```bash\n$ npm install axios\n```\n\nUsing bower:\n\n```bash\n$ bower install axios\n```\n\nUsing yarn:\n\n```bash\n$ yarn add axios\n```\n\nUsing cdn:\n\n```html\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n```\n\n## Example\n\n### note: CommonJS usage\nIn order to gain the TypeScript typings (for intellisense / autocomplete) while using CommonJS imports with `require()` use the following approach:\n\n```js\nconst axios = require('axios').default;\n\n// axios.<method> will now provide autocomplete and parameter typings\n```\n\nPerforming a `GET` request\n\n```js\nconst axios = require('axios');\n\n// Make a request for a user with a given ID\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    // handle success\n    console.log(response);\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n  .finally(function () {\n    // always executed\n  });\n\n// Optionally the request above could also be done as\naxios.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  })\n  .finally(function () {\n    // always executed\n  });  \n\n// Want to use async/await? Add the `async` keyword to your outer function/method.\nasync function getUser() {\n  try {\n    const response = await axios.get('/user?ID=12345');\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\n> **NOTE:** `async/await` is part of ECMAScript 2017 and is not supported in Internet\n> Explorer and older browsers, so use with caution.\n\nPerforming a `POST` request\n\n```js\naxios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\nPerforming multiple concurrent requests\n\n```js\nfunction getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\naxios.all([getUserAccount(), getUserPermissions()])\n  .then(axios.spread(function (acct, perms) {\n    // Both requests are now complete\n  }));\n```\n\n## axios API\n\nRequests can be made by passing the relevant config to `axios`.\n\n##### axios(config)\n\n```js\n// Send a POST request\naxios({\n  method: 'post',\n  url: '/user/12345',\n  data: {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  }\n});\n```\n\n```js\n// GET request for remote image\naxios({\n  method: 'get',\n  url: 'http://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// Send a GET request (default method)\naxios('/user/12345');\n```\n\n### Request method aliases\n\nFor convenience aliases have been provided for all supported request methods.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### NOTE\nWhen using the alias methods `url`, `method`, and `data` properties don't need to be specified in config.\n\n### Concurrency\n\nHelper functions for dealing with concurrent requests.\n\n##### axios.all(iterable)\n##### axios.spread(callback)\n\n### Creating an instance\n\nYou can create a new instance of axios with a custom config.\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Instance methods\n\nThe available instance methods are listed below. The specified config will be merged with the instance config.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## Request Config\n\nThese are the available config options for making requests. Only the `url` is required. Requests will default to `GET` if `method` is not specified.\n\n```js\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional function in charge of serializing `params`\n  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)\n  paramsSerializer: function (params) {\n    return Qs.stringify(params, {arrayFormat: 'brackets'})\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed\n  maxContentLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 5, // default\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // 'proxy' defines the hostname and port of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  proxy: {\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  })\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the headers that the server responded with\n  // All header names are lower cased\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n\n```js\n// Set config defaults when creating the instance\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// Alter defaults after instance has been created\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n\n### Config order of precedence\n\nConfig will be merged with an order of precedence. The order is library defaults found in [lib/defaults.js](https://github.com/axios/axios/blob/master/lib/defaults.js#L28), then `defaults` property of the instance, and finally `config` argument for the request. The latter will take precedence over the former. Here's an example.\n\n```js\n// Create an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\nconst instance = axios.create();\n\n// Override timeout default for the library\n// Now all requests using this instance will wait 2.5 seconds before timing out\ninstance.defaults.timeout = 2500;\n\n// Override timeout for this request as it's known to take a long time\ninstance.get('/longRequest', {\n  timeout: 5000\n});\n```\n\n## Interceptors\n\nYou can intercept requests or responses before they are handled by `then` or `catch`.\n\n```js\n// Add a request interceptor\naxios.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    return config;\n  }, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n\n// Add a response interceptor\naxios.interceptors.response.use(function (response) {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n    return Promise.reject(error);\n  });\n```\n\nIf you need to remove an interceptor later you can.\n\n```js\nconst myInterceptor = axios.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);\n```\n\nYou can add interceptors to a custom instance of axios.\n\n```js\nconst instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\n```\n\n## Handling Errors\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nUsing the `validateStatus` config option, you can define HTTP code(s) that should throw an error.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Reject only if the status code is greater than or equal to 500\n  }\n})\n```\n\nUsing `toJSON` you get an object with more information about the HTTP error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n  });\n```\n\n## Cancellation\n\nYou can cancel a request using a *cancel token*.\n\n> The axios cancel token API is based on the withdrawn [cancelable promises proposal](https://github.com/tc39/proposal-cancelable-promises).\n\nYou can create a cancel token using the `CancelToken.source` factory as shown below:\n\n```js\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n```\n\nYou can also create a cancel token by passing an executor function to the `CancelToken` constructor:\n\n```js\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();\n```\n\n> Note: you can cancel several requests with the same cancel token.\n\n## Using application/x-www-form-urlencoded format\n\nBy default, axios serializes JavaScript objects to `JSON`. To send data in the `application/x-www-form-urlencoded` format instead, you can use one of the following options.\n\n### Browser\n\nIn a browser, you can use the [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) API as follows:\n\n```js\nconst params = new URLSearchParams();\nparams.append('param1', 'value1');\nparams.append('param2', 'value2');\naxios.post('/foo', params);\n```\n\n> Note that `URLSearchParams` is not supported by all browsers (see [caniuse.com](http://www.caniuse.com/#feat=urlsearchparams)), but there is a [polyfill](https://github.com/WebReflection/url-search-params) available (make sure to polyfill the global environment).\n\nAlternatively, you can encode data using the [`qs`](https://github.com/ljharb/qs) library:\n\n```js\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n\nOr in another way (ES6),\n\n```js\nimport qs from 'qs';\nconst data = { 'bar': 123 };\nconst options = {\n  method: 'POST',\n  headers: { 'content-type': 'application/x-www-form-urlencoded' },\n  data: qs.stringify(data),\n  url,\n};\naxios(options);\n```\n\n### Node.js\n\nIn node.js, you can use the [`querystring`](https://nodejs.org/api/querystring.html) module as follows:\n\n```js\nconst querystring = require('querystring');\naxios.post('http://something.com/', querystring.stringify({ foo: 'bar' }));\n```\n\nYou can also use the [`qs`](https://github.com/ljharb/qs) library.\n\n###### NOTE\nThe `qs` library is preferable if you need to stringify nested objects, as the `querystring` method has known issues with that use case (https://github.com/nodejs/node-v0.x-archive/issues/1665).\n\n## Semver\n\nUntil axios reaches a `1.0` release, breaking changes will be released with a new minor version. For example `0.5.1`, and `0.5.4` will have the same API, but `0.6.0` will have breaking changes.\n\n## Promises\n\naxios depends on a native ES6 Promise implementation to be [supported](http://caniuse.com/promises).\nIf your environment doesn't support ES6 Promises, you can [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\naxios includes [TypeScript](http://typescriptlang.org) definitions.\n```typescript\nimport axios from 'axios';\naxios.get('/user?ID=12345');\n```\n\n## Resources\n\n* [Changelog](https://github.com/axios/axios/blob/master/CHANGELOG.md)\n* [Upgrade Guide](https://github.com/axios/axios/blob/master/UPGRADE_GUIDE.md)\n* [Ecosystem](https://github.com/axios/axios/blob/master/ECOSYSTEM.md)\n* [Contributing Guide](https://github.com/axios/axios/blob/master/CONTRIBUTING.md)\n* [Code of Conduct](https://github.com/axios/axios/blob/master/CODE_OF_CONDUCT.md)\n\n## Credits\n\naxios is heavily inspired by the [$http service](https://docs.angularjs.org/api/ng/service/$http) provided in [Angular](https://angularjs.org/). Ultimately axios is an effort to provide a standalone `$http`-like service for use outside of Angular.\n\n## License\n\n[MIT](LICENSE)",
      "createdTime": "2020-01-01T10:59:46.443Z",
      "source": "https://github.com/axios/axios/blob/master/README.md"
    },
    {
      "id": 12,
      "title": "Styled Component contribute guide",
      "subTitle": "",
      "image": "https://images.unsplash.com/photo-1516321497487-e288fb19713f",
      "content": "# Contributing to `styled-components`\n\nAs the creators and maintainers of this project, we want to ensure that `styled-components` lives and continues to grow and evolve. The evolution of the library should never be blocked by any single person's time. One of the simplest ways of doing this is by encouraging a larger set of shallow contributors. Through this, we hope to mitigate the problems of a project that needs updates but there's no-one who has the power to do so.\n\n## Ownership\n\n**If your Pull Request is merged, regardless of content, you're eligible for push access to the organization on GitHub.** This is checked for on pull request merges and an invite is sent automatically. (thanks to an [Aeryn instance](https://github.com/Moya/Aeryn/) that [@mxstbr](https://github.com/mxstbr) runs)\n\nOffhand, it's easy to imagine that this would make code quality suffer, but in reality it offers fresh perspectives to the codebase and encourages ownership from people who are depending on the project. If you are building a project that relies on this codebase, then you probably have the skills to improve it and offer valuable feedback.\n\nEveryone comes in with their own perspective on what a project could/should look like, and encouraging discussion can help expose good ideas sooner.\n\n### Why do we give push access?\n\nIt can be overwhelming to be offered the chance to wipe the source code for a project. Don't worry, we don't let you push to master. All code has to be reviewed by at least two contributors or one core team member, and we have the convention that someone other than the submitter has to merge non-trivial pull requests.\n\n**As an organization contributor, you can merge other people's pull requests, or other contributors can merge yours.** You likely won't be assigned a pull request, but you're welcome to jump in and take a code review on topics that interest you.\n\nThis project is not continuously deployed, there is space for debate after review too. This means there's always a chance to revert, or to make an amending pull request. If it feels right, merge.\n\n### How can we help you get comfortable contributing?\n\nIt's normal for a first pull request to be a potential fix for a problem, and moving on from there to helping the project's direction can be difficult. We try to help contributors cross that barrier by offering good first step issues. These issues can be fixed without feeling like you're stepping on toes. Ideally, these are non-critical issues that are well defined. They will be purposely avoided by mature contributors to the project, to make space for others.\n\nWe aim to keep all technical discussions inside GitHub issues, and all other discussions in our [Spectrum community](https://spectrum.chat/styled-components). This is to make sure valuable discussions are public and discoverable via search engines. If you have questions about a specific PR, want to discuss a new API idea etc GitHub issues are the right place. If you have questions about how to use the library, or how the project is running - the [Spectrum community](https://spectrum.chat/styled-components) is the place to go.\n\n### Our expectations on you as a contributor\n\nTo quote [@alloy](https://github.com/alloy) from [this issue](https://github.com/Moya/Moya/issues/135):\n\n> Don't ever feel bad for not contributing to open source.\n\nWe want contributors to provide ideas, keep the ship shipping and to take some of the load from others. It is non-obligatory; we’re here to get things done in an enjoyable way. :trophy:\n\nThe fact that you'll have push access will allow you to:\n\n- Avoid having to fork the project if you want to submit other pull requests as you'll be able to create branches directly on the project.\n- Help triage issues, merge pull requests.\n- Pick up the project if other maintainers move their focus elsewhere.\n\nIt's up to you to use those superpowers or not though \uD83D\uDE09\n\nIf someone submits a pull request that's not perfect, and you are reviewing, it's better to think about the PR's motivation rather than the specific implementation. Having braces on the wrong line should not be a blocker. Though we do want to keep test coverage high, we will work with you to figure that out together.\n\n### What about if you have problems that cannot be discussed in a public issue?\n\n[Max Stoiber](https://twitter.com/mxstbr) and [Phil Pluckthun](https://twitter.com/_philpl) (Twitter links) have contactable emails on their GitHub profiles, and are happy to talk about any problems via those or via Twitter DMs.\n\n### Code of Conduct\n\nIt's also important to note that all repositories under the `styled-components` banner have a [Code of Conduct](./CODE_OF_CONDUCT.md). It is important that you review and enforce this CoC should any violations happen.\n\n## Code contributions\n\nHere is a quick guide to doing code contributions to the library.\n\n1. Find some issue you're interested in, or a feature that you'd like to tackle.\n   Also make sure that no one else is already working on it. We don't want you to be\n   disappointed.\n\n2. Fork, then clone: `git clone https://github.com/YOUR_USERNAME/styled-components.git`\n\n3. Create a branch with a meaningful name for the issue: `git checkout -b fix-something`\n\n4. Install packages by running `yarn` in the root of the project.\n\n5. Make your changes and commit: `git add` and `git commit`\n\n6. Make sure that the tests still pass: `yarn test` and `yarn run flow` (for the type checks)\n\n7. Push your branch: `git push -u origin your-branch-name`\n\n8. Submit a pull request to the upstream styled-components repository.\n\n9. Choose a descriptive title and describe your changes briefly.\n\n10. Wait for a maintainer to review your PR, make changes if it's being recommended, and get it merged.\n\n11. Perform a celebratory dance! :dancer:\n\n### How do I set up the project?\n\nRun [`yarn install`](https://yarnpkg.com/) and edit code in the `packages/styled-components/src/` folder. It's luckily very simple! :wink:\n\n> We use yarn workspaces with [lerna](https://github.com/lerna/lerna) to make this work as a monorepo under the hood.\n\n### How do I verify and test my changes?\n\nTo make development process easier we provide a Sandbox React application in this repo which automatically uses your local version of the `styled-components` library. That means when you make any changes in the `packages/styled-components/src/` folder they'll show up automatically there!\n\nTo use the sandbox, follow these steps:\n\n1. Go to sandbox folder: `cd packages/sandbox`\n\n2. Install all the dependencies: `yarn install`. Since this repository uses `yarn` workspaces, avoid using `npm` where you can.\n\n3. Run `yarn start` to start sandbox server\n\nNow you should have the sandbox running on `localhost:3000`. The Sandbox supports client-side and server-side rendering.\n\nYou can use an interactive editor, powered by [`react-live`](https://react-live.philpl.com/), to test your changes. But if you want more control, you can edit the sandbox itself too:\n\n- Root `<App>` component is located at `packages/sandbox/src/App.js` file\n\n- Client-side entry point is at `packages/sandbox/src/browser.js`\n\n- Server-side entry point is at `packages/sandbox/src/server.js`\n\nIn the sandbox source, `styled-components` is an alias to `packages/styled-components/src` folder, so you can edit the source directly and dev-server will handle rebuilding the source and livereloading your sandbox after the build is done.\n\nWhen you commit our pre-commit hook will run, which executes `lint-staged`. It will run the linter automatically and warn you if the code you've written doesn't comply with our code style guidelines.\n\n### How do I run the benchmarks?\n\nWe have three different benchmarks: mounting a deep tree, mounting a wide tree and updating dynamic styles. Shoutout to [@necolas](https://github.com/necolas), who wrote these for `react-native-web` and whom we stole these benchmarks from.\n\nTo run the benchmarks run:\n\n```sh\ncd packages/styled-components`\n```\n\n```sh\nyarn run benchmarks\n```\n\nYou can also get traces that you can look at in the Chrome DevTools \"Performance\" panel by running\n\n```sh\nyarn run benchmarks --tracing\n```\n\n### How do I fix my pre-commit hook?\n\nWe've recently migrated from `pre-commit` to `husky`, so if you're running into issues during this migration, you'll likely have to do the following:\n\n```sh\nrm .git/hooks/pre-commit*\nnode ./node_modules/husky/bin/install.js\n```\n\nThis will delete the old `pre-commit` git hook and install husky's one.\nWithout the proper uninstallation script of the `pre-commit` package, this is necessary because `husky` will skip its installation when\na git hook is already present.\n\n## Release process\n\n[Core team members](./CORE_TEAM.md) have the responsibility of pushing new releases to npm. The release process is as follows:\n\n1. Make sure you have the latest changes and are on the master branch: `git checkout master && git pull origin master`\n2. Install all the dependencies by running `yarn` in the root folder. This will also install `lerna`.\n3. Create a new branch based on the version number, for example `git checkout -b 3.4.1`\n4. Update the [CHANGELOG.md](./CHANGELOG.md) with the new version number, add a new Unreleased section at the top and edit the links at the bottom so everything is linked correctly\n5. Commit the Changelog changes with `git commit -m 'Update CHANGELOG'`\n6. Push the branch to the repo with `git push -u origin <branchname>`\n7. Run `yarn run publish`. (Not `yarn publish`) This will run `test` cases, check for `flow` and `lint` errors and then start the `lerna publish` process. You will prompted to choose the next versions for all the packages including `styled-components`. (Note: Packages which are marked as `private` will not be published to `npm`, choose any version for them).\n8. Congratulations, you just published a new release of `styled-components`! :tada: Let everybody know on Twitter, in our community and all the other places\n\n## Credits\n\nThese contribution guidelines are based on https://github.com/moya/contributors, big thanks to @alloy, @orta et al. for the inspiration and guidance.\n\n## Financial contributions\n\nWe also welcome financial contributions in full transparency on our [open collective](https://opencollective.com/styled-components).\nAnyone can file an expense. If the expense makes sense for the development of the community, it will be \"merged\" in the ledger of our open collective by the core contributors and the person who filed the expense will be reimbursed.\n\n## Credits\n\n### Contributors\n\nThank you to all the people who have already contributed to styled-components!\n<a href=\"graphs/contributors\"><img src=\"https://opencollective.com/styled-components/contributors.svg?width=890\" /></a>\n\n### Backers\n\nThank you to all our backers! [[Become a backer](https://opencollective.com/styled-components#backer)]\n\n<a href=\"https://opencollective.com/styled-components#backers\" target=\"_blank\"><img src=\"https://opencollective.com/styled-components/backers.svg?width=890\"></a>\n\n### Sponsors\n\nThank you to all our sponsors! (please ask your company to also support this open source project by [becoming a sponsor](https://opencollective.com/styled-components#sponsor))\n\n<a href=\"https://opencollective.com/styled-components/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/styled-components/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/styled-components/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/styled-components/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/styled-components/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/styled-components/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/styled-components/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/styled-components/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/styled-components/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/styled-components/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/styled-components/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/styled-components/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/styled-components/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/styled-components/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/styled-components/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/styled-components/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/styled-components/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/styled-components/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/styled-components/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/styled-components/sponsor/9/avatar.svg\"></a>",
      "createdTime": "2020-01-01T04:00:46.443Z",
      "source": "https://github.com/styled-components/styled-components/blob/master/CONTRIBUTING.md"
    },
    {
      "id": 11,
      "title": "Vue.js",
      "subTitle": "",
      "image": "https://images.unsplash.com/photo-1461749280684-dccba630e2f6",
      "content": "# vuejs.org\n\nThis site is built with [hexo](http://hexo.io/). Site content is written in Markdown format located in `src`. Pull requests welcome!\n\n## Writing\n\nSee the [Vue Docs Writing Guide](https://github.com/vuejs/vuejs.org/blob/master/writing-guide.md) for our rules and recommendations on writing and maintaining documentation.\n\n## Developing\n\n``` bash\n$ npm install\n$ npm start # dev server at http://localhost:4000\n```\n\n## Deploying\n\nThe site is automatically deployed when commits land in `master`, via [Netlify](https://www.netlify.com/).\n\nIf you are the maintainer of a community translation fork and would like to deploy via Netlify instead of GitHub pages, please ping @yyx990803 in an issue to request a Netlify team membership and DNS update.\n\n## On Translations\n\nTranslations for this documentation project are currently maintained in separate repositories forked from this original one.\n\n### Arabic\n\nArabic translation is maintained by [Interstellar Club](https://github.com/InterstellarClub)\n\n* Translation Repo - [/interstellarClub/ar.vuejs.org](https://github.com/interstellarClub/ar.vuejs.org)\n* Primary Maintainers :\n    * [Ilyes Chouia](https://github.com/celyes)\n    * [Ahmed Aissaoui](https://github.com/Aissaoui-Ahmed)\n\n### French\n\nFrench translation is maintained by Vuejs-FR.\n* Translation Repo - [/vuejs-fr/vuejs.org](https://github.com/vuejs-fr/vuejs.org)\n\n### Italian\n\n* Translation Repo - [/vuejs/it.vuejs.org](https://github.com/vuejs/it.vuejs.org)\n\n### Japanese\n\nJapanese translation is maintained by [Vue.js japan user group](https://github.com/vuejs-jp)\n\n* Translation Repo - [/vuejs/jp.vuejs.org](https://github.com/vuejs/jp.vuejs.org)\n* Primary maintainer - [kazupon](https://github.com/kazupon)\n* Secondary Maintainers:\n    * [re-fort](https://github.com/re-fort)\n    * [potato4d](https://github.com/potato4d)\n    * [oohira](https://github.com/oohira)\n\n### Korean\n\nKorean translation is maintained by [Vue.js Korean User group](https://github.com/vuejs-kr).\n\n* Translation Repo - [/vuejs-kr/kr.vuejs.org](https://github.com/vuejs-kr/kr.vuejs.org)\n* Primary maintainer - [ChangJoo Park](https://github.com/ChangJoo-Park)\n\n### Mandarin\n\n* Translation Repo - [/vuejs/cn.vuejs.org](https://github.com/vuejs/cn.vuejs.org)\n\n### Persian (Farsi)\n\nPersian translation is maintained by VueJS-fa.\n\n* Translation Repo - [/vuejs-fa/fa.vuejs.org](https://github.com/vuejs-fa/fa.vuejs.org)\n* Primary maintainer - [Pooya Parsa](https://github.com/pi0)\n\n### Português-Br\n\nPortuguês-Br translation is maintained by [Vuejs-Br](https://github.com/vuejs-br).\n\n* Translation Repo - [/vuejs-br/br.vuejs.org](https://github.com/vuejs-br/br.vuejs.org)\n\n### Russian\n\nRussian translation is maintained by Translation Gang.\n\n* Translation Repo - [/translation-gang/ru.vuejs.org](https://github.com/translation-gang/ru.vuejs.org)\n* Primary maintainer - [Grigoriy Beziuk](https://gbezyuk.github.io)\n\n### Spanish\n\n* Translation Repo - [/1950Labs/vuejs.org](https://github.com/1950Labs/vuejs.org)\n* Spanish translation is maintained by:\n\n[1950Labs](https://1950labs.com) & [Vue.js Montevideo](https://www.meetup.com/Montevideo-Vue-JS-Meetup/):\n\n- [Leonel More](https://github.com/leonelmore) | [Twitter](https://twitter.com/leonelmore)\n- [Sebastián Camacho](https://github.com/sxcamacho) | [Twitter](https://twitter.com/sxcamacho)\n- [Diana Rodríguez](https://github.com/alphacentauri82) | [Twitter](https://twitter.com/cotufa82)\n- [Alejandro Parada](https://github.com/alejandro8605)\n- [José Javier Señaris](https://github.com/pepesenaris) | [Twitter](https://twitter.com/pepesenaris)\n- [Federico Kauffman](https://github.com/fedekau) | [Twitter](https://twitter.com/fedekauffman)\n- [Fabián Larrañaga](https://github.com/FLarra) | [Twitter](https://twitter.com/FLarraa)\n- [Pablo Marcano](https://github.com/Pablosky12) | [Twitter](https://twitter.com/stiv_ml)\n- [Nicolás Tinte](https://github.com/Tintef) | [Twitter](https://twitter.com/NicoTinte)\n- [Diego Barreiro](https://github.com/faliure)\n- [Matías Verdier](https://github.com/MatiasVerdier) | [Twitter](https://twitter.com/matiasvj)\n- [Pablo Kz](https://github.com/pabloKz)\n- [Leonardo Fagundez](https://github.com/lfgdzdev) | [Twitter](https://twitter.com/Lfgdz)\n\n\n### Vietnamese\n\nVietnamese translation is maintained by [Vue.js Vietnam User group](https://github.com/vuejs-vn/).\n\n* Translation Repo: [/vuejs-vn/vuejs.org](https://github.com/vuejs-vn/vuejs.org)\n* Primary maintainer - [phanan](https://github.com/phanan)\n\n### Want to help with the translation?\n\nIf you feel okay with translating quite alone, you can fork the repo, post a comment on the [Community Translation Announcements](https://github.com/vuejs/vuejs.org/issues/2015) issue page to inform others that you're doing the translation and go for it.\n\nIf you are more of a team player, Translation Gang might be for you. Let us know somehow that you're ready to join this international open-source translators community. Feel free to contact [Grigoriy Beziuk](https://gbezyuk.github.io) or anybody else from [the team](https://github.com/orgs/translation-gang/people).\n\nAnd thank you in advance ;)",
      "createdTime": "2019-12-30T21:51:46.443Z",
      "source": "https://github.com/vuejs/vuejs.org/blob/master/README.md"
    },
    {
      "id": 10,
      "title": "Bulma",
      "subTitle": "",
      "image": "https://images.unsplash.com/photo-1510519138101-570d1dca3d66",
      "content": "Bulma is a **modern CSS framework** based on [Flexbox](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes).\n\n## Quick install\n\nBulma is constantly in development! Try it out now:\n\n### NPM\n\n```sh\nnpm install bulma\n```\n\n**or**\n\n### Yarn\n\n```sh\nyarn add bulma\n```\n\n### Bower\n\n```sh\nbower install bulma\n```\n\n### Import\nAfter installation, you can import the CSS file into your project using this snippet:\n\n```sh\nimport 'bulma/css/bulma.css'\n```\n\n### CDN\n\n[https://www.jsdelivr.com/package/npm/bulma](https://www.jsdelivr.com/package/npm/bulma)\n\nFeel free to raise an issue or submit a pull request.\n\n## CSS only\n\nBulma is a **CSS** framework. As such, the sole output is a single CSS file: [bulma.css](https://github.com/jgthms/bulma/blob/master/css/bulma.css)\n\nYou can either use that file, \"out of the box\", or download the Sass source files to customize the [variables](https://bulma.io/documentation/overview/variables/).\n\nThere is **no** JavaScript included. People generally want to use their own JS implementation (and usually already have one). Bulma can be considered \"environment agnostic\": it's just the style layer on top of the logic.\n\n## Browser Support\n\nBulma uses [autoprefixer](https://github.com/postcss/autoprefixer) to make (most) Flexbox features compatible with earlier browser versions. According to [Can I use](https://caniuse.com/#feat=flexbox), Bulma is compatible with **recent** versions of:\n\n* Chrome\n* Edge\n* Firefox\n* Opera\n* Safari\n\nInternet Explorer (10+) is only partially supported.\n\n## Documentation\n\nThe documentation resides in the [docs](docs) directory, and is built with the Ruby-based [Jekyll](https://jekyllrb.com/) tool.\n\nBrowse the [online documentation here.](https://bulma.io/documentation/overview/start/)\n\n## Related projects\n\n| Project                                                                              | Description                                                                            |\n|--------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------|\n| [Bulma with Attribute Modules](https://github.com/j5bot/bulma-attribute-selectors)   | Adds support for attribute-based selectors                                             |\n| [Bulma with Rails](https://github.com/joshuajansen/bulma-rails)                      | Integrates Bulma with the rails asset pipeline                                         |\n| [Vue Admin (dead)](https://github.com/vue-bulma/vue-admin)                                  | Vue Admin framework powered by Bulma                                                   |\n| [Bulmaswatch](https://github.com/jenil/bulmaswatch)                                  | Free themes for Bulma                                                                  |\n| [Goldfish (read-only)](https://github.com/Caiyeon/goldfish)                                      | Vault UI with Bulma, Golang, and Vue Admin                                             |\n| [ember-bulma](https://github.com/open-tux/ember-bulma)                               | Ember addon providing a collection of UI components for Bulma                          |\n| [Bloomer](https://bloomer.js.org)                                                    | A set of React components for Bulma                                                    |\n| [React-bulma](https://github.com/kulakowka/react-bulma)                              | React.js components for Bulma                                                          |\n| [Buefy](https://buefy.github.io)                                                     | Lightweight UI components for Vue.js based on Bulma                                    |\n| [vue-bulma-components](https://github.com/vouill/vue-bulma-components)               | Bulma components for Vue.js with straightforward syntax                                |\n| [BulmaJS](https://github.com/VizuaaLOG/BulmaJS)                                      | Javascript integration for Bulma. Written in ES6 with a data-* API                     |\n| [Bulma-modal-fx](https://github.com/postare/bulma-modal-fx)                          | A set of modal window effects with CSS transitions and animations for Bulma            |\n| [Bulma Stylus](https://github.com/groenroos/bulma-stylus)                            | Up-to-date 1:1 translation to Stylus\n| [Bulma.styl (read-only)](https://github.com/log1x/bulma.styl)                                    | 1:1 Stylus translation of Bulma 0.6.11                                                        |\n| [elm-bulma](https://github.com/surprisetalk/elm-bulma)                               | Bulma + Elm                                                                            |\n| [elm-bulma-classes](https://github.com/ahstro/elm-bulma-classes)                     | Bulma classes prepared for usage with Elm                                              |\n| [Bulma Customizer](https://bulma-customizer.bstash.io/)                              | Bulma Customizer &#8211; Create your own **bespoke** Bulma build                       |\n| [Fulma](https://fulma.github.io/Fulma/)                                       | Wrapper around Bulma for [fable-react](https://github.com/fable-compiler/fable-react)  |\n| [Laravel Enso](https://github.com/laravel-enso/enso)                                 | SPA Admin Panel built with Bulma, VueJS and Laravel                                    |\n| [Django Bulma](https://github.com/timonweb/django-bulma)                             | Integrates Bulma with Django                                                           |\n| [Bulma Templates](https://github.com/dansup/bulma-templates)                         | Free Templates for Bulma                                                               |\n| [React Bulma Components](https://github.com/couds/react-bulma-components)            | Another React wrap on React for Bulma.io                                               |\n| [purescript-bulma](https://github.com/sectore/purescript-bulma)                      | PureScript bindings for Bulma                                                          |\n| [Vue Datatable](https://github.com/laravel-enso/vuedatatable)                        | Bulma themed datatable based on Vue, Laravel & JSON templates                          |\n| [bulma-fluent](https://mubaidr.github.io/bulma-fluent/)                              | Fluent Design Theme for Bulma inspired by Microsoft’s Fluent Design System             |\n| [csskrt-csskrt](https://github.com/4d11/csskrt-csskrt)                               | Automatically add Bulma classes to HTML files                                          |\n| [bulma-pagination-react](https://github.com/hipstersmoothie/bulma-pagination-react)  | Bulma pagination as a react component                                                  |\n| [bulma-helpers](https://github.com/jmaczan/bulma-helpers)                            | Functional / Atomic CSS classes for Bulma                                              |\n| [bulma-swatch-hook](https://github.com/hipstersmoothie/bulma-swatch-hook)            | Bulma swatches as a react hook and a component                                         |\n| [BulmaWP (read-only)](https://github.com/tomhrtly/BulmaWP)                                       | Starter WordPress theme for Bulma                                                      |\n| [Ralma](https://github.com/aldi/ralma)                                               | Stateless Ractive.js Components for Bulma                                              |\n| [Django Simple Bulma](https://github.com/python-discord/django-simple-bulma)         | Lightweight integration of Bulma and Bulma-Extensions for your Django app              |\n| [rbx](https://dfee.github.io/rbx)                                                    | Comprehensive React UI Framework written in TypeScript                                 |\n| [Awesome Bulma Templates](https://github.com/aldi/awesome-bulma-templates)           | Free real-world Templates built with Bulma                                             |\n| [Trunx](http://g14n.info/trunx)                                                      | Super Saiyan React components, son of awesome Bulma, implemented in TypeScript         |\n| [@aybolit/bulma](https://github.com/web-padawan/aybolit/tree/master/packages/bulma)  | Web Components library inspired by Bulma and Bulma-extensions                          |\n| [Drulma](https://www.drupal.org/project/drulma)                                      | Drupal theme for Bulma.                                                                |\n| [Bulrush](https://github.com/textbook/bulrush)                                       | A Bulma-based Python Pelican blog theme                                                |\n| [Bulma Variable Export](https://github.com/service-paradis/bulma-variables-export)                                       | Access Bulma Variables in Javascript/Typescript in project using Webpack                                                |\n| [Bulmil](https://github.com/gomah/bulmil)                                       | An agnostic UI components library based on Web Components, made with Bulma & Stencil.                                                |\n| [Svelte Bulma Components](https://github.com/elcobvg/svelte-bulma-components)                                       | Library of UI components to be used in [Svelte.js](https://svelte.technology/) or standalone.                                                |\n\n## Copyright and license\n\nCode copyright 2020 Jeremy Thomas. Code released under [the MIT license](https://github.com/jgthms/bulma/blob/master/LICENSE).\n\n[npm-link]: https://www.npmjs.com/package/bulma\n[awesome-link]:  https://github.com/awesome-css-group/awesome-css\n[awesome-badge]: https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg",
      "createdTime": "2019-12-29T14:41:46.443Z",
      "source": "https://github.com/jgthms/bulma/blob/master/README.md"
    },
    {
      "id": 9,
      "title": "it-chain 아키텍처 문서",
      "subTitle": "",
      "image": "https://images.unsplash.com/photo-1548092372-0d1bd40894a3",
      "content": "\n# It-chain 아키텍처 문서\n\n## 1. 개발 배경 및 목적\n \n기존 블록체인은 그 규모가 방대하고 복잡하여 지역사회, 소규모 상인연합과 같은 비IT 중소규모 커뮤니티에서 사용하기에 높은 진입장벽을 갖고 있다. 또한 이더리움, 비트코인, 하이퍼레저와 같은 기존의 블록체인은 자신들의 목적에 맞춰 수정하여 사용하기에 어려움이 있다.</br>\n그리고 누군가가 블록체인에 대해서 심도 있게 학습하고자 할 때 일반적인 블록체인 이론과 관련된 자료는 많지만 그 이론을 이용해서 실제로 어떻게 블록체인을 구현할 지에 대해서 자세히 알려주는 자료와 오픈소스는 거의 없다.\n</br></br>\n본 프로젝트는 이러한 문제점들을 해결하기 위해서 중소규모 커뮤니티에서 유연하게 수정하여 자신들의 목적에 맞게 활용할 수 있는 경량 맞춤형 블록체인 It-chain을 만든다. It-chain은 수정 용이한 구조를 가진 블록체인으로써 it-chain을 사용하는 사람들이 각자의 필요에 따라서 쉽게 수정할 수 있게 만들고자 한다.\n또한 블록체인의 핵심이라고 할 수 있는 PBFT 합의 알고리즘이나 RAFT 리더 선출 알고리즘과같이 일반적인 이론을 통해서는 사람들에게 널리 알려져있지만 실제로 그것을 어떻게 구현할지 고민이 필요한 부분에 대해서 it-chain은 오픈소스로써 수 많은 해결책 중 한 가지를 제시하고자 한다.\n</br></br>\n또한, 코드 구현 뿐만 아니라 깊이 있는 문서화를 통해 사람들로 하여금 이해를 도울 수 있도록 한다. 컴포넌트별 자세한 설명을 문서와 그림을 통해 제공한다. 동작원리 뿐만 아니라 아키텍처, 개발을 위한 여러 정의까지 모두 정리하여 아우르고 있기 때문에 오픈소스에 기여하고자 하는 개발자의 진입 장벽을 조금이라도 낮출 수 있을 것이다.\n\n## 2. 개발 환경 및 개발 언어\n\n- 개발 환경: OSX, Linux\n- 개발 언어: Golang 1.9 이상\n- 개발 요구 사항: Docker 17.12.0이상, Rabbitmq 3.7.7이상\n\n## 3. 시스템 구성 및 아키텍처\n\n### It-chain Network 아키텍처\n![it-chain network 이미지](./doc/images/it-chain-network.png)\n\nIt-chain은 CA(Certificate Authority)를 기반으로한 프라이빗(Private) 블록체인(Blockchain)이다. It-chain 네트워크는 리더(Leader)와 일반 노드로 구성되며, 각 노드들은 네트워크에 참여한 모든 노드들과 gRPC로 연결되어 있다. 이 때 리더 노드는 블록 생성과 합의 알고리즘의 시작을 담당하며 주기적으로 교체된다. 나머지 일반 노드들은 리더가 생성한 블록을 검증 및 합의 하며, 클라이언트 어플리케이션(Client Application)으로 부터 전달받은 트랜잭션(Transaction)에 서명(Sign)하여 리더에게 전달한다. 클라이언트 어플리케이션(Client Application)은 It-chain 네트워크 중 임의의 노드에게 요청할 수 있다.\n\n### It-chain Node아키텍처\n\n![it-chain node 아키텍쳐 이미지](./doc/images/it-chain-node-architecture.png?raw=true)\n\nIt-chain 노드 수준 아키텍처 모델은 위 그림과 같다. it-chain  은 6개의 독립적으로 동작하는 핵심 컴포넌트(Component)들로 구성되어 있으며, 각각은 AMQP(Asynchronous Message Queue Protocol)를 통해 커뮤니케이션한다. AMQP는 이벤트 버스 커넥터(Event Bus Connector)이며, 게이트웨이로 들어온 외부 메세지(Message)에 맞춰 내부 핵심 컴포넌트들을 위한 이벤트(Event)를 생성하여 배포한다. 각 핵심 컴포넌트들은 자신들이 이미 등록한 이벤트를 받아서 동작한다. AMQP의 구체적인 구현체는 RabbitMQ  를 사용한다.\n\nit-chain 노드는 2개의 게이트웨이 컴포넌트(Client API Gateway 와 gRPC Gateway)를 통해 외부 네트워크 노드(다른 it-chain  노드 또는 클라이언트 어플리케이션들)와 연결된다.\n\n- Client Gateway  : 클라이언트 어플리케이션(서버, 모바일 앱, 데스크톱 앱 등)들을 위한 API로 REST로 제공된다.\n- gRPC Gateway  : it-chain 노드 간의 커뮤니케이션을 위한 서비스로, 블록 싱크, 합의 메세지 등과 같이 블록체인에 관련된 커뮤니케이션을 처리한다.\n    \nit-chain  의 각 컴포넌트는 동작에 필요한 데이터를 직접 갖고 있다 (Micro Service Architecture 구조에서 참조). 그렇기 때문에 경우에 따라 같은 데이터가 서로 다른 컴포넌트에 중복되어 저장될 수 있으며, 이를 허용한다.    \n\n- TxPool 컴포넌트: 트랜잭션(Transaction)을 임시로 저장하고 관리하는 컴포넌트로, 합의되어 블록에 저장되지 않은 트랜잭션들을 모아둔다.\n- Consensus 컴포넌트: 합의를 담당하는 컴포넌트이며, 현재는 PBFT(Practical Byzantine Fault Tolerance) 알고리즘을 따른다.\n- BlockChain 컴포넌트: 블록을 생성, 싱크, 검증하고 관리하는 컴포넌트이다.\n- Ivm 컴포넌트: it-chain의 스마트 컨트랙트인 iCode 관련 기능을 담당한다.\n\n이와 같이 it-chain은 각각의 완전히 독립적인 컴포넌트들이 모여서 전체 시스템을 구성하기 때문에 사용자의 필요에 따라서 수정이 용이하다는 장점이 있다. 예를 들어 현재 it-chain에서 사용하고 있는 PBFT 합의 알고리즘을 바꾸고 싶은 경우 컨센서스 컴포넌트(Consesus Component)의 도메인 로직만 교체하면 된다. 혹은 블록체인의 블록 구조를 바꾸고 싶은 경우에는 블록체인 컴포넌트(Blockchain Component)의 도메인 로직만 교체하면 그 니즈를 충족시킬 수 있다.\n\n### Consensus\n\n![Consensus이미지](./doc/images/pbft.png)\n\n컨센서스 컴포넌트(Consesus Component)는  블록체인 컴포넌트(Blockchain Component)  에서 생성된 블록(Block)에 대해, P2P 네트워크의 구성원들이 블록의 저장 순서에 대해 합의하는 역할을 수행한다. It-chain 에서 이러한 합의 과정은 PBFT 합의 알고리즘을 통해 구현되며, PBFT의 리더는 RAFT 리더 선출 알고리즘을 통해 선출된다.\n\n합의 과정은 선출된 리더가 합의하고자 하는 블록을 제안(Propose) 함으로써 시작되며, 리더가 제안한 블록에 대한 합의 과정에 참여하는 의원(Representative) 의 집합인 의회(Parliament) 가 구성된다. 의회를 구성하는 위원(Representative) 들은 P2P 네트워크를 구성하는 전체 노드들 중 선발되는데, 현재는 블록을 제안(Propose) 하는 시점의 모든 노드들이 선발되는 것을 기본으로 한다. 의회가 구성되고 난 뒤 컨센서스(Consensus)는 블록 합의 요청 이벤트, 블록 합의 완료 이벤트, 합의 메시지(Propose, PreVote, PreCommit) 등을 AMQP를 통해 주고 받는다. State API는 블록 합의를 수행하는 API로, 블록 합의를 요청받으면 합의 메시지를 다른 노드와 주고 받으며 합의를 진행한다. Election API는 리더 선출을 담당하는 API로 리더 후보를 정할 타이머를 시작하거나 리더 후보에 대한 투표(Vote)를 수행한다. Leader API는 리더 업데이트 등의 기능을 수행한다.\n\n### gRPC-Gateway\n\ngRPC-Gateway는 it-chain 네트워크에 참여하는 노드 사이의 통신을 담당한다. gRPC-Gateway는 gRPC Bi-stream을 통해 네트워크의 모든 노드와 커넥션(Connection)을 유지하며, 커넥션(Connection)을 관리한다.\n\n![gRPC-Gateway 이미지](./doc/images/grpc-gateway.png)\n\ngRPC-Gateway는 같은 노드의 다른 Component와 AMQP(Async Message Queue Protocol)를 사용하여 통신하며, 커넥션(Connection) 관련 기능을 처리하는 Connection API와 다른 노드에게 메세지(Message) 전송요청을 처리하는 Message API가 요청을 받아 처리한다. Connection API와 Message API 모두 gRPC Host service를 사용하여 노드와의 커넥션(Connection)을 관리, 노드에게 메세지(Message)전송 기능을 수행한다.\n\n### API-Gateway\n\n![API-Gateway 이미지](./doc/images/api-gateway.png)\n\nAPI-Gateway는 클라이언트(Client)로부터의 HTTP 요청을 처리한다. 클라이언트(Client)의 요청은 크게 데이터 변경(Create, Update, Delete)과 조회(Query)로 나뉘어 진다. Query API Handler는 조회(Query)요청을 받아 리포지토리(Repository)로 부터 블록(Block), 트랜잭션(Transaction), ICode, 커넥션(Connection)을 조회하는 기능을 수행한다. API Handler는 데이터 변경요청을 받아 해당 컴포넌트에게 트랜잭션 전송(Transaction Submit), ICode 디플로이(ICode Deploy)같은 요청을 AMQP로 전달한다.\n\nAMQP Handler는 다른 컴포넌트들로 부터 블록(Block), 커넥션(Connection), ICode의 생성, 업데이트, 삭제 이벤트를 받아 독립적으로 조회를 위한 데이터를 DB에 저장하고, Query API는 해당 DB로부터 데이터를 조회하여 반환한다. 이와 같이 API-Gateway를 다른 컴포넌트들과 나누어 데이터의 조회 로직과 데이터의 변경 로직을 분리시켰다.\n\n### Blockchain\n\n![Blockchain 이미지](./doc/images/blockchain.png)\n\n블록체인 컴포넌트(Blockchain Component)는 블록의 생성, 저장, 블록체인 동기화 등의 기능을 수행한다. AMQP를 통해 여러 컴포넌트와 협업하며 기능을 수행하는데, 개략적으로 트랜잭션 풀 컴포넌트(TxPool Component)로부터 받은 트랜잭션(Transaction)을 활용하여 블록을 생성하고, 합의를 위해 블록을 컨센서스 컴포넌트(Consensus Component)에 전달한다. 이후 컨센서스 컴포넌트(Consensus Component)로부터 합의를 마친 블록을 전달받아, 검증 과정을 거친 후 저장한다.\n\n![Blockchain 이미지2](./doc/images/blockchain2.png)\n\n자신이 리더 노드일 경우, 트랜잭션 풀 컴포넌트(TxPool Component)로부터 요청을 받아 블록을 생성하고, 컨센서스 컴포넌트(Consensus Component)에 블록의 합의를 요청한다. 컨센서스 컴포넌트(Consensus Component)에서 합의를 완료하면, 네트워크 내 모든 노드는 해당 블록을 블록체인에 저장한다.\n\n![Blockchain 이미지3](./doc/images/blockchain3.png)\n\n블록체인 동기화는 네트워크 내 모든 노드의 블록체인을 동일하게 하기 위한 과정으로, 새로운 노드가 네트워크에 참여할 시 다른 노드와의 블록체인 동기화를 진행한다.\n\n### Ivm\n\nvm 컴포넌트 (ICode Virtual Machine Component) 는 it-chain의 스마트 컨트랙트인 ICode를 실행시키고 관리하는 컴포넌트이다. ICode Container Service를 이용하여 ICode들을 각각의 독립된 도커(Docker)환경에서 관리하고, Git Service를 통해서 ICode를 GitHub, GitLab으로부터 디플로이(Deploy)한다. 디플로이(Deploy)는 Git SSH 프로토콜과 HTTPS 를 지원한다. Git SSH프로토콜을 이용하여 디플로이(Deploy)할때는 선택적으로 SSH 키(Key)를 이용할 수 있다.\n\n![Ivm 이미지](./doc/images/ivm.png)\n\n각각의 ICode는 디플로이(Deploy) 할 때 해당 ICode의 Git URL과 헤드(Head)의 커밋 해시(commit hash)를 이용하여 ICode 아이디를 부여한다. 따라서 어느 노드에서 실행시켜도 같은 버전 ICode를 디플로이(Deploy) 한다면 같은 ICode 아이디를 갖게된다.  \nIVM은 블록체인 컴포넌트(Blockchain Component)의 블록 커밋(Block Committed) 이벤트를 받으면 해당 블록 내 트랜잭션(Transaction)들의 ICode를 실행시킨다. 또한 상태 쿼리(State Query) 요청에 의해 현재 상태(State)의 값을 조회하기 위해 ICode를 실행 시킨다.\n\n### Txpool\n\n![Txpool 이미지](./doc/images/txpool.png)\n\nTxpool은 제출(Submitted)된 트랜잭션(Transaction)을 검증하고, 자신이 리더 노드일 경우 블록체인 컴포넌트(Blockchain Component)에게 블록 생성 요청을, 일반 노드일 경우 리더 노드에게 트랜잭션(Transaction)을 전달해주는 기능을 수행한다. API-Gateway로 제출(Submitted)된 트랜잭션(Transaction)은 AMQP로 Txpool에 전달되고, Transaction API에 의해 검증 후, Transaction pool에 저장된다. Txpool에는 2개의 배치 스레드(Batch Thread)가 실행되고 있는데, 각각은 Transaction pool에서 트랜잭션(Transaction)을 가져와 리더 노드에게 전송 혹은 블록 생성 요청을 한다.\n\n## 4. 프로젝트 주요기능\n\n### 블록 생성\n\nIt-chain에서 블록 생성은 제네시스 블록(Genesis Block) 생성과 최초가 아닌 일반 블록(Block) 생성으로\n나뉜다. 제네시스 블록(Genesis Block)을 생성하는 시점은 노드가 it-chain을 처음 구동하는 때이고, 모든\n노드가 it-chain 구동시 최초 블록을 생성한다. 제네시스 블록(Genesis Block)은 사용자가 작성한 Config\n파일을 토대로 생성된다. Config 파일은 기관(Organization), 네트워크 정보(Network ID), 생성자(Creator)\n등으로 이루어져 있고, 사용자는 it-chain을 구동하기 전 이 파일을 수정하여 제네시스 블록(Genesis\nBlock)의 값을 세팅할 수 있다. 설정값을 맞춰주지 않으면 네트워크를 만들더라도 동일한 블록체인을 가질\n수 없기 때문에, 제네시스 블록(Genesis Block)은 노드가 네트워크에 참여하기 위한 입장권의 역할을\n한다고 볼 수 있다. 세팅된 값들을 암호화하여 블록 해시(Block Hash)값을 만들어주면, 제네시스 블록(Genesis Block) 생성이 완료된다. 제네시스 블록(Genesis Block)은 생성된 이후 합의를 거치지 않고\n바로 저장된다.\n\n<p align=\"center\"><img src=\"./doc/images/Create_GenesisBlock.png\" width=\"500px\" height=\"350px\"></p>\n\n한편, 제네시스 블록(Genesis Block)이 아닌 블록(Block)을 생성하는 시점은 TxPool 컴포넌트로부터 블록\n생성 요청을 받았을 때이고, 리더 노드만이 블록(Block)을 생성한다. 즉, 클라이언트(Client)가 it-chain\n네트워크 내 임의의 노드에게 Transaction을 요청하면 임의의 노드는 리더 노드에게 Transaction을\n전달하고, Transaction을 전달받은 리더 노드의 TxPool 컴포넌트가 Blockchain 컴포넌트에 블록 생성을\n요청할 때 ProposedBlock을 생성한다. ProposedBlock을 생성하는 과정은 먼저 블록체인 내 마지막 블록의\n블록 해시(Block Hash) 값을 생성할 블록의 이전 블록 해시(Block Hash)값으로 지정하고, 마지막 블록의\n고유 번호(height) 값에 1을 더한 값을 생성할 블록의 고유 번호(height)로 지정하는 등 블록 생성에 필요한\n값들을 세팅해준다. 이 후, 세팅된 값들과 트랜잭션(Transaction), 타임스탬프(Timestamp) 등을\n암호화하여 블록 해시(Block Hash)값을 만들어주면, 블록(Block) 생성이 완료된다. 블록(Block)은 생성된\n이후 다른 노드들과의 합의를 위해 컨센서스 컴포넌트(Consensus Component)로 전달된다.\n\n<p align=\"center\"><img src=\"./doc/images/Create_ProposedBlock.png\" width=\"750px\" height=\"420px\"></p>\n\n### 블록(데이터) 저장\n\nIt-chain은 블록을 저장하기 위해 구글의 오픈소스 키 벨류 데이터베이스(Key Value DB)인 Leveldb를\n사용한다. 이를 통해서 블록을 키 벨류 데이터베이스(Key Value DB)에 쓰고, 트랜잭션 아이디(ID), 블록\n높이(Height), 블록 해시(Hash) 값 등으로 관련 블록을 읽는 등의 DB 입출력 기능을 제공한다. 이 때\n데이터는 Config 파일에 설정된 경로에 저장되는데, 여러가지의 키(key)값으로 원하는 값(value)을 조회할\n수 있게 하기 위해 키-벨류(key-value)쌍을 다양화하였다. DB의 이름에 키(key)의 접두사를 붙여 여러\n키-벨류(key-value)쌍을 구분하고 있다.\n\n| DB Name      | Key            | Value            | Description                  |\n| ------------ | -------------- | ---------------- | ---------------------------- |\n| block_hash   | BlockHash      | Serialized Block | Save block with block-hash   |\n| block_number | BlockNumber    | Block Hash       | Save block with block-number |\n| util         | Predefined Key | Depends on Key   | Multiple usage               |\n\n블록 해시 데이터베이스(block_hash DB)는 가장 기본이 되는 DB로, 다른 노드들과의 합의 과정을 통해\n검증(confirm)된 블록 자체가 블록 해시를 key로 저장된다. 블록 넘버 데이터베이스(block_number DB)는\n블록에 부여된 고유 숫자를 기반으로 블록을 찾을 수 있게 하는 DB인데, value에 블록 자체를 저장하지\n않고, 블록 해시를 저장한다. Util DB는 다른 DB들을 보완하는 util 성격의 DB로, 트랜잭션이 속한 블록을\n찾을 때, 블록체인의 마지막 블록을 찾을 때 등에 활용된다. util DB에는 트랜잭션의 ID를 key로 하고 해당\n트랜잭션이 속한 블록의 해시 값을 value로 하는 값, “last_block”이라는 미리 정의된 key로 마지막으로\n생성된 블록 자체등이 들어간다.\n\n블록을 저장하는 시점은 다른 노드들과 블록을 합의하고 난 후이다. 블록을 DB에 저장하기 위해서는 여러\n검증 과정을 거쳐야 한다. 첫째, DB(블록체인) 내 마지막 블록과 저장할 블록이 chain 되는지를 검증한다.\n즉 저장할 블록의 ‘이전 블록 해시’값과 마지막 블록의 ‘블록 해시'값을 비교하여 같은 지 확인한다. 둘째,\n저장할 블록의 블록 해시값에 이상이 없는지 확인한다. 즉, 저장할 블록의 데이터를 암호화하여 새로운\n해시 값을 만들고, 저장할 블록의 블록 해시값과 같은지 확인한다. 셋째, 블록 내부의 트랜잭션들이 잘\n암호화되어있는 지 확인한다. 트랜잭션들의 해시 값을 새로 만들고, 저장되어 있는 해시 값과 비교한다.\n일련의 검증 과정 후 블록을 DB에 저장하게 된다.\n\n<p align=\"center\"><img src=\"./doc/images/Process_Of_Saving_Block.png\" width=\"750px\" height=\"420px\"></p>\n\n### 블록 합의\n\nit-chain에서는 합의 알고리즘으로 PBFT를 사용한다. PBFT는 네트워크 안에서 약속된 행동을 하지 않는\n비잔틴 노드가 존재하여도 해당 시스템 안에서 참여한 모든 노드가 성공적으로 합의를 이룰 수 있는 합의\n알고리즘이다. PBFT는 속도면에서 빠르다는 장점이 있지만 합의에 참가하는 모든 노드들과의 통신을\n해야하기 때문에, 노드가 늘어날 수록 Communication 비용이 증가하여 노드 수의 한계가 있다는 단점이\n있다. 하지만 it-chain은 프라이빗 블록체인(private blockchain) 으로 노드의 수가 많지 않기 때문에 PBFT를\n사용하였다. PBFT 알고리즘의 과정은 다음과 같다.\n\n<p align=\"center\"><img src=\"./doc/images/consensus-PBFT.png\" width=\"750px\" height=\"420px\"></p>\n\nIt-chain 에서는 기존 PBFT 알고리즘과는 다르게 리더만이 블록을 생성하고 제안할 수 있다. 따라서 기존의\nPBFT에 있는 Request, Response 과정이 없다. It-chain의 PBFT 과정은 다음과 같다.\n\n1. 리더의 Consensus Component는 BlockChain Component로 부터 블록을 합의하라는 Request를\n   받는다.\n2. 리더는 Request로 부터 합의할 대표자(Representative)를 선출하고, Propose된 블록을 통해\n   State(Consensus)를 생성한다.\n3. 리더는 모든 Representative에게 Propose Message를 브로드캐스트한다.\n4. Propose Message를 받은 Representatives는 각자 받은 Message로부터 State(Consensus)를\n   생성한다. 그 다음 Prevote Message를 Representatives에게 브로드캐스트한다.\n5. Representative 는 각자 전체 Representative 수의 ⅓ + 1 개의 Prevote Message를 받았을 경우\n   Precommit Message를 Representatives에게 브로드캐스트한다.\n6. Representative는 각자 전체 Representative 수의 ⅓ + 1 개의 PreCommit Message를 받았을 경우\n   Block Confirm Event를 발행하고, State(Consensus)를 삭제한다.\n\n### 리더 선출\n\nit-chain의 PBFT 알고리즘에서 모든 블록의 생성은 리더 노드에서 이루어지게 되므로, 리더의 선정은 매우\n중요하다.\n\n리더의 선정에 있어 가장 중요하게 다루어야 할 부분중 하나는 바로 모든 노드가 같은 리더에 대해 합의를\n이루고 이를 공유하도록 하는 것이다. 이를 위해 It-chain 에서는 리더 선출 알고리즘으로 RAFT 알고리즘에\n기반을 둔 알고리즘을 차용 하였으며, 그 과정은 다음과 같다.\n\n1. 모든 노드에서 150ms ~ 300ms 사이의 임의의 값의 타이머를 설정하여 작동시킨다.\n2. 제일 먼저 타이머가 종료된 노드가 스스로 리더 후보( CANDIDATE) 가 되고 다른 노드들에게\n   RequestVoteMessage 를 전달하여 자신에게 투표를 하도록 요청한다.\n   \n   <p align=\"center\"><img src=\"./doc/images/RequestVoteMsg.png\" width=\"500px\" height=\"350px\"></p>\n\n3. RequestVoteMessage 를 받은 다른 노드들은 만약 자신의 타이머가 아직 잔여시간이 남았다면\n    자신의 타이머를 초기화하고 송신한 노드를 후보자로 정한 뒤 해당 노드에게 VoteMessage 를\n    전달함으로써 투표하고, 자신의 타이머를 초기화하여 다시 타이머를 작동시킨다. 이때 중요한\n    사항은 RequestVoteMessage 를 받은 노드가 이미 투표를 한 노드라면 투표 직전에 자신의 Term\n    을 증가시켜 몇회차의 투표에 참여하는 것인지를 명시하는 것이다. 이를 통해 모든 노드는 한번의\n    Term 에서 단 한번만 투표에 참여하게 한다.\n    \n    <p align=\"center\"><img src=\"./doc/images/Vote.png\" width=\"500px\" height=\"350px\"></p>\n\n4. 만약 1번 과정에서 리더 투표를 요청한 노드가 다른 모든 노드에게 투표를 받으면 해당 노드가\n   리더가 되는 것을 선언하고 나머지 노드들에게 UpdateLeaderMessage 를 보냄으로써 자신이\n   리더임을 알린다.\n   \n   <p align=\"center\"><img src=\"./doc/images/UpdateReaderMsg.png\" width=\"500px\" height=\"350px\"></p>\n\n5. 투표에 참여한 노드가 UpdateLeaderMessage 를 받으면 자신이 투표했던 CANDIDATE와\n   비교하여 일치하면 리더를 인정하고 노드의 리더를 변경한다.\n\n만약 1번 과정에서 동시에 두명의 노드의 타이머가 종료되면 두개의 RequestVoteMessage가 전달될\n것이며 RequestVoteMessage를 받은 노드가 이미 투표를 하였다면 요청을 하는 노드보다 높은 Term을\n가지게 될 것이고, 해당 투표 요청은 무산되어 리더가 선출되지 않게 된다. 이 경우 다시 모든 노드들에\n대한 타이머 중에서 가장 짧은 시간을 가진 타이머가 먼저 투표 요청을 함으로써 새로운 리더선출이\n시작된다. 이 과정은 전체 노드가 합의를 이룰 수 있는 리더가 선출될 때까지 반복된다.\n\n### 블록체인 동기화\n\n블록체인 동기화(이하 Synchronize)는 특정 노드의 블록 체인을 네트워크 내 임의의 노드의 블록 체인과\n동일하게 만드는 과정을 의미한다. 즉 Synchronize 과정을 통해 특정 노드는 모든 블록에 대하여\n대표값(Seal), 이전 블록의 대표값(PrevSeal), 트랜잭션 모음(TxList), 트랜잭션 대표값(TxSeal), 블록 생성\n시각(TimeStamp), 생성자(Creator), 블록 체인의 길이(Height) 등의 블록 체인과 관련된 모든 정보들을\n다른 노드의 것과 동일하게 한다. Synchronize를 하는 시점은 새로운 노드가 it-chain 네트워크에 참여할\n때이다. 새로운 노드가 it-chain 네트워크 내 모든 노드들과 Connection을 형성하고 나면, Synchronize를\n시작한다.\n\nSynchronize의 과정은 먼저 네트워크 내 임의의 노드의 블록체인이 동일한 지 비교하여, Synchronize가\n필요한 지 점검한다. Synchronize가 필요하다면, 특정 노드가 보유하지 않은 모든 블록을 임의의\n노드로부터 받아와 순서대로 블록체인에 저장하여, 동일한 블록체인을 구축한다.\n\n<p align=\"center\"><img src=\"./doc/images/Process_Of_Synchronizing.png\" width=\"550px\" height=\"380px\"></p>\n\nSynchronize의 과정 중에 새롭게 합의된 블록이 생성되는 예외적인 상황이 발생할 수 있는데 It-chain은\n이런 예외 상황을 블록 풀(Block Pool)이란 구조를 통해서 해결하였다. Synchronize 중에 리더 노드로부터\n합의된 블록이 전달되면 이는 저장소에 바로 저장하는 것이 아니라 블록 풀에 저장한다. 블록 풀은 이렇게\n합의된 블록들을 바로 저장할 수 없는 경우 임시로 보관하는 역할을 한다. Synchronize가 완료되면 블록\n풀에서 블록을 가져와 블록체인에 추가로 저장한다.\n\n### ICode Deploy\n\nIt-chain 에서 ICode를 실행하기 위해서는 먼저 Deploy하는 과정이 필요하다. ICode 는 git을 통해\nDeploy된다. ssh git 프로토콜과 https 를 지원하며 이때 ssh Key를 통해 암호화를 지원한다.\n\n<p align=\"center\"><img src=\"./doc/images/Deploy.png\" width=\"750px\" height=\"420px\"></p>\n\n위 그림은 ICode의 Sequence Diagram이다. ICode가 Deploy되는 순서는 다음과 같다.\n\n1. 유저가 git url과 선택에 의해 key를 넣어 deploy를 요청한다.\n2. It-chain 에서는 해당 git url이 유효한지 확인하고 clone을 통해 ICode를 받는다.\n3. Docker를 통해 해당 ICode를 위한 독립적인 환경(Container)을 만들어 준다.\n4. 해당 ICode의 url과 head 의 commit hash를 이용하여 ICode ID를 만들어 준다.\n5. 유저에게 성공적으로 Deploy 된 ICode 의 ID를 반환하여 준다.\n\n### ICode 실행\n\nIt-chain 에서 ICode는 Invoke 와 Query 요청에 의해 IVM을 통해 실행된다. Invoke는 데이터의 변경이 있는\n함수를 실행 요청하는 작업을 말한다. Invoke는 Transaction에 의해 실행되며 Transaction에는 실행시킬\nICode ID, 함수이름, 파라미터 값이 들어있다. Query는 데이터를 조회하는 함수 실행 요청 작업을 말한다.\nQuery요청은 Api-gateway 또는 CLI(Command Line Interface)를 통해 요청할 수 있다. 따라서 Invoke는 블록이 합의 되어 추가될때 실행되고, 순서는 아래 그림과 같다.\n\n<p align=\"center\"><img src=\"./doc/images/Invoke.png\" width=\"550px\" height=\"380px\"></p>\n\n1. 블록이합의되어 등록되면 블록내의 트랜젝션을 순차적으로 꺼내온다.\n2. 트랜젝션에 명시된 ICodeID 와 함수이름, 파라미터를 이용하여 IVM에서 실행한다.\n3. IVM은 ICodeID를 이용하여 ICode에 해당하는 도커 컨테이너를 찾는다.\n4. 해당 도커 컨테이너에 함수이름, 파라미터를 전달하여 ICode를 실행시킨다.\n\nQuery의 경우 Transaction에 의해 실행되는 것이 아니므로, 블록 합의 시점과 무관하다. 필요에 의해\nApi-gateway 또는 CLI에 의해 실행되며 그 순서는 아래 그림과 같다.\n\n<p align=\"center\"><img src=\"./doc/images/Query.png\" width=\"550px\" height=\"380px\"></p>\n\n1. Api-gateway 또는 CLI 에 의해 ICode Query요청을 받는다.\n2. 해당 ICode ID , 함수이름, 파라미터를 이용하여 IVM에서 실행한다.\n3. IVM은 ICodeID를 이용하여 ICode에 해당하는 도커 컨테이너를 찾는다.\n4. 해당 도커 컨테이너에 함수이름, 파라미터를 전달하여 ICode를 실행시킨다.\n5. ICode의 실행 결과 값 ( 쿼리 요청에 의해 조회된 값 ) 을 Api-gateway 또는 CLI로 전달한다.",
      "createdTime": "2019-12-29T12:52:46.443Z",
      "source": "https://github.com/DE-labtory/it-chain/blob/develop/ARCHITECTURE-KR.md"
    },
    {
      "id": 8,
      "title": "serve",
      "subTitle": "",
      "image": "https://images.unsplash.com/photo-1544731612-de7f96afe55f",
      "content": "Assuming you would like to serve a static site, single page application or just a static file (no matter if on your device or on the local network), this package is just the right choice for you.\n\nOnce it's time to push your site to production, we recommend using [ZEIT Now](https://zeit.co/now).\n\nIn general, `serve` also provides a neat interface for listing the directory's contents:\n\n![screenshot](https://user-images.githubusercontent.com/6170607/40541195-167ff460-601b-11e8-8f66-3b0c7ff96cbb.png)\n\n## Usage\n\nThe quickest way to get started is to just run `npx serve` in your project's directory.\n\nIf you prefer, you can also install the package globally using [Yarn](https://yarnpkg.com/en/) (you'll need at least [Node.js LTS](https://nodejs.org/en/)):\n\n```bash\nyarn global add serve\n```\n\nOnce that's done, you can run this command inside your project's directory...\n\n```bash\nserve\n```\n\n...or specify which folder you want to serve:\n\n```bash\nserve folder_name\n```\n\nFinally, run this command to see a list of all available options:\n\n```bash\nserve --help\n```\n\nNow you understand how the package works! :tada:\n\n## Configuration\n\nTo customize `serve`'s behavior, create a `serve.json` file in the public folder and insert any of [these properties](https://github.com/zeit/serve-handler#options).\n\n## API\n\nThe core of `serve` is [serve-handler](https://github.com/zeit/serve-handler), which can be used as middleware in existing HTTP servers:\n\n```js\nconst handler = require('serve-handler');\nconst http = require('http');\n\nconst server = http.createServer((request, response) => {\n  // You pass two more arguments for config and middleware\n  // More details here: https://github.com/zeit/serve-handler#options\n  return handler(request, response);\n})\n\nserver.listen(3000, () => {\n  console.log('Running at http://localhost:3000');\n});\n```\n\n**NOTE:** You can also replace `http.createServer` with [micro](https://github.com/zeit/micro), if you want.\n\n## Contributing\n\n1. [Fork](https://help.github.com/articles/fork-a-repo/) this repository to your own GitHub account and then [clone](https://help.github.com/articles/cloning-a-repository/) it to your local device\n2. Uninstall `serve` if it's already installed: `npm uninstall -g serve`\n3. Link it to the global module directory: `npm link`\n\nAfter that, you can use the `serve` command everywhere. [Here](https://github.com/zeit/serve/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+for+beginners%22)'s a list of issues that are great for beginners.\n\n## Credits\n\nThis project used to be called \"list\" and \"micro-list\". But thanks to [TJ Holowaychuk](https://github.com/tj) handing us the new name, it's now called \"serve\" (which is much more definite).\n\n## Author\n\nLeo Lamprecht ([@notquiteleo](https://twitter.com/notquiteleo)) - [ZEIT](https://zeit.co)\nscreenshot : 스크린샷, 화면 갈무리",
      "createdTime": "2019-12-28T16:59:46.443Z",
      "source": "https://github.com/zeit/serve/blob/master/README.md"
    },
    {
      "id": 7,
      "title": "JSON Server",
      "subTitle": "A declarative, efficient, and flexible JavaScript library for building user interfaces.",
      "image": "https://images.unsplash.com/photo-1508780709619-79562169bc64",
      "content": "# JSON Server\n\nGet a full fake REST API with __zero coding__ in __less than 30 seconds__ (seriously)\n\nCreated with <3 for front-end developers who need a quick back-end for prototyping and mocking.\n\n* [Egghead.io free video tutorial - Creating demo APIs with json-server](https://egghead.io/lessons/nodejs-creating-demo-apis-with-json-server)\n* [JSONPlaceholder - Live running version](https://jsonplaceholder.typicode.com)\n* [__My JSON Server__ - no installation required, use your own data](https://my-json-server.typicode.com)\n\nSee also:\n* :dog: [husky - Git hooks made easy](https://github.com/typicode/husky)\n* :hotel: [hotel - developer tool with local .localhost domain and https out of the box](https://github.com/typicode/hotel)\n\n<p>&nbsp;</p>\n\n<h2 align=\"center\">Gold sponsors \uD83E\uDD47</h2>\n\n<p>&nbsp;</p>\n\n<p align=\"center\">\n  <a href=\"https://tryretool.com/?utm_source=sponsor&utm_campaign=typicode\" target=\"_blank\">\n    <img src=\"https://i.imgur.com/IBItATn.png\" height=\"70px\">\n  </a>\n</p>\n\n<p>&nbsp;</p>\n\n<h2 align=\"center\">Bronze sponsors \uD83E\uDD49</h2>\n\n<p>&nbsp;</p>\n\n<p align=\"center\">\n  <a href=\"https://www.zinggrid.com/hello/json-server?utm_source=jsonserver&utm_medium=github&utm_campaign=sponsorship\" target=\"_blank\">\n    <img src=\"https://i.imgur.com/3mJGTAQ.png\" height=\"30px\">\n  </a>\n</p>\n\n<p>&nbsp;</p>\n\n[Become a sponsor and have your company logo here](https://github.com/users/typicode/sponsorship)\n\n## Table of contents\n\n<!-- toc -->\n\n- [Getting started](#getting-started)\n- [Routes](#routes)\n  * [Plural routes](#plural-routes)\n  * [Singular routes](#singular-routes)\n  * [Filter](#filter)\n  * [Paginate](#paginate)\n  * [Sort](#sort)\n  * [Slice](#slice)\n  * [Operators](#operators)\n  * [Full-text search](#full-text-search)\n  * [Relationships](#relationships)\n  * [Database](#database)\n  * [Homepage](#homepage)\n- [Extras](#extras)\n  * [Static file server](#static-file-server)\n  * [Alternative port](#alternative-port)\n  * [Access from anywhere](#access-from-anywhere)\n  * [Remote schema](#remote-schema)\n  * [Generate random data](#generate-random-data)\n  * [HTTPS](#https)\n  * [Add custom routes](#add-custom-routes)\n  * [Add middlewares](#add-middlewares)\n  * [CLI usage](#cli-usage)\n  * [Module](#module)\n    + [Simple example](#simple-example)\n    + [Custom routes example](#custom-routes-example)\n    + [Access control example](#access-control-example)\n    + [Custom output example](#custom-output-example)\n    + [Rewriter example](#rewriter-example)\n    + [Mounting JSON Server on another endpoint example](#mounting-json-server-on-another-endpoint-example)\n    + [API](#api)\n  * [Deployment](#deployment)\n- [Links](#links)\n  * [Video](#video)\n  * [Articles](#articles)\n  * [Third-party tools](#third-party-tools)\n- [License](#license)\n\n<!-- tocstop -->\n\n## Getting started\n\nInstall JSON Server \n\n```\nnpm install -g json-server\n```\n\nCreate a `db.json` file with some data\n\n```json\n{\n  \"posts\": [\n    { \"id\": 1, \"title\": \"json-server\", \"author\": \"typicode\" }\n  ],\n  \"comments\": [\n    { \"id\": 1, \"body\": \"some comment\", \"postId\": 1 }\n  ],\n  \"profile\": { \"name\": \"typicode\" }\n}\n```\n\nStart JSON Server\n\n```bash\njson-server --watch db.json\n```\n\nNow if you go to [http://localhost:3000/posts/1](http://localhost:3000/posts/1), you'll get\n\n```json\n{ \"id\": 1, \"title\": \"json-server\", \"author\": \"typicode\" }\n```\n\nAlso when doing requests, it's good to know that:\n\n- If you make POST, PUT, PATCH or DELETE requests, changes will be automatically and safely saved to `db.json` using [lowdb](https://github.com/typicode/lowdb).\n- Your request body JSON should be object enclosed, just like the GET output. (for example `{\"name\": \"Foobar\"}`)\n- Id values are not mutable. Any `id` value in the body of your PUT or PATCH request will be ignored. Only a value set in a POST request will be respected, but only if not already taken.\n- A POST, PUT or PATCH request should include a `Content-Type: application/json` header to use the JSON in the request body. Otherwise it will result in a 200 OK but without changes being made to the data.\n\n## Routes\n\nBased on the previous `db.json` file, here are all the default routes. You can also add [other routes](#add-custom-routes) using `--routes`.\n\n### Plural routes\n\n```\nGET    /posts\nGET    /posts/1\nPOST   /posts\nPUT    /posts/1\nPATCH  /posts/1\nDELETE /posts/1\n```\n\n### Singular routes\n\n```\nGET    /profile\nPOST   /profile\nPUT    /profile\nPATCH  /profile\n```\n\n### Filter\n\nUse `.` to access deep properties\n\n```\nGET /posts?title=json-server&author=typicode\nGET /posts?id=1&id=2\nGET /comments?author.name=typicode\n```\n\n### Paginate\n\nUse `_page` and optionally `_limit` to paginate returned data.\n\nIn the `Link` header you'll get `first`, `prev`, `next` and `last` links.\n\n\n```\nGET /posts?_page=7\nGET /posts?_page=7&_limit=20\n```\n\n_10 items are returned by default_\n\n### Sort\n\nAdd `_sort` and `_order` (ascending order by default)\n\n```\nGET /posts?_sort=views&_order=asc\nGET /posts/1/comments?_sort=votes&_order=asc\n```\n\nFor multiple fields, use the following format:\n\n```\nGET /posts?_sort=user,views&_order=desc,asc\n```\n\n### Slice\n\nAdd `_start` and `_end` or `_limit` (an `X-Total-Count` header is included in the response)\n\n```\nGET /posts?_start=20&_end=30\nGET /posts/1/comments?_start=20&_end=30\nGET /posts/1/comments?_start=20&_limit=10\n```\n\n_Works exactly as [Array.slice](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) (i.e. `_start` is inclusive and `_end` exclusive)_\n\n### Operators\n\nAdd `_gte` or `_lte` for getting a range\n\n```\nGET /posts?views_gte=10&views_lte=20\n```\n\nAdd `_ne` to exclude a value\n\n```\nGET /posts?id_ne=1\n```\n\nAdd `_like` to filter (RegExp supported)\n\n```\nGET /posts?title_like=server\n```\n\n### Full-text search\n\nAdd `q`\n\n```\nGET /posts?q=internet\n```\n\n### Relationships\n\nTo include children resources, add `_embed`\n\n```\nGET /posts?_embed=comments\nGET /posts/1?_embed=comments\n```\n\nTo include parent resource, add `_expand`\n\n```\nGET /comments?_expand=post\nGET /comments/1?_expand=post\n```\n\nTo get or create nested resources (by default one level, [add custom routes](#add-custom-routes) for more)\n\n```\nGET  /posts/1/comments\nPOST /posts/1/comments\n```\n\n### Database\n\n```\nGET /db\n```\n\n### Homepage\n\nReturns default index file or serves `./public` directory\n\n```\nGET /\n```\n\n## Extras\n\n### Static file server\n\nYou can use JSON Server to serve your HTML, JS and CSS, simply create a `./public` directory\nor use `--static` to set a different static files directory.\n\n```bash\nmkdir public\necho 'hello world' > public/index.html\njson-server db.json\n```\n\n```bash\njson-server db.json --static ./some-other-dir\n```\n\n### Alternative port\n\nYou can start JSON Server on other ports with the `--port` flag:\n\n```bash\n$ json-server --watch db.json --port 3004\n```\n\n### Access from anywhere\n\nYou can access your fake API from anywhere using CORS and JSONP.\n\n### Remote schema\n\nYou can load remote schemas.\n\n```bash\n$ json-server http://example.com/file.json\n$ json-server http://jsonplaceholder.typicode.com/db\n```\n\n### Generate random data\n\nUsing JS instead of a JSON file, you can create data programmatically.\n\n```javascript\n// index.js\nmodule.exports = () => {\n  const data = { users: [] }\n  // Create 1000 users\n  for (let i = 0; i < 1000; i++) {\n    data.users.push({ id: i, name: `user${i}` })\n  }\n  return data\n}\n```\n\n```bash\n$ json-server index.js\n```\n\n__Tip__ use modules like [Faker](https://github.com/Marak/faker.js), [Casual](https://github.com/boo1ean/casual), [Chance](https://github.com/victorquinn/chancejs) or [JSON Schema Faker](https://github.com/json-schema-faker/json-schema-faker).\n\n### HTTPS\n\nThere are many ways to set up SSL in development. One simple way is to use [hotel](https://github.com/typicode/hotel).\n\n### Add custom routes\n\nCreate a `routes.json` file. Pay attention to start every route with `/`.\n\n```json\n{\n  \"/api/*\": \"/$1\",\n  \"/:resource/:id/show\": \"/:resource/:id\",\n  \"/posts/:category\": \"/posts?category=:category\",\n  \"/articles\\\\?id=:id\": \"/posts/:id\"\n}\n```\n\nStart JSON Server with `--routes` option.\n\n```bash\njson-server db.json --routes routes.json\n```\n\nNow you can access resources using additional routes.\n\n```sh\n/api/posts # → /posts\n/api/posts/1  # → /posts/1\n/posts/1/show # → /posts/1\n/posts/javascript # → /posts?category=javascript\n/articles?id=1 # → /posts/1\n```\n\n### Add middlewares\n\nYou can add your middlewares from the CLI using `--middlewares` option:\n\n```js\n// hello.js\nmodule.exports = (req, res, next) => {\n  res.header('X-Hello', 'World')\n  next()\n}\n```\n\n```bash\njson-server db.json --middlewares ./hello.js\njson-server db.json --middlewares ./first.js ./second.js\n```\n\n### CLI usage\n\n```\njson-server [options] <source>\n\nOptions:\n  --config, -c       Path to config file           [default: \"json-server.json\"]\n  --port, -p         Set port                                    [default: 3000]\n  --host, -H         Set host                             [default: \"localhost\"]\n  --watch, -w        Watch file(s)                                     [boolean]\n  --routes, -r       Path to routes file\n  --middlewares, -m  Paths to middleware files                           [array]\n  --static, -s       Set static files directory\n  --read-only, --ro  Allow only GET requests                           [boolean]\n  --no-cors, --nc    Disable Cross-Origin Resource Sharing             [boolean]\n  --no-gzip, --ng    Disable GZIP Content-Encoding                     [boolean]\n  --snapshots, -S    Set snapshots directory                      [default: \".\"]\n  --delay, -d        Add delay to responses (ms)\n  --id, -i           Set database id property (e.g. _id)         [default: \"id\"]\n  --foreignKeySuffix, --fks  Set foreign key suffix, (e.g. _id as in post_id)\n                                                                 [default: \"Id\"]\n  --quiet, -q        Suppress log messages from output                 [boolean]\n  --help, -h         Show help                                         [boolean]\n  --version, -v      Show version number                               [boolean]\n\nExamples:\n  json-server db.json\n  json-server file.js\n  json-server http://example.com/db.json\n\nhttps://github.com/typicode/json-server\n```\n\nYou can also set options in a `json-server.json` configuration file.\n\n```json\n{\n  \"port\": 3000\n}\n```\n\n### Module\n\nIf you need to add authentication, validation, or __any behavior__, you can use the project as a module in combination with other Express middlewares.\n\n#### Simple example\n\n```sh\n$ npm install json-server --save-dev\n```\n\n```js\n// server.js\nconst jsonServer = require('json-server')\nconst server = jsonServer.create()\nconst router = jsonServer.router('db.json')\nconst middlewares = jsonServer.defaults()\n\nserver.use(middlewares)\nserver.use(router)\nserver.listen(3000, () => {\n  console.log('JSON Server is running')\n})\n```\n\n```sh\n$ node server.js\n```\n\nThe path you provide to the `jsonServer.router` function  is relative to the directory from where you launch your node process. If you run the above code from another directory, it’s better to use an absolute path:\n\n```js\nconst path = require('path')\nconst router = jsonServer.router(path.join(__dirname, 'db.json'))\n```\n\nFor an in-memory database, simply pass an object to `jsonServer.router()`.\n\nPlease note also that `jsonServer.router()` can be used in existing Express projects.\n\n#### Custom routes example\n\nLet's say you want a route that echoes query parameters and another one that set a timestamp on every resource created.\n\n```js\nconst jsonServer = require('json-server')\nconst server = jsonServer.create()\nconst router = jsonServer.router('db.json')\nconst middlewares = jsonServer.defaults()\n\n// Set default middlewares (logger, static, cors and no-cache)\nserver.use(middlewares)\n\n// Add custom routes before JSON Server router\nserver.get('/echo', (req, res) => {\n  res.jsonp(req.query)\n})\n\n// To handle POST, PUT and PATCH you need to use a body-parser\n// You can use the one used by JSON Server\nserver.use(jsonServer.bodyParser)\nserver.use((req, res, next) => {\n  if (req.method === 'POST') {\n    req.body.createdAt = Date.now()\n  }\n  // Continue to JSON Server router\n  next()\n})\n\n// Use default router\nserver.use(router)\nserver.listen(3000, () => {\n  console.log('JSON Server is running')\n})\n```\n\n#### Access control example\n\n```js\nconst jsonServer = require('json-server')\nconst server = jsonServer.create()\nconst router = jsonServer.router('db.json')\nconst middlewares = jsonServer.defaults()\n\nserver.use(middlewares)\nserver.use((req, res, next) => {\n if (isAuthorized(req)) { // add your authorization logic here\n   next() // continue to JSON Server router\n } else {\n   res.sendStatus(401)\n }\n})\nserver.use(router)\nserver.listen(3000, () => {\n  console.log('JSON Server is running')\n})\n```\n#### Custom output example\n\nTo modify responses, overwrite `router.render` method:\n\n```javascript\n// In this example, returned resources will be wrapped in a body property\nrouter.render = (req, res) => {\n  res.jsonp({\n    body: res.locals.data\n  })\n}\n```\n\nYou can set your own status code for the response:\n\n\n```javascript\n// In this example we simulate a server side error response\nrouter.render = (req, res) => {\n  res.status(500).jsonp({\n    error: \"error message here\"\n  })\n}\n```\n\n#### Rewriter example\n\nTo add rewrite rules, use `jsonServer.rewriter()`:\n\n```javascript\n// Add this before server.use(router)\nserver.use(jsonServer.rewriter({\n  '/api/*': '/$1',\n  '/blog/:resource/:id/show': '/:resource/:id'\n}))\n```\n\n#### Mounting JSON Server on another endpoint example\n\nAlternatively, you can also mount the router on `/api`.\n\n```javascript\nserver.use('/api', router)\n```\n\n#### API\n\n__`jsonServer.create()`__\n\nReturns an Express server.\n\n__`jsonServer.defaults([options])`__\n\nReturns middlewares used by JSON Server.\n\n* options\n  * `static` path to static files\n  * `logger` enable logger middleware (default: true)\n  * `bodyParser` enable body-parser middleware (default: true)\n  * `noCors` disable CORS (default: false)\n  * `readOnly` accept only GET requests (default: false)\n\n__`jsonServer.router([path|object])`__\n\nReturns JSON Server router.\n\n### Deployment\n\nYou can deploy JSON Server. For example, [JSONPlaceholder](http://jsonplaceholder.typicode.com) is an online fake API powered by JSON Server and running on Heroku.\n\n## Links\n\n### Video\n\n* [Creating Demo APIs with json-server on egghead.io](https://egghead.io/lessons/nodejs-creating-demo-apis-with-json-server)\n\n### Articles\n\n* [Node Module Of The Week - json-server](http://nmotw.in/json-server/)\n* [Mock up your REST API with JSON Server](http://www.betterpixels.co.uk/projects/2015/05/09/mock-up-your-rest-api-with-json-server/)\n* [ng-admin: Add an AngularJS admin GUI to any RESTful API](http://marmelab.com/blog/2014/09/15/easy-backend-for-your-restful-api.html)\n* [Fast prototyping using Restangular and Json-server](https://glebbahmutov.com/blog/fast-prototyping-restangular-and-json-server/)\n* [Create a Mock REST API in Seconds for Prototyping your Frontend](https://coligo.io/create-mock-rest-api-with-json-server/)\n* [No API? No Problem! Rapid Development via Mock APIs](https://medium.com/@housecor/rapid-development-via-mock-apis-e559087be066#.93d7w8oro)\n* [Zero Code REST With json-server](https://dzone.com/articles/zero-code-rest-with-json-server)\n\n### Third-party tools\n\n* [Grunt JSON Server](https://github.com/tfiwm/grunt-json-server)\n* [Docker JSON Server](https://github.com/clue/docker-json-server)\n* [JSON Server GUI](https://github.com/naholyr/json-server-gui)\n* [JSON file generator](https://github.com/dfsq/json-server-init)\n* [JSON Server extension](https://github.com/maty21/json-server-extension)\n\n## License\n\nMIT\n\n[Supporters](https://thanks.typicode.com) ✨\nserver : 섬기는 사람, 봉사자, 급사, 근무자, 복사",
      "createdTime": "2019-12-28T11:43:46.443Z",
      "source": "https://github.com/typicode/json-server/blob/master/README.md"
    },
    {
      "id": 6,
      "title": "NodeTube",
      "subTitle": "",
      "image": "https://images.unsplash.com/photo-1497493292307-31c376b6e479",
      "content": "# NodeTube\nAn open-source YouTube alternative that also supports image and audio uploads. Powered by NodeJS \n\nA live NodeTube instance is available to interact with at [https://nodetube.live](https://nodetube.live)\n\nYou can join the open-source community actively developing NodeTube on [Discord](https://discord.gg/ejGah8H), [Riot.im](https://riot.im/app/#/room/#nodetube:matrix.org) and [Reddit](https://reddit.com/r/nodetube)\n\n<br>\n\n<img src=\"https://user-images.githubusercontent.com/7200471/71718920-f46a9400-2dd9-11ea-8932-3b0314ec9c4e.png\" width=\"800\" >\n\n## Get Your Instance Running:\n\nYou can get an instance up instantly using one-click deployment with Heroku below:\n\n[![Deploy](https://www.herokucdn.com/deploy/button.png)](https://heroku.com/deploy?template=https://github.com/mayeaux/nodetube)\n\n## Running On Your Local Computer\n\n### Required Software\n- [Node.js 8.0+](https://nodejs.org/en/download/)\n- [MongoDB](https://www.mongodb.org/downloads)\n- [Redis](https://redis.io/download)\n- [ffmpeg](https://www.ffmpeg.org/download.html)\n\nSee instructions on installing these prerequisities for both [OS X](https://github.com/mayeaux/nodetube/wiki/Installation-Instructions---OS-X) and [Linux](https://github.com/mayeaux/nodetube/wiki/Installation-Instructions---Linux). There are also [Docker](https://github.com/mayeaux/nodetube/wiki/Docker) instructions if that's your thing.\n\nOnce Prerequisites Are Installed\n---------------\n\nNow that the prerequisites are ready to go it's a few simple commands to get your instance up and running.\n\n```bash\n# Get the latest version of NodeTube\ngit clone https://github.com/mayeaux/nodetube\n\n# Enter the nodetube folder that was just created\ncd nodetube\n\n# Install backend and frontend dependencies\nnpm run installDeps\n\n# Then simply start your app\nnpm start\n\n#If you're developing locally, you can boot the app with nodemon with:\nnpm run dev\n```\n\nAnd that's it! Your first user registered will automatically be an admin user and you will be able to see the admin and moderation functionality. Each additional user will be a regular user and will be able to upload video, audio or images up to 500MB.\n\nFor ease of local development I recommend using [Nodemon](https://github.com/remy/nodemon) to automatically restart the app while working on backend code.\n\n### Using ngrok\nNodeTube comes with [ngrok](https://ngrok.com) preinstalled with the setting in `.env.settings` to run for new instances automatically. This means that when you boot the app you will see a log come through with a link where you can access the app from the ngrok subdomain. Great you're live on the internet, that was simple!\n\n## Technical Details\n\nNodeTube is an Express application powered by NodeJS, with MongoDB as a database, with Redis for caching and `ffmpeg` for converting and compressing video content. It uses Pug as a templating engine and loads process variables through the .env.settings and .env.private files.\n\nNodeTube uses `resumable.js` on the frontend as a library to allow stable and resumable uploads allowing for the upload process to not be broken during a system reboot.\n\nNodeTube has the functionality to act as an authentication app for an nginx-rtmp server which allows NodeTube to facilitate livestreaming. NodeTube also has a built in livestreaming frontend with a live chat, live viewer count and which uses HL.js to stream the files being created by nginx-rtmp.\n\n\n[This section is being expanded rapidly so please Watch this repo so you can easily see when more documentation is available]\n\n## Reasons To Use NodeTube\n### Reasons to use NodeTube as an Instance Host:\n- Built in monetization for instance administrators: Users can optionally pay a monthly fee through Stripe to gain certain privileges which are able to be adjusted by the administrator but by default allow private and unlisted uploads, an increased maximum file-size limit from 500MB to 2GB, and livestreaming capabilities\n- You can run an instance either with a cloud provider, a VPS or dedicated server or even locally using a built-in `ngrok` integration.\n- Follow a few short steps and get setup on top of cloud providers and run for pennies a day with built-in Heroku and BackBlaze integrations, even with little technical knowledge\n- Own your own data: data is happier when it's not in the hands of a multi-billion dollar corporation and plus Google knows enough about us already\n- Built in features to get you started on Day 1 including moderation abilities, built-in analytics, administration interface, built-in reCAPTCHA\n- Support open-source software, help decentralize and open the internet.\n- Improve your software and server administration skills\n- Build and foster a community\n\n### Reasons to use NodeTube as a Free User:\n- No email necessary for registration. Optionally add an email to have password recovery functionality\n- No ads\n- Not tracked by a multibillion dollar corporation\n- Public IP stays private, unlike some other YouTube alts\n- Upload all forms of content (video, audio, image)\n- 500 MB max upload size\n-Able to load your account with credit and support creators directly [Note: This functionality exists in the NodeTube source tube but finding a payment processor to support this/legal implications are more difficult to pull off in practice.]\n- Support open-source software, help decentralize and open the internet.\n-Engage with and help grow a community\n\n### Reasons To Use NodeTube as a Paid User:\n- Ability to monetize your account and be paid directly by the instance users [Note: This functionality exists in the NodeTube source tube but finding a payment processor to support this/legal implications are more difficult to pull off in practice.]\n- Larger upload size, up to 2GB\n- Private and unlisted uploads\n- Livestreaming\n- Plus Badge to show your support\n- Support open-source software with your hard earned money, helping out in a big way to decentralize and open the internet\n- Allow others to receive the benefits of using NodeTube as a free user including not being tracked by a multibillion dollar corporation and receiving their media ad free\n\n## Additional Info\n\nYou may also be interested in [videodownloader](https://github.com/mayeaux/videodownloader), a video downloader that supports 110 websites and is powered by Electron and youtube-dl.\n\nDon't forget to join the open-source community developing NodeTube on [Discord](https://discord.gg/ejGah8H), [Riot.im](https://riot.im/app/#/room/#nodetube:matrix.org) and [Reddit](https://reddit.com/r/nodetube)\n\n\nLicense\n-------\n\nLicensed under the [MIT License](LICENSE.md). &copy; NodeTube Organization",
      "createdTime": "2019-12-28T10:12:46.443Z",
      "source": "https://github.com/mayeaux/nodetube/blob/master/README.md"
    },
    {
      "id": 5,
      "title": "JavaScript 알고리즘 및 자료 구조",
      "subTitle": "",
      "image": "https://images.unsplash.com/photo-1487611459768-bd414656ea10",
      "content": "# JavaScript 알고리즘 및 자료 구조\n\n[![Build Status](https://travis-ci.org/trekhleb/javascript-algorithms.svg?branch=master)](https://travis-ci.org/trekhleb/javascript-algorithms)\n[![codecov](https://codecov.io/gh/trekhleb/javascript-algorithms/branch/master/graph/badge.svg)](https://codecov.io/gh/trekhleb/javascript-algorithms)\n\n이 저장소에는 많이 알려진 알고리즘 및 자료 구조의 Javascript 기반 예제를 담고 있습니다.\n\n각 알고리즘과 자료 구조에 대해 연관되어있는 설명이 README에 작성되어 있으며,\n링크를 통해 더 자세한 설명을 만날 수 있습니다. (관련된 YouTube 영상도 포함).\n\n_Read this in other languages:_\n[_English_](https://github.com/trekhleb/javascript-algorithms/),\n[_简体中文_](README.zh-CN.md),\n[_繁體中文_](README.zh-TW.md),\n[_日本語_](README.ja-JP.md),\n[_Polski_](README.pl-PL.md),\n[_Français_](README.fr-FR.md),\n[_Español_](README.es-ES.md),\n[_Português_](README.pt-BR.md)\n\n## 자료 구조\n\n자료 구조는 데이터를 특정 방식으로 구성하고 저장함으로써 더 효율적으로\n접근하고 수정할 수 있게 해줍니다. 간단히 말해, 자료 구조는 데이터 값들,\n데이터 간의 관계, 그리고 데이터를 다룰 수 있는 함수와 작업의 모임입니다. \n\n\n`B` - 입문자, `A` - 숙련자\n\n* `B` [연결 리스트](src/data-structures/linked-list)\n* `B` [이중 연결 리스트](src/data-structures/doubly-linked-list)\n* `B` [큐](src/data-structures/queue)\n* `B` [스택](src/data-structures/stack)\n* `B` [해시 테이블](src/data-structures/hash-table)\n* `B` [힙](src/data-structures/heap)\n* `B` [우선순위 큐](src/data-structures/priority-queue)\n* `A` [트라이](src/data-structures/trie)\n* `A` [트리](src/data-structures/tree)\n  * `A` [이진 탐색 트리](src/data-structures/tree/binary-search-tree)\n  * `A` [AVL 트리](src/data-structures/tree/avl-tree)\n  * `A` [Red-Black 트리](src/data-structures/tree/red-black-tree)\n  * `A` [세그먼트 트리](src/data-structures/tree/segment-tree) - min/max/sum range 쿼리 예제.\n  * `A` [Fenwick 트리](src/data-structures/tree/fenwick-tree) (Binary Indexed Tree)\n* `A` [그래프](src/data-structures/graph) (유방향, 무방향)\n* `A` [서로소 집합](src/data-structures/disjoint-set)\n* `A` [블룸 필터](src/data-structures/bloom-filter)\n\n## 알고리즘\n\n알고리즘은 어떤 종류의 문제를 풀 수 있는 정확한 방법이며, \n일련의 작업을 정확하게 정의해 놓은 규칙들입니다. \n\n`B` - 입문자, `A` - 숙련자\n\n### 주제별 알고리즘\n\n* **Math**\n  * `B` [Bit Manipulation](src/algorithms/math/bits) - set/get/update/clear bits, 2의 곱 / 나누기, 음수로 만들기 etc.\n  * `B` [팩토리얼](src/algorithms/math/factorial) \n  * `B` [피보나치 수](src/algorithms/math/fibonacci)\n  * `B` [소수 판별](src/algorithms/math/primality-test) (trial division 방식)\n  * `B` [유클리드 호제법](src/algorithms/math/euclidean-algorithm) - 최대공약수 (GCD)\n  * `B` [최소 공배수](src/algorithms/math/least-common-multiple) - LCM\n  * `B` [에라토스테네스의 체](src/algorithms/math/sieve-of-eratosthenes) - 특정수 이하의 모든 소수 찾기\n  * `B` [2의 거듭제곱 판별법](src/algorithms/math/is-power-of-two) - 어떤 수가 2의 거듭제곱인지 판별 (naive 와 bitwise 알고리즘)\n  * `B` [파스칼 삼각형](src/algorithms/math/pascal-triangle)\n  * `A` [자연수 분할](src/algorithms/math/integer-partition)\n  * `A` [리우 후이 π 알고리즘](src/algorithms/math/liu-hui) - N-각형을 기반으로 π 근사치 구하기\n* **Sets**\n  * `B` [카티지언 프로덕트](src/algorithms/sets/cartesian-product) - 곱집합\n  * `B` [Fisher–Yates 셔플](src/algorithms/sets/fisher-yates) - 유한 시퀀스의 무작위 순열\n  * `A` [멱집합](src/algorithms/sets/power-set) - 집합의 모든 부분집합\n  * `A` [순열](src/algorithms/sets/permutations) (반복 유,무)\n  * `A` [조합](src/algorithms/sets/combinations) (반복 유,무)\n  * `A` [최장 공통 부분수열](src/algorithms/sets/longest-common-subsequence) (LCS)\n  * `A` [최장 증가 수열](src/algorithms/sets/longest-increasing-subsequence)\n  * `A` [Shortest Common Supersequence](src/algorithms/sets/shortest-common-supersequence) (SCS)\n  * `A` [배낭 문제](src/algorithms/sets/knapsack-problem) - \"0/1\" 과 \"Unbound\"\n  * `A` [최대 구간합](src/algorithms/sets/maximum-subarray) - \"브루트 포스\" 과 \"동적 계획법\" (Kadane's) 버전\n  * `A` [조합 합](src/algorithms/sets/combination-sum) - 특정 합을 구성하는 모든 조합 찾기\n* **Strings**\n  * `B` [해밍 거리](src/algorithms/string/hamming-distance) - 심볼이 다른 위치의 갯수\n  * `A` [편집 거리](src/algorithms/string/levenshtein-distance) - 두 시퀀스 간위 최소 편집거리\n  * `A` [커누스-모리스-프랫 알고리즘](src/algorithms/string/knuth-morris-pratt) (KMP 알고리즘) - 부분 문자열 탐색 (패턴 매칭)\n  * `A` [Z 알고리즘](src/algorithms/string/z-algorithm) - 부분 문자열 탐색 (패턴 매칭)\n  * `A` [라빈 카프 알고리즘](src/algorithms/string/rabin-karp) - 부분 문자열 탐색\n  * `A` [최장 공통 부분 문자열](src/algorithms/string/longest-common-substring)\n  * `A` [정규 표현식 매칭](src/algorithms/string/regular-expression-matching)\n* **Searches**\n  * `B` [선형 탐색](src/algorithms/search/linear-search)\n  * `B` [점프 탐색](src/algorithms/search/jump-search) (or Block Search) - 정렬된 배열에서 탐색\n  * `B` [이진 탐색](src/algorithms/search/binary-search) - 정렬된 배열에서 탐색\n  * `B` [보간 탐색](src/algorithms/search/interpolation-search) - 균등한 분포를 이루는 정렬된 배열에서 탐색\n* **Sorting**\n  * `B` [거품 정렬](src/algorithms/sorting/bubble-sort)\n  * `B` [선택 정렬](src/algorithms/sorting/selection-sort)\n  * `B` [삽입 정렬](src/algorithms/sorting/insertion-sort)\n  * `B` [힙 정렬](src/algorithms/sorting/heap-sort)\n  * `B` [병합 정렬](src/algorithms/sorting/merge-sort)\n  * `B` [퀵 정렬](src/algorithms/sorting/quick-sort) - 제자리(in-place)와 제자리가 아닌(non-in-place) 구현\n  * `B` [셸 정렬](src/algorithms/sorting/shell-sort)\n  * `B` [계수 정렬](src/algorithms/sorting/counting-sort)\n  * `B` [기수 정렬](src/algorithms/sorting/radix-sort)\n* **Trees**\n  * `B` [깊이 우선 탐색](src/algorithms/tree/depth-first-search) (DFS)\n  * `B` [너비 우선 탐색](src/algorithms/tree/breadth-first-search) (BFS)\n* **Graphs**\n  * `B` [깊이 우선 탐색](src/algorithms/graph/depth-first-search) (DFS)\n  * `B` [너비 우선 탐색](src/algorithms/graph/breadth-first-search) (BFS)\n  * `B` [크루스칼 알고리즘](src/algorithms/graph/kruskal) - 최소 신장 트리 찾기 (MST) 무방향 가중 그래프\n  * `A` [다익스트라 알고리즘](src/algorithms/graph/dijkstra) - 한 점에서 다른 모든 점까지 최단 거리 찾기\n  * `A` [벨만-포드 알고리즘](src/algorithms/graph/bellman-ford) - 한 점에서 다른 모든 점까지 최단 거리 찾기\n  * `A` [플로이드-워셜 알고리즘](src/algorithms/graph/floyd-warshall) - 모든 종단 간의 최단거리 찾기\n  * `A` [사이클 탐지](src/algorithms/graph/detect-cycle) - 유방향, 무방향 그래프 (DFS 와 Disjoint Set 에 기반한 버전)\n  * `A` [프림 알고리즘](src/algorithms/graph/prim) - 무방향 가중치 그래프에서 최소 신장 트리 (MST) 찾기\n  * `A` [위상 정렬](src/algorithms/graph/topological-sorting) - DFS 방식\n  * `A` [단절점](src/algorithms/graph/articulation-points) - 타잔의 알고리즘 (DFS 기반)\n  * `A` [단절선](src/algorithms/graph/bridges) - DFS 기반 알고리즘\n  * `A` [오일러 경로 와 오일러 회로](src/algorithms/graph/eulerian-path) - Fleury의 알고리즘 - 모든 엣지를 한번만 방문\n  * `A` [해밀턴 경로](src/algorithms/graph/hamiltonian-cycle) - 모든 꼭짓점을 한번만 방문\n  * `A` [강결합 컴포넌트](src/algorithms/graph/strongly-connected-components) - Kosaraju의 알고리즘\n  * `A` [외판원 문제](src/algorithms/graph/travelling-salesman) - 각 도시를 다 방문하고 다시 출발점으로 돌아오는 최단 경로 찾기\n* **Uncategorized**\n  * `B` [하노이 탑](src/algorithms/uncategorized/hanoi-tower)\n  * `B` [정방 행렬 회전](src/algorithms/uncategorized/square-matrix-rotation) - 제자리(in-place) 알고리즘\n  * `B` [점프 게임](src/algorithms/uncategorized/jump-game) - 백트래킹, 동적계획법 (top-down + bottom-up), 탐욕 알고리즘 예제 \n  * `B` [Unique 경로](src/algorithms/uncategorized/unique-paths) - 백트래킹, 동적계획법, 파스칼 삼각형에 기반한 예제\n  * `B` [빗물 담기 문제](src/algorithms/uncategorized/rain-terraces) - trapping rain water problem (동적계획법, 브루트포스 버전)\n  * `A` [N-Queens 문제](src/algorithms/uncategorized/n-queens)\n  * `A` [기사의 여행 문제](src/algorithms/uncategorized/knight-tour)\n\n### 패러다임별 알고리즘\n\n알고리즘 패러다임 이란, 알고리즘이 주어진 문제를 해결하기 위해 채택한 기초가 되는 일반적인 방법 혹은 접근법입니다. 알고리즘이 해결하는 문제나 알고리즘의 동작 방식이 완전히 다르더라도,알고리즘의 동작 원칙이 같으면 같은 패러다음을 사용했다고 말할 수 있으며, 주로 알고리즘을 구분하는 기준으로 쓰인다. 알고리즘이 일반적인 컴퓨터의 프로그램에 대한 개념보다 보다 더 추상적인 개념인 것처럼 알고리즘의 패러다임은 명확히 정의된 수학적 실체가 있는 것이 아니기 때문에 그 어떤 알고리즘의 개념보다도 훨씬 추상적인 개념이다.\n\n* **브루트 포스(Brute Force)** - 가능한 모든 경우를 탐색한 뒤 최적을 찾아내는 방식입니다.\n  * `B` [선형 탐색](src/algorithms/search/linear-search)\n  * `B` [빗물 담기 문제](src/algorithms/uncategorized/rain-terraces) - trapping rain water problem\n  * `A` [최대 구간합](src/algorithms/sets/maximum-subarray)\n  * `A` [외판원 문제](src/algorithms/graph/travelling-salesman) - 각 도시를 다 방문하고 다시 출발점으로 돌아오는 최단 경로 찾기\n* **탐욕 알고리즘(Greedy)** - 이후를 고려하지 않고 현재 시점에서 가장 최적인 선택을 하는 방식입니다.\n  * `B` [점프 게임](src/algorithms/uncategorized/jump-game)\n  * `A` [쪼갤수 있는 배낭 문제](src/algorithms/sets/knapsack-problem)\n  * `A` [다익스트라 알고리즘](src/algorithms/graph/dijkstra) - 모든 점 까지의 최단거리 찾기\n  * `A` [프림 알고리즘](src/algorithms/graph/prim) - 무방향 가중치 그래프에서 최소 신창 트리 (MST) 찾기\n  * `A` [크루스칼 알고리즘](src/algorithms/graph/kruskal) - 무방향 가중치 그래프에서 최소 신창 트리 (MST) 찾기\n* **분할 정복법(Divide and Conquer)** - 문제를 여러 작은 문제로 분할한 뒤 해결하는 방식입니다.\n  * `B` [이진 탐색](src/algorithms/search/binary-search)\n  * `B` [하노이 탑](src/algorithms/uncategorized/hanoi-tower)\n  * `B` [파스칼 삼각형](src/algorithms/math/pascal-triangle)\n  * `B` [유클리드 호제법](src/algorithms/math/euclidean-algorithm) - 최대공약수 계산 (GCD)\n  * `B` [병합 정렬](src/algorithms/sorting/merge-sort)\n  * `B` [퀵 정렬](src/algorithms/sorting/quick-sort)\n  * `B` [트리 깊이 우선 탐색](src/algorithms/tree/depth-first-search) (DFS)\n  * `B` [그래프 깊이 우선 탐색](src/algorithms/graph/depth-first-search) (DFS)\n  * `B` [점프 게임](src/algorithms/uncategorized/jump-game)\n  * `A` [순열](src/algorithms/sets/permutations) (반복 유,무)\n  * `A` [조합](src/algorithms/sets/combinations) (반복 유,무)\n* **동적 계획법(Dynamic Programming)** - 이전에 찾은 결과를 이용하여 최종적으로 해결하는 방식입니다.\n  * `B` [피보나치 수](src/algorithms/math/fibonacci)\n  * `B` [점프 게임](src/algorithms/uncategorized/jump-game)\n  * `B` [Unique Paths](src/algorithms/uncategorized/unique-paths)\n  * `B` [빗물 담기 문제](src/algorithms/uncategorized/rain-terraces) - trapping rain water problem\n  * `A` [편집 거리](src/algorithms/string/levenshtein-distance) - 두 시퀀스 간의 최소 편집 거리\n  * `A` [최장 공통 부분 수열](src/algorithms/sets/longest-common-subsequence) (LCS)\n  * `A` [최장 공통 부분 문자열](src/algorithms/string/longest-common-substring)\n  * `A` [최장 증가 수열](src/algorithms/sets/longest-increasing-subsequence)\n  * `A` [Shortest Common Supersequence](src/algorithms/sets/shortest-common-supersequence)\n  * `A` [0/1 배낭 문제](src/algorithms/sets/knapsack-problem)\n  * `A` [자연수 분할](src/algorithms/math/integer-partition)\n  * `A` [최대 구간합](src/algorithms/sets/maximum-subarray)\n  * `A` [벨만-포드 알고리즘](src/algorithms/graph/bellman-ford) - 모든 점 까지의 최단 거리 찾기\n  * `A` [플로이드-워셜 알고리즘](src/algorithms/graph/floyd-warshall) - 모든 종단 간의 최단거리 찾기\n  * `A` [정규 표현식 매칭](src/algorithms/string/regular-expression-matching)\n* **백트래킹(Backtracking)** - 모든 가능한 경우를 고려한다는 점에서 브루트 포스와 유사합니다. 하지만 다음 단계로 넘어갈때 마다 모든 조건을 만족했는지 확인하고 진행합니다. 만약 조건을 만족하지 못했다면 뒤로 돌아갑니다 (백트래킹). 그리고 다른 경로를 선택합니다. 보통 상태를  유지한 DFS 탐색을 많이 사용합니다.\n  * `B` [점프 게임](src/algorithms/uncategorized/jump-game)\n  * `B` [Unique Paths](src/algorithms/uncategorized/unique-paths)\n  * `A` [해밀턴 경로](src/algorithms/graph/hamiltonian-cycle) - 모든 점을 한번씩 방문\n  * `A` [N-Queens 문제](src/algorithms/uncategorized/n-queens)\n  * `A` [기사의 여행](src/algorithms/uncategorized/knight-tour)\n  * `A` [조합 합](src/algorithms/sets/combination-sum) - 특정 합을 구성하는 모든 조합 찾기\n* **분기 한정법** - 백트래킹으로 찾은 각 단계의 최소 비용이 드는 해를 기억해 두고 있다가, 이 비용을 이용해서 더 낮은 최적의 해를 찾습니다. 기억해둔 최소 비용들을 이용해 더 높은 비용이 드는 해결법을 탐색 안함으로써 불필요한 시간 소모를 줄입니다. 보통 상태 공간 트리의 DFS 탐색을 이용한 BFS 탐색 방식에서 사용됩니다.\n\n## 이 저장소의 사용법\n\n**모든 종속 모듈들 설치**\n```\nnpm install\n```\n\n**ESLint 실행**\n\n코드의 품질을 확인 할 수 있습니다.\n\n```\nnpm run lint\n```\n\n**모든 테스트 실행**\n```\nnpm test\n```\n\n**이름을 통해 특정 테스트 실행**\n```\nnpm test -- 'LinkedList'\n```\n\n**Playground**\n\n `./src/playground/playground.js` 파일을 통해 자료 구조와 알고리즘을 작성하고 `./src/playground/__test__/playground.test.js`에 테스트를 작성할 수 있습니다.\n\n그리고 간단하게 아래 명령어를 통해 의도한대로 동작하는지 확인 할 수 있습니다.:\n\n```\nnpm test -- 'playground'\n```\n\n## 유용한 정보\n\n### 참고\n\n[▶ Data Structures and Algorithms on YouTube](https://www.youtube.com/playlist?list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8)\n\n### Big O 표기\n\nBig O 표기로 표시한 알고리즘의 증가 양상입니다.\n\n![Big O graphs](./assets/big-o-graph.png)\n\nSource: [Big O Cheat Sheet](http://bigocheatsheet.com/).\n\n아래는 가장 많이 사용되는 Big O 표기와 입력 데이터 크기에 따른 성능을 비교한 표입니다.\n\n| Big O 표기 | 10 개 일때 | 100 개 일때 | 1000 개 일때  |\n| -------------- | ---------------------------- | ----------------------------- | ------------------------------- |\n| **O(1)**       | 1                            | 1                             | 1                               |\n| **O(log N)**   | 3                            | 6                             | 9                               |\n| **O(N)**       | 10                           | 100                           | 1000                            |\n| **O(N log N)** | 30                           | 600                           | 9000                            |\n| **O(N^2)**     | 100                          | 10000                         | 1000000                         |\n| **O(2^N)**     | 1024                         | 1.26e+29                      | 1.07e+301                       |\n| **O(N!)**      | 3628800                      | 9.3e+157                      | 4.02e+2567                      |\n\n### 자료 구조 작업별 복잡도\n\n| 자료 구조                 | 접근       | 검색      | 삽입       | 삭제      | 비고       |\n| ------------------------ | :-------: | :-------: | :-------: | :-------: | :-------- |\n| **배열**                  | 1         | n         | n         | n         |           |\n| **스택**                  | n         | n         | 1         | 1         |           |\n| **큐**                    | n         | n         | 1         | 1         |           |\n| **연결 리스트**            | n         | n         | 1         | 1         |           |\n| **해시 테이블**            | -         | n         | n         | n         | 완벽한 해시 함수의 경우 O(1) |\n| **이진 탐색 트리**          | n         | n         | n         | n         | 균형 트리의 경우 O(log(n)) |\n| **B-트리**                | log(n)    | log(n)    | log(n)    | log(n)    |           |\n| **Red-Black 트리**        | log(n)    | log(n)    | log(n)    | log(n)    |           |\n| **AVL 트리**              | log(n)    | log(n)    | log(n)    | log(n)    |           |\n| **Bloom Filter**          | -         | 1         | 1         | -         | 거짓 양성이 탐색 중 발생 가능 |\n\n### 정렬 알고리즘 복잡도\n\n| 이름                   | 최적            | 평균                 | 최악                | 메모리     | 동일값 순서유지    | 비고       |\n| --------------------- | :-------------: | :-----------------: | :-----------------: | :-------: | :--------------: | :-------- |\n| **거품 정렬**          | n               | n<sup>2</sup>       | n<sup>2</sup>       | 1         | Yes              |           |\n| **삽입 정렬**          | n               | n<sup>2</sup>       | n<sup>2</sup>       | 1         | Yes              |           |\n| **선택 정렬**          | n<sup>2</sup>   | n<sup>2</sup>       | n<sup>2</sup>       | 1         | No               |           |\n| **힙 정렬**            | n&nbsp;log(n)   | n&nbsp;log(n)       | n&nbsp;log(n)       | 1         | No               |           |\n| **병합 정렬**          | n&nbsp;log(n)   | n&nbsp;log(n)       | n&nbsp;log(n)       | n         | Yes              |           |\n| **퀵 정렬**            | n&nbsp;log(n)   | n&nbsp;log(n)       | n<sup>2</sup>       | log(n)    | No               | 퀵 정렬은 보통 제자리(in-place)로 O(log(n)) 스택공간으로 수행됩니다. |\n| **셸 정렬**            | n&nbsp;log(n)   | 간격 순서에 영향을 받습니다.   | n&nbsp;(log(n))<sup>2</sup>  | 1         | No         |           |\n| **계수 정렬**          | n + r           | n + r               | n + r               | n + r     | Yes              | r - 배열내 가장 큰 수 |\n| **기수 정렬**          | n * k           | n * k               | n * k               | n + k     | Yes              | k - 키값의 최대 길이 |",
      "createdTime": "2019-12-27T15:56:46.443Z",
      "source": "https://github.com/trekhleb/javascript-algorithms/blob/master/README.ko-KR.md"
    },
    {
      "id": 4,
      "title": "React Native",
      "subTitle": "",
      "image": "https://images.unsplash.com/photo-1520607162513-77705c0f0d4a",
      "content": "React Native brings [**React**'s][r] declarative UI framework to iOS and Android. With React Native, you use native UI controls and have full access to the native platform.\n\n- **Declarative.** React makes it painless to create interactive UIs. Declarative views make your code more predictable and easier to debug.\n- **Component-Based.** Build encapsulated components that manage their state, then compose them to make complex UIs.\n- **Developer Velocity.** See local changes in seconds. Changes to JavaScript code can be live reloaded without rebuilding the native app.\n- **Portability.** Reuse code across iOS, Android, and [other platforms][p].\n\nReact Native is developed and supported by many companies and individual core contributors. Find out more in our [ecosystem overview][e].\n\n[r]: https://reactjs.org/\n[p]: https://facebook.github.io/react-native/docs/out-of-tree-platforms\n[e]: https://github.com/facebook/react-native/blob/master/ECOSYSTEM.md\n\n## Contents\n\n- [Requirements](#-requirements)\n- [Building your first React Native app](#-building-your-first-react-native-app)\n- [Documentation](#-documentation)\n- [Upgrading](#-upgrading)\n- [How to Contribute](#-how-to-contribute)\n- [Code of Conduct](#code-of-conduct)\n- [License](#-license)\n\n\n## \uD83D\uDCCB Requirements\n\nReact Native apps may target iOS 9.0 and Android 4.1 (API 16) or newer. You may use Windows, macOS, or Linux as your development operating system, though building and running iOS apps is limited to macOS. Tools like [Expo](https://expo.io) can be used to work around this.\n\n## \uD83C\uDF89 Building your first React Native app\n\nFollow the [Getting Started guide](https://facebook.github.io/react-native/docs/getting-started.html). The recommended way to install React Native depends on your project. Here you can find short guides for the most common scenarios:\n\n- [Trying out React Native][hello-world]\n- [Creating a New Application][new-app]\n- [Adding React Native to an Existing Application][existing]\n\n[hello-world]: https://snack.expo.io/@hramos/hello,-world!\n[new-app]: https://facebook.github.io/react-native/docs/getting-started.html\n[existing]: https://facebook.github.io/react-native/docs/integration-with-existing-apps.html\n\n## \uD83D\uDCD6 Documentation\n\nThe full documentation for React Native can be found on our [website][docs].\n\nThe React Native documentation discusses components, APIs, and topics that are specific to React Native. For further documentation on the React API that is shared between React Native and React DOM, refer to the [React documentation][r-docs].\n\nThe source for the React Native documentation and website is hosted on a separate repo, [**@facebook/react-native-website**][repo-website].\n\n[docs]: https://facebook.github.io/react-native/docs/getting-started.html\n[r-docs]: https://reactjs.org/docs/getting-started.html\n[repo-website]: https://github.com/facebook/react-native-website\n\n## \uD83D\uDE80 Upgrading\n\nUpgrading to new versions of React Native may give you access to more APIs, views, developer tools, and other goodies. See the [Upgrading Guide][u] for instructions.\n\nReact Native releases are discussed in the React Native Community, [**@react-native-community/react-native-releases**][repo-releases].\n\n[u]: https://facebook.github.io/react-native/docs/upgrading\n[repo-releases]: https://github.com/react-native-community/react-native-releases\n\n## \uD83D\uDC4F How to Contribute\n\nThe main purpose of this repository is to continue evolving React Native core. We want to make contributing to this project as easy and transparent as possible, and we are grateful to the community for contributing bug fixes and improvements. Read below to learn how you can take part in improving React Native.\n\n### [Code of Conduct][code]\n\nFacebook has adopted a Code of Conduct that we expect project participants to adhere to.\nPlease read the [full text][code] so that you can understand what actions will and will not be tolerated.\n\n[code]: https://code.fb.com/codeofconduct/\n\n### [Contributing Guide][contribute]\n\nRead our [**Contributing Guide**][contribute] to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React Native.\n\n[contribute]: https://facebook.github.io/react-native/docs/contributing\n\n### [Open Source Roadmap][roadmap]\n\nYou can learn more about our vision for React Native in the [**Roadmap**][roadmap].\n\n[roadmap]: https://github.com/facebook/react-native/wiki/Roadmap\n\n### Good First Issues\n\nWe have a list of [good first issues][gfi] that contain bugs which have a relatively limited scope. This is a great place to get started, gain experience, and get familiar with our contribution process.\n\n[gfi]: https://github.com/facebook/react-native/labels/good%20first%20issue\n\n### Discussions\n\nLarger discussions and proposals are discussed in [**@react-native-community/discussions-and-proposals**][repo-meta].\n\n[repo-meta]: https://github.com/react-native-community/discussions-and-proposals\n\n## \uD83D\uDCC4 License\n\nReact Native is MIT licensed, as found in the [LICENSE][l] file.\n\nReact Native documentation is Creative Commons licensed, as found in the [LICENSE-docs][ld] file.\n\n[l]: https://github.com/facebook/react-native/blob/master/LICENSE\n[ld]: https://github.com/facebook/react-native/blob/master/LICENSE-docs\n",
      "createdTime": "2019-12-27T14:33:46.443Z",
      "source": "https://github.com/facebook/react-native/blob/master/README.md"
    },
    {
      "id": 3,
      "title": "react-markdown",
      "subTitle": "",
      "image": "https://images.unsplash.com/photo-1488590528505-98d2b5aba04b",
      "content": "# react-markdown\n\nRenders Markdown as pure React components.\n\n[![npm version](https://img.shields.io/npm/v/react-markdown.svg?style=flat-square)](https://www.npmjs.com/package/react-markdown)[![Build Status](https://img.shields.io/travis/rexxars/react-markdown/master.svg?style=flat-square)](https://travis-ci.org/rexxars/react-markdown)\n\nDemo available at https://rexxars.github.io/react-markdown/\n\n---\n\nreact-markdown is proudly sponsored by\n\n---\n\n## Installing\n\n```\nnpm install --save react-markdown\n```\n\n## Basic usage\n\n```js\nconst React = require('react')\nconst ReactDOM = require('react-dom')\nconst ReactMarkdown = require('react-markdown')\n\nconst input = '# This is a header\\n\\nAnd this is a paragraph'\n\nReactDOM.render(<ReactMarkdown source={input} />, document.getElementById('container'))\n```\n\n## Upgrading to 4.0\n\nShould be straightforward. You might need to alter you code slightly if you:\n\n- Are using `allowedTypes` (add `text` to the list)\n- Rely on there being a container `<div>` without a class name around your rendered markdown\n- Have implemented a custom `text` renderer\n\nSee [CHANGELOG](CHANGELOG.md) for more details.\n\n## Notes\n\nIf you don't need to render HTML, this component does not use `dangerouslySetInnerHTML` at all -\nthis is a Good Thing™.\n\n## Options\n\n- `source` or `children` - _string_ The Markdown source to parse (**required**)\n- `className` - _string_ Class name of the container element. If none is passed, a container will not be rendered.\n- `escapeHtml` - _boolean_ Setting to `false` will cause HTML to be rendered (see notes below about proper HTML support). Be aware that setting this to `false` might cause security issues if the\n  input is user-generated. Use at your own risk. (default: `true`).\n- `skipHtml` - _boolean_ Setting to `true` will skip inlined and blocks of HTML (default: `false`).\n- `sourcePos` - _boolean_ Setting to `true` will add `data-sourcepos` attributes to all elements,\n  indicating where in the markdown source they were rendered from (default: `false`).\n- `rawSourcePos` - _boolean_ Setting to `true` will pass a `sourcePosition` property to all renderers with structured source position information (default: `false`).\n- `includeNodeIndex` - _boolean_ Setting to `true` will pass `index` and `parentChildCount` props to all renderers (default: `false`).\n- `allowedTypes` - _array_ Defines which types of nodes should be allowed (rendered). (default: all\n  types).\n- `disallowedTypes` - _array_ Defines which types of nodes should be disallowed (not rendered).\n  (default: none).\n- `unwrapDisallowed` - _boolean_ Setting to `true` will try to extract/unwrap the children of\n  disallowed nodes. For instance, if disallowing `Strong`, the default behaviour is to simply skip\n  the text within the strong altogether, while the behaviour some might want is to simply have the\n  text returned without the strong wrapping it. (default: `false`)\n- `allowNode` - _function_ Function execute if in order to determine if the node should be allowed.\n  Ran prior to checking `allowedTypes`/`disallowedTypes`. Returning a truthy value will allow the\n  node to be included. Note that if this function returns `true` and the type is not in\n  `allowedTypes` (or specified as a `disallowedType`), it won't be included. The function will\n  receive three arguments argument (`node`, `index`, `parent`), where `node` contains different\n  properties depending on the node type.\n- `linkTarget` - _function|string_ Sets the default target attribute for links. If a function is\n  provided, it will be called with `url`, `text`, and `title` and should return a string\n  (e.g. `_blank` for a new tab). Default is `undefined` (no target attribute).\n- `transformLinkUri` - _function|null_ Function that gets called for each encountered link with a\n  single argument - `uri`. The returned value is used in place of the original. The default link URI\n  transformer acts as an XSS-filter, neutralizing things like `javascript:`, `vbscript:` and `file:`\n  protocols. If you specify a custom function, this default filter won't be called, but you can\n  access it as `require('react-markdown').uriTransformer`. If you want to disable the default\n  transformer, pass `null` to this option.\n- `transformImageUri` - _function|null_ Function that gets called for each encountered image with a\n  single argument - `uri`. The returned value is used in place of the original.\n- `renderers` - _object_ An object where the keys represent the node type and the value is a React\n  component. The object is merged with the default renderers. The props passed to the component\n  varies based on the type of node.\n- `plugins` - _array_ An array of unified/remark parser plugins. If you need to pass options to the plugin, pass an array with two elements, the first being the plugin and the second being the options - for instance: `{plugins: [[require('remark-shortcodes'), {your: 'options'}]]`. (default: `[]`) Note that [not all plugins can be used](https://github.com/rexxars/react-markdown/issues/188#issuecomment-404710893).\n- `parserOptions` - _object_ An object containing options to pass to [remark-parse](https://github.com/remarkjs/remark/tree/master/packages/remark-parse).\n\n## Parsing HTML\n\nIf you are in a trusted environment and want to parse and render HTML, you will want to use the `html-parser` plugin. For a default configuration, import `react-markdown/with-html` instead of the default:\n\n```js\nconst ReactMarkdown = require('react-markdown/with-html')\n\nconst markdown = `\nThis block of Markdown contains <a href=\"https://en.wikipedia.org/wiki/HTML\">HTML</a>, and will require the <code>html-parser</code> AST plugin to be loaded, in addition to setting the <code class=\"prop\">escapeHtml</code> property to false.\n`\n\n<ReactMarkdown\n  source={markdown}\n  escapeHtml={false}\n/>\n```\n\nIf you want to specify options for the HTML parsing step, you can instead import the HTML parser plugin directly:\n\n```js\nconst ReactMarkdown = require('react-markdown')\nconst htmlParser = require('react-markdown/plugins/html-parser')\n\n// See https://github.com/aknuds1/html-to-react#with-custom-processing-instructions\n// for more info on the processing instructions\nconst parseHtml = htmlParser({\n  isValidNode: node => node.type !== 'script',\n  processingInstructions: [/* ... */]\n})\n\n<ReactMarkdown\n  source={markdown}\n  escapeHtml={false}\n  astPlugins={[parseHtml]}\n/>\n```\n\n## Node types\n\nThe node types available are the following, and applies to both `renderers` and\n`allowedTypes`/`disallowedTypes`:\n\n- `root` - Root container element that contains the rendered markdown\n- `text` - Text rendered inside of other elements, such as paragraphs\n- `break` - Hard-break (`<br>`)\n- `paragraph` - Paragraph (`<p>`)\n- `emphasis` - Emphasis (`<em>`)\n- `strong` - Strong/bold (`<strong>`)\n- `thematicBreak` - Horizontal rule / thematic break (`<hr>`)\n- `blockquote` - Block quote (`<blockquote>`)\n- `delete` - Deleted/strike-through (`<del>`)\n- `link` - Link (`<a>`)\n- `image` - Image (`<img>`)\n- `linkReference` - Link (through a reference) (`<a>`)\n- `imageReference` - Image (through a reference) (`<img>`)\n- `table` - Table (`<table>`)\n- `tableHead` - Table head (`<thead>`)\n- `tableBody` - Table body (`<tbody>`)\n- `tableRow` - Table row (`<tr>`)\n- `tableCell` - Table cell (`<td>`/`<th>`)\n- `list` - List (`<ul>`/`<ol>`)\n- `listItem` - List item (`<li>`)\n- `definition` - Definition (not rendered by default)\n- `heading` - Heading (`<h1>`-`<h6>`)\n- `inlineCode` - Inline code (`<code>`)\n- `code` - Block of code (`<pre><code>`)\n- `html` - HTML node (Best-effort rendering)\n- `virtualHtml` - When not using the HTML parser plugin, a cheap and dirty approach to supporting simple HTML elements without a complete parser.\n- `parsedHtml` - When using the HTML parser plugin, HTML parsed to a React element.\n\nNote: Disallowing a node will also prevent the rendering of any children of that node, unless the\n`unwrapDisallowed` option is set to `true`. E.g., disallowing a paragraph will not render its\nchildren text nodes.\n\n## Developing\n\n```bash\ngit clone git@github.com:rexxars/react-markdown.git\ncd react-markdown\nnpm install\nnpm test\n```\n\n## License\n\nMIT © [Espen Hovlandsdal](https://espen.codes/)",
      "createdTime": "2019-12-26T16:59:46.443Z",
      "source": "https://github.com/rexxars/react-markdown/blob/master/README.md"
    },
    {
      "id": 2,
      "title": "TypeScript",
      "subTitle": "",
      "image": "https://images.unsplash.com/photo-1463171379579-3fdfb86d6285",
      "content": "\n# TypeScript\n\n[![Build Status](https://travis-ci.org/microsoft/TypeScript.svg?branch=master)](https://travis-ci.org/microsoft/TypeScript)\n[![VSTS Build Status](https://dev.azure.com/typescript/TypeScript/_apis/build/status/Typescript/node10)](https://dev.azure.com/typescript/TypeScript/_build/latest?definitionId=4&view=logs)\n[![npm version](https://badge.fury.io/js/typescript.svg)](https://www.npmjs.com/package/typescript)\n[![Downloads](https://img.shields.io/npm/dm/typescript.svg)](https://www.npmjs.com/package/typescript)\n\n[TypeScript](https://www.typescriptlang.org/) is a language for application-scale JavaScript. TypeScript adds optional types to JavaScript that support tools for large-scale JavaScript applications for any browser, for any host, on any OS. TypeScript compiles to readable, standards-based JavaScript. Try it out at the [playground](https://www.typescriptlang.org/play/), and stay up to date via [our blog](https://blogs.msdn.microsoft.com/typescript) and [Twitter account](https://twitter.com/typescript).\n\nFind others who are using TypeScript at [our community page](https://www.typescriptlang.org/community/).\n\n## Installing\n\nFor the latest stable version:\n\n```bash\nnpm install -g typescript\n```\n\nFor our nightly builds:\n\n```bash\nnpm install -g typescript@next\n```\n\n## Contribute\n\nThere are many ways to [contribute](https://github.com/microsoft/TypeScript/blob/master/CONTRIBUTING.md) to TypeScript.\n* [Submit bugs](https://github.com/microsoft/TypeScript/issues) and help us verify fixes as they are checked in.\n* Review the [source code changes](https://github.com/microsoft/TypeScript/pulls).\n* Engage with other TypeScript users and developers on [StackOverflow](https://stackoverflow.com/questions/tagged/typescript).\n* Help each other in the [TypeScript Community Discord](https://discord.gg/typescript).\n* Join the [#typescript](https://twitter.com/search?q=%23TypeScript) discussion on Twitter.\n* [Contribute bug fixes](https://github.com/microsoft/TypeScript/blob/master/CONTRIBUTING.md).\n* Read the language specification ([docx](https://github.com/microsoft/TypeScript/blob/master/doc/TypeScript%20Language%20Specification.docx?raw=true),\n [pdf](https://github.com/microsoft/TypeScript/blob/master/doc/TypeScript%20Language%20Specification.pdf?raw=true), [md](https://github.com/microsoft/TypeScript/blob/master/doc/spec.md)).\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see\nthe [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com)\nwith any additional questions or comments.\n\n## Documentation\n\n*  [TypeScript in 5 minutes](https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html)\n*  [Programming handbook](https://www.typescriptlang.org/docs/handbook/basic-types.html)\n*  [Language specification](https://github.com/microsoft/TypeScript/blob/master/doc/spec.md)\n*  [Homepage](https://www.typescriptlang.org/)\n\n## Building\n\nIn order to build the TypeScript compiler, ensure that you have [Git](https://git-scm.com/downloads) and [Node.js](https://nodejs.org/) installed.\n\nClone a copy of the repo:\n\n```bash\ngit clone https://github.com/microsoft/TypeScript.git\n```\n\nChange to the TypeScript directory:\n\n```bash\ncd TypeScript\n```\n\nInstall [Gulp](https://gulpjs.com/) tools and dev dependencies:\n\n```bash\nnpm install -g gulp\nnpm install\n```\n\nUse one of the following to build and test:\n\n```\ngulp local             # Build the compiler into built/local.\ngulp clean             # Delete the built compiler.\ngulp LKG               # Replace the last known good with the built one.\n                       # Bootstrapping step to be executed when the built compiler reaches a stable state.\ngulp tests             # Build the test infrastructure using the built compiler.\ngulp runtests          # Run tests using the built compiler and test infrastructure.\n                       # Some low-value tests are skipped when not on a CI machine - you can use the\n                       # --skipPercent=0 command to override this behavior and run all tests locally.\n                       # You can override the specific suite runner used or specify a test for this command.\n                       # Use --tests=<testPath> for a specific test and/or --runner=<runnerName> for a specific suite.\n                       # Valid runners include conformance, compiler, fourslash, project, user, and docker\n                       # The user and docker runners are extended test suite runners - the user runner\n                       # works on disk in the tests/cases/user directory, while the docker runner works in containers.\n                       # You'll need to have the docker executable in your system path for the docker runner to work.\ngulp runtests-parallel # Like runtests, but split across multiple threads. Uses a number of threads equal to the system\n                       # core count by default. Use --workers=<number> to adjust this.\ngulp baseline-accept   # This replaces the baseline test results with the results obtained from gulp runtests.\ngulp lint              # Runs eslint on the TypeScript source.\ngulp help              # List the above commands.\n```\n\n\n## Usage\n\n```bash\nnode built/local/tsc.js hello.ts\n```\n\n\n## Roadmap\n\nFor details on our planned features and future direction please refer to our [roadmap](https://github.com/microsoft/TypeScript/wiki/Roadmap).",
      "createdTime": "2019-12-25T16:59:46.443Z",
      "source": "https://github.com/microsoft/TypeScript/blob/master/README.md"
    },
    {
      "id": 1,
      "title": "React: JavaScript library for building user interfaces.",
      "subTitle": "",
      "image": "https://images.unsplash.com/photo-1544237526-cae15a57ed1e",
      "content": "# [React](https://reactjs.org/) &middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/master/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![CircleCI Status](https://circleci.com/gh/facebook/react.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/facebook/react) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request)\n\nReact is a JavaScript library for building user interfaces.\n\n* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.\n* **Component-Based:** Build encapsulated components that manage their own state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM.\n* **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using [React Native](https://facebook.github.io/react-native/).\n\n[Learn how to use React in your own project](https://reactjs.org/docs/getting-started.html).\n\n## Installation\n\nReact has been designed for gradual adoption from the start, and **you can use as little or as much React as you need**:\n\n* Use [Online Playgrounds](https://reactjs.org/docs/getting-started.html#online-playgrounds) to get a taste of React.\n* [Add React to a Website](https://reactjs.org/docs/add-react-to-a-website.html) as a `<script>` tag in one minute.\n* [Create a New React App](https://reactjs.org/docs/create-a-new-react-app.html) if you're looking for a powerful JavaScript toolchain.\n\nYou can use React as a `<script>` tag from a [CDN](https://reactjs.org/docs/cdn-links.html), or as a `react` package on [npm](https://www.npmjs.com/).\n\n## Documentation\n\nYou can find the React documentation [on the website](https://reactjs.org/docs).  \n\nCheck out the [Getting Started](https://reactjs.org/docs/getting-started.html) page for a quick overview.\n\nThe documentation is divided into several sections:\n\n* [Tutorial](https://reactjs.org/tutorial/tutorial.html)\n* [Main Concepts](https://reactjs.org/docs/hello-world.html)\n* [Advanced Guides](https://reactjs.org/docs/jsx-in-depth.html)\n* [API Reference](https://reactjs.org/docs/react-api.html)\n* [Where to Get Support](https://reactjs.org/community/support.html)\n* [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)\n\nYou can improve it by sending pull requests to [this repository](https://github.com/reactjs/reactjs.org).\n\n## Examples\n\nWe have several examples [on the website](https://reactjs.org/). Here is the first one to get you started:\n\n```jsx\nfunction HelloMessage({ name }) {\n  return <div>Hello {name}</div>;\n}\n\nReactDOM.render(\n  <HelloMessage name=\"Taylor\" />,\n  document.getElementById('container')\n);\n```\n\nThis example will render \"Hello Taylor\" into a container on the page.\n\nYou'll notice that we used an HTML-like syntax; [we call it JSX](https://reactjs.org/docs/introducing-jsx.html). JSX is not required to use React, but it makes code more readable, and writing it feels like writing HTML. If you're using React as a `<script>` tag, read [this section](https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx) on integrating JSX; otherwise, the [recommended JavaScript toolchains](https://reactjs.org/docs/create-a-new-react-app.html) handle it automatically.\n\n## Contributing\n\nThe main purpose of this repository is to continue to evolve React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.\n\n### [Code of Conduct](https://code.fb.com/codeofconduct)\n\nFacebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.\n\n### [Contributing Guide](https://reactjs.org/contributing/how-to-contribute.html)\n\nRead our [contributing guide](https://reactjs.org/contributing/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.\n\n### Good First Issues\n\nTo help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs which have a relatively limited scope. This is a great place to get started.\n\n### License\n\nReact is [MIT licensed](./LICENSE).",
      "createdTime": "2019-12-25T12:59:46.443Z",
      "source": "https://github.com/facebook/react/blob/master/README.md"
    }
  ]
}